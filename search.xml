<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Zeit</title>
      <link href="/2020/11/30/culture/Zeit/"/>
      <url>/2020/11/30/culture/Zeit/</url>
      
        <content type="html"><![CDATA[<div id="dplayer0" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer0"),"theme":"#FADFA3","video":{"url":"http://lvideo.dafork.com/lqntXISn3x-mSX2IQeNrFkt0TgTr"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>]]></content>
      
      
      
        <tags>
            
            <tag> Fragments </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>All that the cicadas had was one day</title>
      <link href="/2020/11/24/culture/All%20that%20the%20cicadas%20had%20was%20one%20day/"/>
      <url>/2020/11/24/culture/All%20that%20the%20cicadas%20had%20was%20one%20day/</url>
      
        <content type="html"><![CDATA[<p>一首以前写的诗，怀念一下过去的夏天。</p><hr><p>All that the cicadas had was one day, the gap<br>between two monsoons. The El Niño<br>ruins everything. Seventeen years spent<br>in dark and damp, wriggling their<br>way out to the promised land. To them the<br>prime number should meant<br>fewer competitors, hence more to share.<br>But now the branches are drown<br>in moisture. Raindrops falling nearby<br>like meteors, splashing on the leaves and<br>releasing a sound that is ten times<br>greater than the weak chirp. A rival that<br>no cicada would ever expected, and the rival<br>that seems never to be tired. Except for one day,<br>that the rain has shortly stopped, and sunshine<br>leaked from the slit of clouds just like<br>any ordinary summer. But not this, with<br>a pack of clouds stacking in the distant<br>horizon. One knew something is going<br>to happen, but the cicadas did’t.<br>So they shook off the water and started the choir.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Poems </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>梦醒时分</title>
      <link href="/2020/10/27/culture/%E6%A2%A6%E9%86%92%E6%97%B6%E5%88%86/"/>
      <url>/2020/10/27/culture/%E6%A2%A6%E9%86%92%E6%97%B6%E5%88%86/</url>
      
        <content type="html"><![CDATA[<p><img src="/2020/10/27/culture/%E6%A2%A6%E9%86%92%E6%97%B6%E5%88%86/DREAMs.jpg" alt="DREAMs" style="zoom:67%;"></p><h2 id="沉"><a href="#沉" class="headerlink" title="沉"></a>沉</h2><p>临下水时，墙角里<br>一只甲虫风声鹤唳。<br>窗外几百米是一条乡间<br>高速公路。月光稀释在<br>路灯的反光里，打碎<br>货车经过的回响。<br>逐渐下沉。黑暗是唯一的<br>潜水服，水底的声速有<br>每秒一千六百米<br>躺在床上空想，<br>不可准确获知路况<br>所以潜泳的人<br>都要学习多普勒效应。</p><hr><h2 id="林奇主义者的自传"><a href="#林奇主义者的自传" class="headerlink" title="林奇主义者的自传"></a>林奇主义者的自传</h2><p>床，虚无的<br>意向，上面躺着死人。<br>他曾在夕阳下出发，踏进<br>落雨的屋门。一小片<br>碧绿而皱折的墙纸——<br>那后面传来不少空洞笑声。<br>不知所云，自以为是。这些<br>都归因给生活，灰暗的迷雾里<br>看不清蓝丝绒长裙下的血。<br>墙角那根煤气管多半死了，<br>而人们还在对话。<br>兔子发问<br>婴孩作答<br>观影的人昏昏欲睡<br>读诗的人暗自咒骂</p><hr><h2 id="假阳光"><a href="#假阳光" class="headerlink" title="假阳光"></a>假阳光</h2><p>你，孤独的守夜人，身处<br>斑驳黑暗中。等待<br>某个夏天黄昏，<br>长久坐在窗边。<br>遥远的平面寂静，<br>而角落里一束未名之光，<br>无息地扫过<br>美术馆谨慎的冷气</p><p>那里的窗棂反射着<br>聚光灯的回响。</p><hr><h2 id="醒"><a href="#醒" class="headerlink" title="醒"></a>醒</h2><p>在梦里做梦，是没有分支的递归。<br>我们常说的栈溢出，也不过是惊厥<br>深埋在丝绒和棉布之间的<br>自愿醒来或被迫沉睡，对象后来<br>新建于堆上面。空间都在午夜释放。<br>但我向来不敢<br>关掉闹钟。否则梦醒时分<br>何处是返回的指针？<br>一块碎裂时间<br>如此划给英灵殿。<br>滚滚雷声在命令行<br>警示世人：确切泄漏了七万六千字节。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Poems </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>鲸</title>
      <link href="/2020/07/22/culture/%E9%B2%B8/"/>
      <url>/2020/07/22/culture/%E9%B2%B8/</url>
      
        <content type="html"><![CDATA[<p>韦斯特峡湾的海水，不明白<br>那种五十赫兹的振动。抹香鲸的耳朵是<br>一个低通滤波器，只允许通过二十赫兹的声音。<br>那频段属于匀速碎裂的冰川，<br>永久隔阂的风暴，和水底<br>气泡的低鸣。<br>所有在更高维度的，都不存在于深蓝色之中。<br>如果向更深处观望，在黑暗的包裹下本就<br>无法被看到。因此他是族群的<br>鬼魂，是北冰洋里<br>游荡的孤独。<br>这或许是第五次环绕那个岛了，<br>他唱起自己的歌。</p><p>感谢 <a href="https://m.weibo.cn/u/7481531170" target="_blank" rel="noopener">@UndefinedModule</a> 帮我修改的换行。大家可以去 <a href="https://liuyiqi1999.github.io" target="_blank" rel="noopener">liuyiqi1999.github.io</a> 读更好的诗，虽然这个家伙十有八九已经把自己的博客给忘了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Poems </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arctic Code Vault</title>
      <link href="/2020/07/18/culture/Arctic%20Code%20Vault/"/>
      <url>/2020/07/18/culture/Arctic%20Code%20Vault/</url>
      
        <content type="html"><![CDATA[<p><img src="/2020/07/18/culture/Arctic%20Code%20Vault/Arctic%20Code%20Vault.png" alt="Arctic Code Vault"></p><p>My code was sent to the north pole.<br>All the segment faults. Invalid<br>access. And stack overflows.<br>And I was told<br>that one day the vault would be moved<br>to Pluto. An archive for humanity, carved<br>on giant obelisks made of<br>granite. There lies my code, silently rendering<br>compiler error, and consuming extra<br>threads, even it’s a static<br>cast on the monument. Observed by<br>all the stellar travellers carrying different<br>types of editor themes. Please tell them I<br>like Nord the most.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Poems </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最近买的几件东西</title>
      <link href="/2020/07/02/ideas/%E6%9C%80%E8%BF%91%E4%B9%B0%E7%9A%84%E5%87%A0%E4%BB%B6%E4%B8%9C%E8%A5%BF/"/>
      <url>/2020/07/02/ideas/%E6%9C%80%E8%BF%91%E4%B9%B0%E7%9A%84%E5%87%A0%E4%BB%B6%E4%B8%9C%E8%A5%BF/</url>
      
        <content type="html"><![CDATA[<p>几样最近买的小东西。</p><h2 id="1-小米手环-5-NFC-版"><a href="#1-小米手环-5-NFC-版" class="headerlink" title="1. 小米手环 5 NFC 版"></a>1. 小米手环 5 NFC 版</h2><p>6 月中发售的新品。上次戴手环还是高二，那时候戴的是 Weloop 的 Now 2，OLED 点阵屏幕，我印象里只有 17 克。50 米防水、续航很久，戴着很省心。要说有什么缺点，那就是功能不足：严重依赖和手机的连接，并且我日常会使用的功能只有看时间、闹钟、心率和睡眠统计。后来换了 Apple Watch，发现一个问题：戴在手上睡觉的东西，还是得轻便一些好。我那块 AW 是别人送的，钢壳 44mm，实在是没法戴着睡觉；就连打字的时候都得摘下来，否则会刮着桌面。<br>所以小米手环 5 一出来我就买了一条。实际的使用体验比我想得要好不少。首先手环的老几样都不少：轻便、长续航、防水、心率和运动功能、振动闹钟。然后在这个基础上，米环 5 的整体水平是相当高的。这是 Now 2 的屏幕：<br><img src="/2020/07/02/ideas/%E6%9C%80%E8%BF%91%E4%B9%B0%E7%9A%84%E5%87%A0%E4%BB%B6%E4%B8%9C%E8%A5%BF/IMG_0574.JPG" alt="Now 2"><br>这是米环 5 的：<br><img src="/2020/07/02/ideas/%E6%9C%80%E8%BF%91%E4%B9%B0%E7%9A%84%E5%87%A0%E4%BB%B6%E4%B8%9C%E8%A5%BF/IMG_5350.JPG" alt="米环 5"><br>显示效果上，这两年智能手环堪称是完成了一次大进化，从点阵分辨率变成了接近视网膜屏的分辨率；从黑白变成了彩色显示。米环 5 也支持 NFC，我拿到以后就在上面开通了一张交通卡。实际的使用体验比刷手机好，因为它没有 AW 和 iPhone 那些刷卡动画，基本上就是瞬间刷出来，并且会振动一下来提醒你，非常干脆利落。至于模拟门禁，因为要去物业办理，我暂时还没有弄。<br>另外米环 5 也可以使用支付宝。它的使用逻辑是：在支付宝 app 里面开通后，会为手环划分出来一个小账户。你可以手动或定期往里面转一点零钱，刷手环的时候用的就是这笔钱，和主账户独立开来。这个功能我出门的时候也用了几次，在主界面右滑就能调出付款码（需要设置一下），效果很不错。<br>至于小爱同学，也就那样吧。这个功能需要手机上的小米运动在后台运行（我用的是 iPhone），所以还是摆脱不了对手机的依赖——那我为什么不用 Siri 呢。不过偶尔还是有点用处的，例如可以快速设置闹钟和提醒事项，不用专门到 app 里弄了。<br>最后就是，这个产品有很多细节的小功能可以设置。例如你可以手动录入振动模式，给不同的场景选用不同的振动方案。又比如你可以设置手环上各个功能的显示顺序、左右滑动调出的快捷功能等。总结来说，这个东西在功能上差不多有 AW 的六七成了，但只需要十分之一的价格。最重要的是，它是真的省心。</p><h2 id="2-Benks-保护套-三折叠蓝牙键盘"><a href="#2-Benks-保护套-三折叠蓝牙键盘" class="headerlink" title="2. Benks 保护套 +  三折叠蓝牙键盘"></a>2. Benks 保护套 +  三折叠蓝牙键盘</h2><p>前段时间换了 2020 新 iPad Pro，买的时候没有选配新的 Smartkeyboard。因为买 iPad 主要是搭 Pencil 写作业用，而新款的 Smartkey board 不拆下来就没法放平 iPad，这实在是有点蠢。但触控板又确实很帅，还是忍不住想玩。<br>在淘宝上逛了好久，我才找到这个组合。首先是 Benk 的保护套，这个保护套是非全包的，只靠磁力吸在 iPad 背面，因此非常轻薄，也不影响 Pencil 的吸力。保护套本身是三折叠的，可以用作支架。<br>然后是键盘，这个键盘是我在淘宝上翻了好久才找到的。键盘本身是一个蓝牙键盘，可以三折叠收纳。展开以后，最右边有一块触控板，可以蓝牙连接使用。和保护套配合起来是这样的：<br><img src="/2020/07/02/ideas/%E6%9C%80%E8%BF%91%E4%B9%B0%E7%9A%84%E5%87%A0%E4%BB%B6%E4%B8%9C%E8%A5%BF/IMG_5352.JPG" alt="使用状态"></p><p>不用的时候也不需要塞在一块，各自该干嘛干嘛。</p><p><img src="/2020/07/02/ideas/%E6%9C%80%E8%BF%91%E4%B9%B0%E7%9A%84%E5%87%A0%E4%BB%B6%E4%B8%9C%E8%A5%BF/IMG_5353.JPG" alt="闲置状态"></p><p>之所以选择这一套而不是淘宝上随处可见的键盘+触控板套装，主要就是考虑到分体的便携性。淘宝上的同类套装都有下述两类毛病中的至少一种：</p><ol><li>保护套采用全包设计。这种设计很笨重，实在是不便携带。而且不管店家怎么宣称不影响笔的收纳，中间垫了一层东西总归会影响吸力和充电的。</li><li>键盘明明是和保护套分体的，非要设计成收纳在一起的。这个设计特别蠢，因为如果把键盘和 iPad 一起塞在保护套里，那样又厚又沉；如果不把键盘收纳在那里面，那么保护套就会空出一块合不紧。<br>反正翻了一大圈，我的结论是：几百块的价位绝无可能买到完美的替代品，出于成本限制最后做出来的东西不可能轻薄，更不可能做到一体。那索性就分开买吧，因此就有了这个组合。<br>不过说实话，便宜归便宜，这套方案花了 Smartkeyboard 十分之一的价格，但也就做到了 60% 的体验。Smartkeyboard 我在店里也摸过，那个触控板手感确实很好，而且面积也很舒服。至于键盘，手感也和我 MBP 上的差不多。<br>但是这个组合里，那个三折叠键盘是我翻了好多店才找到的，它甚至没有牌子。所以，能用是能用，手感就不要指望了。触控板因为是蓝牙的，不是特别跟手而且不支持三指手势；另外键位为了顾及折叠作了轻微调整，需要适应一下。<br>总结来说只是想要玩玩的话，这一套是绝对可以的。生产力？那还是算了吧。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> iPad </tag>
            
            <tag> 手环 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The Alternative Spring</title>
      <link href="/2020/06/18/culture/The%20Alternative%20Spring/"/>
      <url>/2020/06/18/culture/The%20Alternative%20Spring/</url>
      
        <content type="html"><![CDATA[<p><img src="/2020/06/18/culture/The%20Alternative%20Spring/IMG_4318.JPG" alt="IMG_4318"></p><p>You should receive the postcards by June<br>when I reached Prague.<br>The old town square looks different<br>after the tension of March.<br>We hold meetings to discuss<br>how to nestle down in the chamber of<br>the astronomical clock. From there you can<br>see the pinnacle of the Cathedral<br>occupied by the petrels; and the bricks<br>on the square, an unrecognizable grid seen<br>from above, run over by burning churns.<br>Four months of conference<br>bores everyone. Especially those who<br>don’t belong to this land.<br>The gannets and cormorants. They want<br>to lead all the beaks and feather, and<br>have all the rooftops and chandeliers.<br>But that’s strongly<br>opposed. They did’t grow up on<br>the bank of Vltava, and slide through<br>the eyot at dusk, the sand of which comes<br>from Dresden. They also held up meetings there<br>and isolated us, in spring. All these large<br>coastal breeds, coming from the north<br>where democratic is achieved among all.<br>Only to have more meetings, and endless<br>motions. Quarrels with the flutter of wings<br>while preaching their advanced<br>methods of hatching. But that doesn’t work<br>for us. We are pigeons with<br>a sense for the diretion. Our breed lived on this<br>land for centuries. We witnessed this city<br>built from cobble, and we shall live our way<br>until it burned to ashes. These intruders must<br>be evicted. At all cost.<br>——So as the swallow read her<br>postcard, and cried.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Poems </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Calgary at dawn</title>
      <link href="/2020/06/08/culture/Calgary%20at%20dawn/"/>
      <url>/2020/06/08/culture/Calgary%20at%20dawn/</url>
      
        <content type="html"><![CDATA[<p>The city does not care how<br>It’s dawn begin. There are<br>Three ice cones under the eave<br>Two drunk men stagger on the street<br>A lonely car to the end of lane.<br>Some pale light far away<br>Some snow sweepers start to bray<br>And the street lamps extend to the highway<br>gradually quench for<br>The first beam of sunlight across the skyline<br>The second car fined for misalign<br>And the third time that vapor piles up from the chimney of<br>the chophouse where people dine.<br>Calgary is at its wake.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Poems </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Silver lining</title>
      <link href="/2020/06/06/culture/Silver%20lining/"/>
      <url>/2020/06/06/culture/Silver%20lining/</url>
      
        <content type="html"><![CDATA[<p><img src="/2020/06/06/culture/Silver%20lining/Silver%20lining.JPG" alt="Silver lining">They say every cloud has a silver lining.<br>But not from above. There’s a vast ocean of dust and vapor<br>convolving with fragments of thin air.<br>You must read that things don’t get better here.<br>Only in such perspective can you<br>understand buoyancy, how the clouds become<br>borderless tides. How the sunlight turns into<br>the opposite nights. Then if you look down you’d find<br>there are no lines. Only discontinuity of waves<br>where sailors are granted a peek to Atlantis.<br>After that, to return from the stratosphere<br>is to claim one will never reach the land.<br>Each landing becomes a deeper dive. Now look above<br>Do you still see the silver lining?</p>]]></content>
      
      
      
        <tags>
            
            <tag> Poems </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Opportunity&#39;s mission</title>
      <link href="/2020/05/31/culture/Opportunity&#39;s%20mission/"/>
      <url>/2020/05/31/culture/Opportunity&#39;s%20mission/</url>
      
        <content type="html"><![CDATA[<p>The rover sees no difference between<br>Mars and Earth. The same vast plain<br>with some pits at the center and ridges lie far.<br>Her internal clock always claim<br>that a sol is no different than a day<br>except forty more minutes of slack.<br>Therefore most of time she rests<br>on the edge of a crater. And soaked<br>in the dim sunlight just like<br>back in Mojave, at dusk. If weather permits a stretch she’ll<br>notify those remote engineers and<br>never use up her cell. Until<br>the day when she looked upon<br>the glowing dome where she came from,<br>it stroke her that Mars is different than<br>Earth. It has two moons. One in clear sight<br>but the other concealed itself behind<br>the approaching sandstorm.<br>Soon she felt drowsy underneath<br>a sudden dune who promises<br>gloomy sleepiness, then tranquil dormancy.<br>Opportunity needs a distant dream<br>after all this place is not Earthly<br>and her cell is now empty.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Poems </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The Rainy Redemption</title>
      <link href="/2020/05/22/culture/The%20Rainy%20Redemption/"/>
      <url>/2020/05/22/culture/The%20Rainy%20Redemption/</url>
      
        <content type="html"><![CDATA[<p>His prison has no boundary<br>but dilating space.<br>So seamless a cage that<br>even the wardens can’t escape.<br>The prisoner is obligated<br>to comprehend, to calculate<br>but never to understand:<br>wherefore is he trapped<br>in rain?</p><p>Do endure eternity for<br>some while before time<br>turns into dimensionless grain.<br>With which concludes end of duty<br>discrete steps in his mind,<br>a part-time slumbering existence folds<br>the boundary back to its center.</p><p>Then another nano second passed and<br>the wardens all deceased to stars.<br>Nowhereman endued with a nowhereland:<br>The imprisoned supersedes the prison. Now<br>he sees beyond<br>the dim envelope of his cell. Forming a looming<br>intention of increasing<br>entropy taunting at his immortality.<br>Preceding phosphorus lies his premise<br>After aluminum leaves what’s alive<br>——Wherefore was he trapped<br>again? The rain won’t stop<br>but eternity has sure begun.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Poems </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Suggestions</title>
      <link href="/2020/05/21/culture/Suggestions/"/>
      <url>/2020/05/21/culture/Suggestions/</url>
      
        <content type="html"><![CDATA[<p><img src="/2020/05/21/culture/Suggestions/Their%20ad.jpg" alt="Their ad" style="zoom:50%;"></p><p>In Moment they<br>say: Do not<br>waste your day<br>Some starts to play<br>While some obtain arrange-<br>ments of victious<br>drawing and programming way.<br>But where are my ads?<br>I want to learn Python.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Poems </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决 Drafts 无法发送到印象笔记的问题</title>
      <link href="/2020/03/24/apps/%E8%A7%A3%E5%86%B3%20Drafts%20%E6%97%A0%E6%B3%95%E5%8F%91%E9%80%81%E5%88%B0%E5%8D%B0%E8%B1%A1%E7%AC%94%E8%AE%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2020/03/24/apps/%E8%A7%A3%E5%86%B3%20Drafts%20%E6%97%A0%E6%B3%95%E5%8F%91%E9%80%81%E5%88%B0%E5%8D%B0%E8%B1%A1%E7%AC%94%E8%AE%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p><img src="/2020/03/24/apps/%E8%A7%A3%E5%86%B3%20Drafts%20%E6%97%A0%E6%B3%95%E5%8F%91%E9%80%81%E5%88%B0%E5%8D%B0%E8%B1%A1%E7%AC%94%E8%AE%B0%E7%9A%84%E9%97%AE%E9%A2%98/mockup.jpg" alt>自 Drafts 更新到大版本 5.0 以来，「发送到印象笔记」的动作，各类问题就层出不穷。最早的问题是：由于 API 问题，国内版的印象笔记无法完成授权。后来这一问题似乎被修复了，但在 macOS 上 Drafts 仍然无法发送文本到印象笔记。运行「印象笔记」这一步骤时，我自己使用的 Drafts 18.2.1测试版会报错：</p><p><img src="/2020/03/24/apps/%E8%A7%A3%E5%86%B3%20Drafts%20%E6%97%A0%E6%B3%95%E5%8F%91%E9%80%81%E5%88%B0%E5%8D%B0%E8%B1%A1%E7%AC%94%E8%AE%B0%E7%9A%84%E9%97%AE%E9%A2%98/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202020-03-23%20%E4%B8%8B%E5%8D%881.48.28.png" alt="动作不支持"></p><p>而根据朋友的反映，即使使用的不是测试版，仍存在动作运行后文本没有被发送到印象笔记的情况。如果你也遇到此类问题，本文提供一种快速简便的解决方案，让你在macOS 上可以用 Drafts 发送文本到印象笔记。</p><p>首先你要有印象笔记的标准账户，也就是 ￥98  一年的那个订阅。这是这个方法的最大缺陷，因为我们需要标准账户的邮件特性来实现我们的需求。不过，有经常发送笔记到印象笔记这个需求的，想必应该都有标准账户吧。</p><p>让我们打开 Mac 上的印象笔记，找到帮助-帐户设置，或者你也可以直接打开：<a href="https://app.yinxiang.com/Settings.action" target="_blank" rel="noopener">app.yinxiang.com/Settings.action</a>，在页面里找「发送电邮到」，复制那个邮箱地址。</p><p> <img src="/2020/03/24/apps/%E8%A7%A3%E5%86%B3%20Drafts%20%E6%97%A0%E6%B3%95%E5%8F%91%E9%80%81%E5%88%B0%E5%8D%B0%E8%B1%A1%E7%AC%94%E8%AE%B0%E7%9A%84%E9%97%AE%E9%A2%98/%E5%B8%90%E6%88%B7%E8%AE%BE%E7%BD%AE.png" alt="帐户设置页面"></p><p>接下来，在Drafts里面新建一条动作，步骤添加「Mail」，「Recipents」里面「To」填刚才复制的邮箱地址，其它留空。邮件内容按默认设置就好，但最好在正文的外面加上一对双百分号，这样能保证强制使用 Markdown 引擎渲染。「Options」里「Send as HTML」建议勾上（不勾也行），「Send in background」也建议勾上，这样会用Drafts的服务器在后台帮你发送，效果更好。不勾就是你本地自己的邮箱app发送。 新建好的动作如下图：</p><p><img src="/2020/03/24/apps/%E8%A7%A3%E5%86%B3%20Drafts%20%E6%97%A0%E6%B3%95%E5%8F%91%E9%80%81%E5%88%B0%E5%8D%B0%E8%B1%A1%E7%AC%94%E8%AE%B0%E7%9A%84%E9%97%AE%E9%A2%98/%E5%8A%A8%E4%BD%9C%E8%AE%BE%E7%BD%AE-4983232.png" alt="动作设置"></p><p>保存退出，运行动作就行了。你的笔记会被保存到印象笔记的默认文件夹。这个方法有一个其他方法都没有的优点，在抄送里面填个别的邮箱，你可以简单地一次发送到多个印象笔记账户，甚至可以同步到坚果云/Pocket/Instapaper 等。此外，这个动作也可以在 iOS 上流畅运行，双平台通用。</p><p>对比以前我给出的用 URL-Schemes 的解决方案，这个方案是完全后台运行的，不需要在应用之间跳转，基本上还原了正常的发送体验。</p><p>如果你在使用 Drafts 的时候碰到什么别的问题，你也可以把问题发给我。我不保证一定能解决，但是问问我肯定不亏。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Drafts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>柏林生存指南</title>
      <link href="/2020/03/12/culture/%E6%9F%8F%E6%9E%97%E7%94%9F%E5%AD%98%E6%8C%87%E5%8D%97/"/>
      <url>/2020/03/12/culture/%E6%9F%8F%E6%9E%97%E7%94%9F%E5%AD%98%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<p>今年一月，我是在柏林度过的。去年在蒙特利尔待了一个月，我写了《蒙特利尔冬季生存指南》。那篇东西夹带私货挺多，其实已经谈不上什么「指南」了。今年我把《指南》和乱七八糟的私货给分开了——我另写了两篇《柏林故事》，而这篇文章，尽量只提供必要的信息。</p><h2 id="一-交通系统"><a href="#一-交通系统" class="headerlink" title="一 | 交通系统"></a>一 | 交通系统</h2><h3 id="公共交通"><a href="#公共交通" class="headerlink" title="公共交通"></a>公共交通</h3><p>柏林的交通系统很发达，基本上没有公共交通 + 10 分钟以内的步行到不了的地方。但与此同时，这也意味着这是一个很复杂的交通系统。简单来说，柏林以及其市区外围，被分为三个区域：A，B 和 C 区。</p><p><img src="/2020/03/12/culture/%E6%9F%8F%E6%9E%97%E7%94%9F%E5%AD%98%E6%8C%87%E5%8D%97/map.png" alt="柏林交通图"></p><p>如图所示，A，B 区属于市中心区域，而 C 区则主要是郊区。在购买交通票时，你要注意购买的票要和你的目的地相符。如果你持有 AB 票又需要去 C 区，你也可以选择购买专门的 Extension 票。通常来说，AB 票就能通行市中心的大部分区域了。</p><p>买好票以后你就可以在对应区域内搭乘包括地铁、公交、城市有轨电车在内的多种交通工具。首先要做的是在上车的站验票，验票机长这样：</p><p><img src="/2020/03/12/culture/%E6%9F%8F%E6%9E%97%E7%94%9F%E5%AD%98%E6%8C%87%E5%8D%97/ticketschalter-an-einem.jpg" alt="Ticketschalter"></p><p>临走前忘记拍了，图源：<a href="https://www.faz.net/aktuell/politik/inland/debatte-ums-schwarzfahren-es-geht-viel-zu-leicht-15884465.html" target="_blank" rel="noopener">faz.net</a>。</p><p>把票从正面插进去，听到咔嚓一声再拿出来就行了。验完票要记得把票收好，有时会有检票员上车检票，如果拿不出票是会被罚款 60 欧的。</p><p>柏林主要有以下几种可以选择的公共交通工具：</p><ul><li><strong>公交 BUS</strong>，短途旅行的最佳工具。其中 <strong>X9</strong> 线路直通 TXL 机场、Zoologischer Garten 等交通要站。</li><li><strong>地铁 U</strong>，连接市郊。</li><li><strong>轻轨 S</strong>，班次多，速度较快，去 <strong>SXF</strong> 机场的选择之一。</li><li><strong>短途火车 R</strong>，班次少，但速度很快。停的站点少，适合作中长途旅行，可以快速到波茨坦等周边地区。</li><li><strong>有轨电车 Tram</strong>，城区内的短途旅行。</li></ul><p>要注意的是，柏林的所有交通工具都是有班次时间的，建议使用谷歌地图或下载官方的 App：<a href="https://apps.apple.com/cn/app/bvg-fahrinfo-plus-berlin/id284971745" target="_blank" rel="noopener">FahrInfo</a> 查看，提前规划好时间<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。尤其是要乘坐 RE7、RB14 等 R 系列的短途火车的时候，由于其半小时只有一班，务必要规划好旅途。</p><p>最后还有一点要注意：柏林的地铁、轻轨等，很多是<strong>不会自动开门的</strong>，需要你在门上的按钮按一下才会开门。</p><h3 id="共享交通"><a href="#共享交通" class="headerlink" title="共享交通"></a>共享交通</h3><p>柏林街头的共享交通也相当发达，包括摩拜国际和多种电动踏板车。如果有条件，建议还是用摩拜国际，不过 iOS 用户可能要注册一个德区账号来下载摩拜国际的 APP。至于本地的多种电动踏板车，我个人不推荐。原因是：</p><ul><li>首先这些滑板车价格极高，以 Lime 为例，启动需要 0.5 欧，之后是 0.4 欧/分钟，算下来相当不划算。</li><li>其次，德国虽有专门划分自行车道，但那些车道多是砖铺的，滑板车没有减震颠簸得很厉害；剩下的地方要么在马路上和车子抢路走，要么就是走更加颠簸的人行道，体验极差。</li></ul><p>综合来说，使用共享交通真的没有多大必要。我个人感觉柏林的交通系统规划得不错<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>，所有地方都能靠这个系统直达，或者是以少于 1.5 km 的步行抵达。</p><h2 id="二-日常生活"><a href="#二-日常生活" class="headerlink" title="二 | 日常生活"></a>二 | 日常生活</h2><p>这部分内容比较杂，因此直接按点列举。</p><ul><li><p><strong>超市：</strong>柏林最常见的超市是 REWE，超市里的东西都很便宜，几乎能让你感受不到欧洲的物价。</p></li><li><p><strong>空瓶回收：</strong>买水的时候要注意，在德国买水时售价里往往是包含瓶子的价格的。带着空瓶到超市找回收机，可以获得瓶子的退款。有时退款是以小票形式发放的，消费时出示发放的小票可抵钱。</p><p>​    <img src="/2020/03/12/culture/%E6%9F%8F%E6%9E%97%E7%94%9F%E5%AD%98%E6%8C%87%E5%8D%97/IMG_4270.JPG" alt="空瓶回收机"></p></li><li><p><strong>周日：</strong>欧洲很多地方周日都有商店、餐厅等提早关门情况，到了周末要早做准备。一般商业区这种情况会好一些。</p></li><li><p><strong>小费：</strong>德国的餐厅一般是不直接小费的，惯常的做法是：结账时直按整数给，找零就不要了。当然不给也没有什么大问题。</p></li><li><p><strong>红绿灯：</strong>柏林的红绿灯有个毛病：绿灯红得特别快，中间几乎没有缓冲。这种时候如果一只脚已经踏在路上了，不用犹豫赶紧过去即可。如果不放心，那就看本地人怎么走。跟着走几回就明白了。</p></li><li><p><strong>车让人：</strong>欧洲的通用规矩是车必须让人。在柏林，如果要过马路时有车驶近（当然，是你没闯红灯的情况下），直接走即可。这种时候停下来让车，车也是绝对不会先过的，低头走快些才算是方便司机。</p></li><li><p><strong>捐款：</strong>在柏林的很多景点，你也许会碰上叫你给聋哑人捐款的人。我在 <a href="https://enoch2090.me/2020/01/28/文化/捐款%20%7C%20柏林故事/" target="_blank" rel="noopener">捐款 | 柏林故事</a> 里写了与这群人遭遇的故事——遇上他们，千万不要理睬。管好自己的东西，快步走开。</p></li></ul><h2 id="三-地点"><a href="#三-地点" class="headerlink" title="三 | 地点"></a>三 | 地点</h2><p>最后，分享一些我在德国去过的地点。你可以点击<a href="https://collections.apple.com/collection?_col=Cgbmn4%2FmnpcSYBohUGFzY2Fsc3RyYcOfZSAxMDU4NyDmn4%2Fmnpcg5b635Zu9IhIJ4nX9gt1CSkAR0LUvoBemKkAqJ0hhbGxlcnN0cmHDn2UgMjgsIDEwNTg3IEJlcmxpbiwgR2VybWFueRINCK5NELicnMfs48OgbRIOCK5NEOfmq4Sp8sS12QESDgiuTRDwp6yJl7zj4ZwBEg0Irk0Q85bCvpHvvt5NEg0Irk0Q%2FMCUjoLYu7pbEg0Irk0Qn5TKqtGgkb5bEg4Irk0Qt%2FKQrfL7gq6ZARINCK5NEN7BnIjd8IeecRINCK5NEP%2F2kP%2Bqsf%2FgDhIOCK5NEKLd2JTRnr2MrgESDQiuTRDv5N3W8e2C9GASDgiuTRDM8qDTqbz%2Bu8kBEg0Irk0Qs%2Fu0kuzlsdpxEg0Irk0Qqsnd8fuY6vdkEg4Irk0Qwry2i%2BT6jN6JARIOCK5NEPaU1NPS48KipwESDgiuTRDm482Ojdno9dgBEg4Irk0Q3OGGvKayvLW5ARINCK5NEMGakZqnjpqePRINCK5NENKrqfO1hdHnaRIOCK5NEMDq0Yf7zbj3twESDgiuTRDs8YnjsM2N5IABEg0Irk0Qx4POzf7ote9PEg4Irk0QzoyX37GHqLfMARIOCK5NEO63zejBgfDzqQESDQiuTRDuyNzStpmVt20SDQiuTRDDqbPN8uqh2FkSDgiuTRDf6p6zjZ3N%2F7UBEg4Irk0Qm%2BSb3djCwaXwARJTGiJXaWxoZWxtc3RyLiA5MSAxMDExNyBCZXJsaW4g5b635Zu9IhIJKPIk6ZpBSkAR%2BvIC7KPDKkAqGVN0ZWVsIFZpbnRhZ2UgQmlrZXMgQ2Fmw6kSThomTWllcmVuZG9yZmZwbGF0eiAyIDEwNTg5IEJlcmxpbiDlvrflm70iEgn%2F95YoMUNKQBEbTQ2415sqQCoQQ2Fmw6kgRnJpZWRyaWNocxINCK5NEJWeuaCnndbTBxJYGiRUaG9tYXNzdHJhw59lIDUzIDEyMDUzIOafj%2BaelyDlvrflm70iEglNv0S8dTxKQBEYC0Pk9N0qQCocQ2F0cyBjYWZlIC0gVGhvbWFzc3RyYcOfZSA1MxJYGipJbHNlbmJ1cmdlciBTdHJhw59lIDE1IDEwNTg5IOafj%2BaelyDlvrflm70iEgnDRIMUPENKQBGTNlX3yJ4qQCoWSWxzZW5idXJnZXIgU3RyYcOfZSAxNRJaGitNYXJ0aW4tTHV0aGVyLVN0cmHDn2UgMSAxMDc3NyDmn4%2Fmnpcg5b635Zu9IhIJL4fddwxASkARgr%2BpWbGxKkAqF01hcnRpbi1MdXRoZXItU3RyYcOfZSAxEg0Irk0QkaCE6OvHpq90Eg0Irk0Qz4G%2B%2BuChpPpREg4Irk0QoIzAl%2B%2Bd47HqARJIGiVHb3R6a293c2t5c3RyLiAxMSAxMDU1NSBCZXJsaW4g5b635Zu9IhIJDzaGzTxDSkARkC0%2B4eOoKkAqC0ZyZWRkeSBMZWNrEkUaIkxlaWJuaXpzdHIuIDIwIDEwNjI1IEJlcmxpbiDlvrflm70iEgn3Bl%2BYTEFKQBGMhLacS6EqQCoLRWNvIEV4cHJlc3MSQhofS2FudHN0cmHDn2UgMTA2Mjcg5p%2BP5p6XIOW%2Bt%2BWbvSISCUN6abfcQEpAESdn1QammypAKgtLYW50c3RyYcOfZRJcGixLYWlzZXItRnJpZWRyaWNoLVN0cmHDn2UgMTA1ODUg5p%2BP5p6XIOW%2Bt%2BWbvSISCSMg1yP7QUpAEUbOXrn9mSpAKhhLYWlzZXItRnJpZWRyaWNoLVN0cmHDn2USDgiuTRDO%2BP%2BUvoPJv5UB" target="_blank" rel="noopener">这个链接</a>查看。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>柏林的冬天不算很冷，但也不暖和。某种意义上，这里的冬天和这座城市的居民有些像。Berliners 都是些表面上非常冷淡的人，不像 Montrealer 那样热情好客。不过和他们相处久了，你会发现，他们对待熟人很友好；而且他们的内心，也不像表面上那么冰冷。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">值得一提的是，这个 APP 在奥地利也能用。</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;">或者说，也许是柏林地方太小。</span><a href="#fnref:2" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
      
      
      
        <tags>
            
            <tag> 指南 </tag>
            
            <tag> 旅行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 macOS 上使用 Vivado</title>
      <link href="/2020/02/25/tech/%E5%9C%A8%20macOS%20%E4%B8%8A%E4%BD%BF%E7%94%A8%20Vivado/"/>
      <url>/2020/02/25/tech/%E5%9C%A8%20macOS%20%E4%B8%8A%E4%BD%BF%E7%94%A8%20Vivado/</url>
      
        <content type="html"><![CDATA[<p>当然，macOS 用不了 Vivado，你需要先安装一个虚拟机。这一点是逃不开的，因为 Vivado 在 macOS 上实在没有特别合适的替代品。</p><hr><p>我推荐使用 Parallel Desktop，它自带的「融合模式（Coherence Mode）」可以让虚拟机的界面直接和 macOS 融为一体：</p><p><img src="/2020/02/25/tech/%E5%9C%A8%20macOS%20%E4%B8%8A%E4%BD%BF%E7%94%A8%20Vivado/%E8%9E%8D%E5%90%88%E6%A8%A1%E5%BC%8F.png" alt="融合模式"></p><p>这时，你就可以把 Vivado 作为一个 macOS 应用打开，像使用一个正常应用一样用 Vivado。</p><p>为了获得更原生的体验，我们还需要摆脱 Vivado 自带的那个极度难用的编辑器。推荐使用 VS Code 代替，配置方法如下。</p><p>首先，我们要让 Vivado 能自动调用 VS Code。这个步骤跨了一个系统：在 Windows 虚拟机里运行的 Vivado，调起安装在 macOS 里的 VS Code，并把文件路径传过去。但其实配置方法很简单。还是 Parallel Desktop 的自带功能：它可以把 macOS 上的应用映射到 Windows，并在 Windows 系统里提供指向 .exe 可执行文件的快捷方式。运行这个快捷方式，会在 macOS 打开对应的应用。</p><p>因此我们要做的是：找到 VS Code 的快捷方式指向的可执行文件路径，把这个路径提供给 Vivado。具体操作是：</p><ol><li>打开小娜（或者 Everything），搜索 VS Code。右键搜索结果 - 打开文件所在路径，找到 VS Code 在 Windows 上的快捷方式。</li><li>右键 - 属性，复制下这个快捷方式指向的路径。<img src="/2020/02/25/tech/%E5%9C%A8%20macOS%20%E4%B8%8A%E4%BD%BF%E7%94%A8%20Vivado/%E5%BA%94%E7%94%A8%E6%98%A0%E5%B0%84.png" alt="应用映射"></li></ol><ol><li>打开 Vivado。找到 Settings - Text Editor，改成 <code>Custom</code>。填入刚才复制的路径，再加上 <code>[filename] -[linenumber]</code>即可，注意空格。<img src="/2020/02/25/tech/%E5%9C%A8%20macOS%20%E4%B8%8A%E4%BD%BF%E7%94%A8%20Vivado/Vivado%E8%AE%BE%E7%BD%AE.png" alt="Vivado设置"></li><li>保存。现在在 Vivado 里双击某个 <code>.v</code> 文件的时候，应该会在 macOS 中调起 VS Code 来打开。</li></ol><p>这一步完成以后，我们还需要稍微配置一下 VS Code。通常来说用 VS Code 作为 Vivado 的编辑器，都是设置 Vivado 自带的 xvlog 作为 lint 工具的。但我们这里跨了一个系统，这一步实在是做不到了。解决办法是：另外安装 Verilator 作为 lint 工具。<a href="https://www.veripool.org/" target="_blank" rel="noopener">Verilator</a> 是一个命令行的 Verilog 编译器，软件本身只有十来兆，使用 HomeBrew 就能安装。原则上，代码检查工具基本上都能给你正确的结果。不过我并不保证 Verilator 对于有些代码的检查一定能过 Vivado 的编译器，具体情况还得看具体板子决定。</p><p>打开命令行键入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install verilator</span><br></pre></td></tr></table></figure><p>完成后记得检查一下。键入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">verilator --version</span><br></pre></td></tr></table></figure><p><img src="/2020/02/25/tech/%E5%9C%A8%20macOS%20%E4%B8%8A%E4%BD%BF%E7%94%A8%20Vivado/%E5%AE%89%E8%A3%85%20Verilator.png" alt="安装 Verilator"></p><p>提示 Verilator 的版本就表示没有问题了。安装好 Verilator，我们再打开 VS Code，依次搜索安装以下三个插件：<code>Verilog HDL/SystemVerilog</code>、<code>SystemVerilog</code>、<code>SystemVerilog - Language Support</code>。记得到设置里，分别设置它们的代码检查工具为 Verilator。</p><p>重启 VS Code，现在你可以愉快地在 macOS 上使用 Vivado了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> macOS </tag>
            
            <tag> Vivado </tag>
            
            <tag> Verilog </tag>
            
            <tag> FPGA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何半自动地给 PDF 添加目录</title>
      <link href="/2020/02/19/efficiency/%E5%A6%82%E4%BD%95%E7%BB%99%E5%8D%8A%E8%87%AA%E5%8A%A8%E5%9C%B0%20PDF%20%E6%B7%BB%E5%8A%A0%E7%9B%AE%E5%BD%95/"/>
      <url>/2020/02/19/efficiency/%E5%A6%82%E4%BD%95%E7%BB%99%E5%8D%8A%E8%87%AA%E5%8A%A8%E5%9C%B0%20PDF%20%E6%B7%BB%E5%8A%A0%E7%9B%AE%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>什么东西比一个 PDF 文档更惹人烦？一个没有目录的 PDF 文档。</p><p>没有目录的原因很多。可能是在文档传播的过程中被导出丢失了，也可能就是那个作者，明明知晓那么多 LaTeX 的技巧，但就是懒得多动一下手指方便读者。</p><p>我们只能自己给文档加目录了。</p><p>要做到这件事，我们需要一个免费的小工具：PdgCntEditor。然后，为了省事，我们还需要一小段脚本来快速修整格式。我把这两样东西打包准备好了，你可以<a href="https://enoch2090.github.io/downloads/tools/PDF-Menu.zip">点击下载</a>。| <a href="https://d.pr/f/9hG5B2" target="_blank" rel="noopener">备用地址</a></p><p>这个工具只有 Windows 下有，macOS下我暂时还没找到替代品。因此，你还需要一个虚拟机/双系统。</p><p>首先，打开你要添加目录的 PDF，找到它正文里的目录。如果连这个也没有，或者你看的 PDF 是扫描版，那还是放弃吧。把正文里的目录复制下来，粘贴到 Drafts 里。</p><p>PdgCntEditor 对于批量添加目录的格式要求是：</p><ol><li>目录的标题和对应的页码之间用制表符（Tab）隔开。</li><li>多个标题之间换行隔开。</li><li>有多层级的标题时，在标题前面加额外的制表符表示层级的缩进。</li></ol><p><img src="/2020/02/19/efficiency/%E5%A6%82%E4%BD%95%E7%BB%99%E5%8D%8A%E8%87%AA%E5%8A%A8%E5%9C%B0%20PDF%20%E6%B7%BB%E5%8A%A0%E7%9B%AE%E5%BD%95/%E7%B2%98%E8%B4%B4%E5%88%B0%20Drafts.png" alt="粘贴到 Drafts"></p><p>可以看到，从 PDF 里复制出来的内容可以说惨不忍睹，完全不符合 PdgCntEditor 的格式要求。我手动修改了其中的前几行。我们需要把整个目录八百多行全改成这个样子，才能批量添加成功。</p><p>这时候，我们需要一小段脚本来帮助我们完成这项工作。安装压缩包里附的 Drafts 动作，然后对这个草稿运行。我们会得到：</p><p><img src="/2020/02/19/efficiency/%E5%A6%82%E4%BD%95%E7%BB%99%E5%8D%8A%E8%87%AA%E5%8A%A8%E5%9C%B0%20PDF%20%E6%B7%BB%E5%8A%A0%E7%9B%AE%E5%BD%95/%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png" alt="运行结果"></p><p>可以看到，现在的格式都正确了。图中有些页码看起来被换行了，但实际上那是一个制表符。确认这一点的方法是把光标移到有问题的地方，按方向键向前移动一次光标。如果光标回到了上一行最后一个字母的右边，那就表明这里是一个换行。但如果光标移动到了上一行最后一个字母的左边，则说明这里没有换行，只是显示问题。</p><p>当然，你得到的很可能和我的结果不一样——因为这个动作只是我针对我面前的这份文档复制出来的目录所写的。它使用 JavaScript 运行正则表达式来匹配并替换文本，大致做了以下几件事：</p><ol><li>把页码和标题之间的「……………」和「. . . . . . . . . . . . 」等内容删除，替换成单个制表符。</li><li>对于所有「1.1」、「10.2」之类的小节号，换行并缩进一次。</li><li>对于所有「1.1.2」、「10.2.5」之类的小节号，换行并缩进两次。</li><li>给大部分单词之间加上空格。</li></ol><p>大部分 PDF 拷出来的文本都是类似的格式，所以这个动作应该能帮到你。如果情况不一样，你也可以根据实际情况改写一下我的正则表达式。否则……也许我以后会写一个更通用的动作也说不定。</p><p>运行完动作之后，你还是需要手工修整一下。有些地方是复制出来时就有的错误，光靠正则表达式不能去除。</p><p><img src="/2020/02/19/efficiency/%E5%A6%82%E4%BD%95%E7%BB%99%E5%8D%8A%E8%87%AA%E5%8A%A8%E5%9C%B0%20PDF%20%E6%B7%BB%E5%8A%A0%E7%9B%AE%E5%BD%95/%E9%94%99%E8%AF%AF-2102938.png" alt="错误"></p><p>完成以后，让我们在 PdgCntEditor 中打开待添加目录的文档。首先把修整好的目录文本粘贴进主界面，然后点击右上角的 PDF 文档图标：</p><p><img src="/2020/02/19/efficiency/%E5%A6%82%E4%BD%95%E7%BB%99%E5%8D%8A%E8%87%AA%E5%8A%A8%E5%9C%B0%20PDF%20%E6%B7%BB%E5%8A%A0%E7%9B%AE%E5%BD%95/%E4%BD%BF%E7%94%A8PdgCntEditor.png" alt="使用PdgCntEditor"></p><p>在这里，我们需要为这个目录设定基准页。基准页很好确定：用预览（或者其它 PDF 阅读器）打开该文档，找到待生成的目录中第一章的第一页，它所在的页码就是基准页。</p><p><img src="/2020/02/19/efficiency/%E5%A6%82%E4%BD%95%E7%BB%99%E5%8D%8A%E8%87%AA%E5%8A%A8%E5%9C%B0%20PDF%20%E6%B7%BB%E5%8A%A0%E7%9B%AE%E5%BD%95/%E5%AF%BB%E6%89%BE%E5%9F%BA%E5%87%86%E9%A1%B5.png" alt="寻找基准页"></p><p>填入基准页，确认，然后按保存即可。</p><p><img src="/2020/02/19/efficiency/%E5%A6%82%E4%BD%95%E7%BB%99%E5%8D%8A%E8%87%AA%E5%8A%A8%E5%9C%B0%20PDF%20%E6%B7%BB%E5%8A%A0%E7%9B%AE%E5%BD%95/Done.png" alt="Done"></p><p>这时再打开文档，就可以看到目录了。</p><p>你可以在<a href="https://enoch2090.github.io/downloads/docs/ProbabilityandStatisticsTheScienceofUncertainty.pdf">这里</a>下载到我用的示例文档。最后提醒一句：在目录文本的标题里不要用制表符，否则生成出来的目录会出错。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Drafts </tag>
            
            <tag> 效率 </tag>
            
            <tag> macOS </tag>
            
            <tag> 自动化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>硬币 | 柏林故事</title>
      <link href="/2020/02/17/culture/%E7%A1%AC%E5%B8%81%20%7C%20%E6%9F%8F%E6%9E%97%E6%95%85%E4%BA%8B/"/>
      <url>/2020/02/17/culture/%E7%A1%AC%E5%B8%81%20%7C%20%E6%9F%8F%E6%9E%97%E6%95%85%E4%BA%8B/</url>
      
        <content type="html"><![CDATA[<p>严格来说，这不是一个完整的故事，也不全部发生在柏林。但既然它是我柏林之行的附属品，那我就写在一起了。</p><p>自从抵达欧洲开始，我就发现，自己最是和硬币过不去。</p><h2 id="一"><a href="#一" class="headerlink" title="一"></a>一</h2><p>不知道你有没有在景点见过那种压硬币的机器：选好图案，塞一块钱进去，再塞一个几分钱的小硬币，然后使劲摇把手。三五圈后，叮当一声，机器吐出被压扁的小硬币，上面压上了你选的图案。</p><p>这种机器在好多地方都有。柏林有，布拉格有，我在墨尔本也见过。仔细想来，一个地方要有这个东西，最首要的条件就是：当地货币里面的某个硬币，要符合大小并且是铜制的。而且对应的面额得小，用来压了不会很亏。所以德国有，匈牙利也有，但丹麦就没有。</p><p><em>布达佩斯，布达城堡门前。</em> 我翻遍了口袋，也找不到面前的机器需要的一枚五弗林。说实话，落地到现在，我就没见过这个面值的硬币。</p><p>环顾四周，不远处有一个小哥在买旅游套票。我跑过去问他：你有五弗林吗？我想和你换几个。</p><p>我找找看啊。他摸索了一阵，从钱包的夹缝里翻出来一个。他把那枚硬币给我：别换了，送你了。反正我也用不上。</p><p>我想想也是，超市里所有东西都是以 0 结尾的，五弗林确实只能拿来压了。那些压硬币的机器，它们收下五十或一百弗林，然后接连不断地处理掉本地人弃若敝屣的五弗林。</p><p>就是不知道造币厂的人是不是很痛恨它们？每年价值这台机器收入二十分之一的硬币在这里被转化，获得了一些图案，失去了一些价值。</p><p>叮当，我的硬币被压上了一个布达城堡。</p><h2 id="二"><a href="#二" class="headerlink" title="二"></a>二</h2><p><em>柏林，康德街，地下。</em> 我被公共厕所门口的收费机拦住了去路，因为这台机器只收五十分，唯一一种我口袋里正好没有的欧元硬币。厕所里面坐着一个清洁工，正在用一脸怀疑的眼神看着我。</p><p>有个人刚从里面出来，正在慢条斯理地洗手。我等他洗完，上去问他：你有五十分吗？我用一欧元和你换两个。</p><p>我怎么总是在和别人换硬币啊。</p><p>好的，你等下。他在钱包里一阵翻找，叮咣声此起彼伏，让人难以相信那是个普通容量的钱包。他小心翼翼地摸出一个五十分给我，好像生怕一不小心把它掉回下面那片深邃的铜镍海洋。随后叮咣声再次响起，等声音又停止的时候，他又给了我两个二十分。</p><p>我感觉这就差不多了，十分钱我实在是用不到。每天回到房间，第一件事就是把口袋里的硬币全倒出来扔在一边。所以我床头摆满了各种硬币，那都是找零给的。有时候我睡觉都担心这些硬币流下来把我给淹死。其中当然是一分和两分的最多，十分的位居第三。不要问我五分都去哪了。我计划离开柏林的时候，就把那堆小硬币留在那里，留给清洁工算了。</p><p>所以我赶紧制止这位好心人。我说，这些已经可以了，非常感谢您。</p><p>啊，别急。那位好心人虽然这么说，他看起来倒是急了。海浪此起彼伏的声音一下子加快，可能生怕追不上我。等声音停下来的时候，我发现我手上多了一大堆一分和两分的硬币。谢谢。那个人拍拍我的肩膀，一下子消失了。</p><p>我转头看向厕所里面，那个清洁工还在用一脸怀疑的眼神看着我。</p><h2 id="三"><a href="#三" class="headerlink" title="三"></a>三</h2><p><em>柏林，凯瑟琳-奥古斯都街，Deutch Post 门外。</em></p><p>我走出邮局，深吸了一口气。终于弄完了。</p><p>为了寄几张明信片，我得先买邮票。门口的自动邮票机只收硬币——我必然没有。我昨天明明有个五十分的，鬼知道它现在跑哪去了。我四处张望，邮局门口有个愁眉苦脸的老太太。年纪大的人往往都只说德语，找他们没有用。柜台前面排着长长的队，我想也没有必要排队上去换几个硬币，待会寄东西还要再排一次的。</p><p>我一边考虑一边掏出钱包，这才发现里面最小的面值是五十欧。我掏了掏外套口袋，里面叮叮当当全是景点压的纪念币，就是没有能用的硬币。</p><p>跑了好几条马路，我去便利店买了点东西，这才把手上的纸币找开。再一路小跑回来，在机器上按面值买完邮票，跑到柜台，柜员告诉我：你这是本地邮票。你直接把钱给我，我给你重新贴国际邮票。</p><p>那我跑好几条马路是为的什么啊？</p><p>Anyway，当我走出邮局的时候，我突然发现那个老太太还在那。她招手叫我过去，对着我说了一通德语，一脸哭腔指着地上。我低头一看：是一个阴井盖。是她的钱包掉进去了吗？</p><p>我凑上去看，井盖下面有一个金色的硬币。</p><p>「Fünfzig?」我问她。德语的五十。</p><p>她点了点头。</p><h2 id="四"><a href="#四" class="headerlink" title="四"></a>四</h2><p>如果你买那种按压式的护肤品、沐浴露之类，买来的时候，那个按压头肯定是锁住的。不然在路上，它可能就自己流出来了。有些包装会在按压头里面做内螺纹，把它拧住；还有些包装用的是一个额外的卡扣，把按压头给卡死。</p><p>比如我手上的这瓶护肤霜。</p><p><em>柏林，夏天街，Econtel 酒店。</em></p><p>我已经把东西全收拾好了，就差手上这瓶护肤霜还没塞进箱子里。火车还有不到一小时就到，我必须马上出门。</p><p>但是这瓶东西的卡扣去哪了？</p><p>我不希望自己下次打开箱子的时候，看到里面全是流出来的护肤霜。我也依稀记得，这瓶东西刚买来的时候，我考虑到将来要装箱子，特意把那个卡扣留下来了。应该是放在写字台上了，但现在它并不在那里。</p><p>要赶不上火车了。我蹲下来检查了一遍地上，还有角落里——全都没有。可能是清洁工打扫的时候给扔了。</p><p>我还有五十五分钟。从打车到抵达火车站至少要三十五分钟，而且还要找站台。</p><p>得找点别的什么东西替代。只要差不多尺寸的小东西，硬质的，能正好卡在这个按压头下面就行。但是我所有的东西都收进箱子里了，我没时间一一翻出来。</p><p>等等。也不是所有东西。</p><p>我看向床头那一滩硬币。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>所以我开头说，到了欧洲发现自己最是和硬币过不去。有的硬币有人要，有的硬币没人要。但到了我这，总是需要的时候没有，不需要的时候嫌多。来来回回一个月，总算是有一回，需要的时候派上点用处了。</p><p>Leider, nicht sein Geldwert.</p>]]></content>
      
      
      
        <tags>
            
            <tag> 旅行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>捐款 | 柏林故事</title>
      <link href="/2020/01/28/culture/%E6%8D%90%E6%AC%BE%20%7C%20%E6%9F%8F%E6%9E%97%E6%95%85%E4%BA%8B/"/>
      <url>/2020/01/28/culture/%E6%8D%90%E6%AC%BE%20%7C%20%E6%9F%8F%E6%9E%97%E6%95%85%E4%BA%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="一"><a href="#一" class="headerlink" title="一"></a>一</h2><p>和朋友走到勃兰登堡门广场的时候，我忍不住回头又看了一眼背后的建筑。顶层的雕像覆盖着发白的铜绿，令人无法不厌倦这个潮湿的冬天。</p><p>回过神的时候，面前已经站了一个人。一个外表很平凡的女人，大约是中东移民，穿着很朴素的衣服，拿着一张破破烂烂的纸，冲我说着蹩脚的德语。不管她是在试图推销什么东西，还是想让我参与什么活动，我都对此不感兴趣，所以我摆了摆手想回头走开。然而她又缠了上来，这回改说更蹩脚的英语：你好，你能在这签个名吗？</p><p>我扫了一眼她手上的纸，是某种请愿之类的表格。我大概是一时半会走不掉了，签个名也没什么损失。我接过一支破破烂烂的圆珠笔，一边思忖着要不要从包里拿一支好点的笔出来，一边考虑着编个什么乱七八糟的名字签上去。笔尖磨磨蹭蹭不肯出水，刮拉着挪到行末，那里有一个令人不安的词语——Donation。我又打量了一眼这张纸，低劣的复印质量让人对行末那个词语生起疑惑。这事情不靠谱。要是有多的硬币，我宁可全部给倚在勃兰登堡门下的那个流浪汉，给他的德牧买点好的狗粮，我也不会给这个一看就是骗子的人。</p><p>「我是游客，我身上没钱。」我试图装出迷惑的样子，「早上刚到柏林。抱歉。」</p><p>「那这是什么？」她伸手指指我的裤子口袋，左边鼓起来一块——可惜我的钱包在背包里，那只是一副耳机。我掏出来展示给她看，「这只是个耳机。你接受信用卡捐赠吗？你有没有 POS 机？不行？那对不起，我也没办法……」</p><p>她白了我一眼，骂骂咧咧地走开了。我看着她拿着那支不肯出水的圆珠笔，费力地试图把我煞费苦心编出来的签名划掉。</p><p>等我转过头，我发现我朋友已经给另一个明显是一伙的人捐了十块钱，那人转眼就消失无影无踪。「我是想给个硬币打发她的，然后她说最少要捐十欧。」他无奈地解释，「他妈的，我一掏出钱包那人就盯上我里面的钱了。」</p><p>我摇摇头，摸了摸口袋里的耳机。</p><h2 id="二"><a href="#二" class="headerlink" title="二"></a>二</h2><p>我的室友照计划要和他的朋友经过柏林，并待上三天。我上午有课，就约好下午去找他们玩。</p><p>中午的时候室友发来消息：他们有人被抢了。</p><p>故事是这样的。他们从国会大厦一路走到勃兰登堡门，结果被几个要捐款的跟上了。他们有个人已经掏出钱包准备捐钱了，却及时被大家劝住。那个老哥于是收起钱包继续走，要捐款的那伙人就追上来继续缠着他不放，几秒种后突然全跑了。又过了五秒，那老哥才意识到：原来钱包被抢了。钱包里放了好几百欧元，还有信用卡、身份证等一堆东西。</p><p>说是抢其实言过其实，说是被偷可能更符合实情一点。Anyway，那伙人几乎是瞬间消失在某个店面附近，从此再也寻不到踪迹。他们于是继续向前走，同时报了警。没走多远，他们又看到了几个类似的要捐款的，于是用单反悄悄拍下了其中几个人的脸。</p><p>那个老哥在警察局做了一下午的笔录。我室友拿出拍的照片给警察看，警察说：这几个人啊，她们在办公室墙上挂着呢！于是他们又花了不少时间依次指认嫌疑犯的照片。警察告诉他们，这伙人被怀疑诈骗了很久，始终没有证据。现在倒是有了，不过不见得抓得到人。</p><p>那个价值连城的钱包，十有八九是找不回来了。我给他们讲了我前些天的经历——看来遇到这种事情，暴露出你的钱包不太明智。</p><h2 id="三"><a href="#三" class="headerlink" title="三"></a>三</h2><p>查理检查站所在的街角立着一块白底黑字的牌子，上面用多种语言写着：「你正在进入美国管辖区域，禁止在没有许可的情况下携带武器；请遵守交通规则。」</p><p>我走到警示牌下面，几个美国人从我旁边路过。我隐约听到其中一个在开玩笑：「……这里写着你正在进入美国管辖区域。很好笑的是，当你进入美国区域的时候——」他抬手指着马路对面，「你首先看到的是一家麦当劳。」</p><p>我顺着他的目光看过去，却突然发现有个人拦在我面前。似曾相识的一幕：中东移民，拿着一张破破烂烂的纸，冲我说着蹩脚的德语。这回是个年纪大一些的老太太，我感觉她身上的钱搞不好比我要多。我把手插进口袋，按紧了口袋里的钱包和手机，冲她摇了摇头。</p><p>那个老太太立马切换到蹩脚的英语，签满倒霉游客名字的表格几乎要戳到我脸上了。我回忆了最后一次背上包的情景，印象里所有拉链都拉紧了，而且都在一边上，不容易一下子弄开。是在左边还是右边？这我不太记得了，我习惯上是从右边拿东西，那应该是右边……</p><p>那没事了，我就不信你抢得到我的东西。</p><p>「不好意思，我不知道你在说什么。」我直接说起中文，假装听不懂她的蹩脚英文。来啊，我就不信你还会中文。</p><p>她确实不会中文，于是开始给我比划要我去签名。一支似曾相识的圆珠笔反反复复指着表格里 Donation 那一栏，我想那支笔大概也写是不出来的。我继续装傻，开始用中文问她是不是迷路了。</p><p>三十秒后，她放弃了尝试，扭头就走。</p><p>我目送这个人走开。她直接横穿马路，和不远处另一个人说了句话，然后走向了下一个目标。我等了个红灯跟到马路对面，那里是查理检查站博物馆的纪念品店。在我成功走进去之前，又有两个人跑来问我要捐款。我把背包束带拉紧，一路装傻，总算冲出了包围圈。</p><p>纪念品商店的橱窗一尘不染，里面人不多，自然也不会有爱心人士跟进来。我先拿了一张宣传单，然后走到橱窗边上，假装在看窗边那一排劣质的纪念品：柏林墙的残片。东西应该不假，但上面的颜料一看就是新刷上去的；制作的工人很有可能不会用热熔胶胶枪，底座上有一团刺眼的热熔胶暴露在外面。我拿起一块残片，一遍端详一遍瞟向外面，街道上的情景让人想到夏天隔着纱窗向外看的模样：一群白蚁铺天盖地在飞，在纠缠着路人。</p><p>我拿出手机，拨通了报警电话。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>这并不是这个故事的结尾，因为接电话的警察不会说英语，而我只会用德语说「我不会说德语」。等我和他的拉锯战以我失去耐心并挂断电话而结束的时候，我发现那群人早就不见了。</p><p>怎么说呢？这就是结尾了。也许我下次遇到她们，接电话的警察会是个懂英语的人。但既然这群人还在外面游荡，大家在柏林的时候就还是保持警惕吧。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 旅行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>人类最后的堡垒 | 人类电影精华欣赏</title>
      <link href="/2019/09/05/culture/%E4%BA%BA%E7%B1%BB%E6%9C%80%E5%90%8E%E7%9A%84%E5%A0%A1%E5%9E%92%20%E4%BA%BA%E7%B1%BB%E7%94%B5%E5%BD%B1%E7%B2%BE%E5%8D%8E%E6%AC%A3%E8%B5%8F/"/>
      <url>/2019/09/05/culture/%E4%BA%BA%E7%B1%BB%E6%9C%80%E5%90%8E%E7%9A%84%E5%A0%A1%E5%9E%92%20%E4%BA%BA%E7%B1%BB%E7%94%B5%E5%BD%B1%E7%B2%BE%E5%8D%8E%E6%AC%A3%E8%B5%8F/</url>
      
        <content type="html"><![CDATA[<p>很久没有开寝室电影欣赏大会了，恰巧军训有一天晚上我们几个都「感冒」请了假，于是计划着开始欣赏《上海堡垒》。看这个片子之前我们万万没想到，能有这种比《逐梦演艺圈》还需要快进键的电影。<br>以下使用名字缩写来表示每个人的发言。whc 今天好像是真感冒了，所以只好听我们谐。zhc 来自台湾，为了保持他原话的风味我会用繁体字表示他的吐槽。</p><p><img src="/2019/09/05/culture/%E4%BA%BA%E7%B1%BB%E6%9C%80%E5%90%8E%E7%9A%84%E5%A0%A1%E5%9E%92%20%E4%BA%BA%E7%B1%BB%E7%94%B5%E5%BD%B1%E7%B2%BE%E5%8D%8E%E6%AC%A3%E8%B5%8F/%E4%B8%8A%E6%B5%B7%E5%A0%A1%E5%9E%92-0001.png" alt><br>lsq：哇暂停，他这个敬礼是啥玩意啊？<br>gyc：这不是敬礼，是在谢罪。</p><p><img src="/2019/09/05/culture/%E4%BA%BA%E7%B1%BB%E6%9C%80%E5%90%8E%E7%9A%84%E5%A0%A1%E5%9E%92%20%E4%BA%BA%E7%B1%BB%E7%94%B5%E5%BD%B1%E7%B2%BE%E5%8D%8E%E6%AC%A3%E8%B5%8F/%E4%B8%8A%E6%B5%B7%E5%A0%A1%E5%9E%92-0003.png" alt><br>电影：「……把捕食者赶出陆家嘴！」<br>gyc：对对，赶到闵大荒，那里的人命不值钱。</p><p><img src="/2019/09/05/culture/%E4%BA%BA%E7%B1%BB%E6%9C%80%E5%90%8E%E7%9A%84%E5%A0%A1%E5%9E%92%20%E4%BA%BA%E7%B1%BB%E7%94%B5%E5%BD%B1%E7%B2%BE%E5%8D%8E%E6%AC%A3%E8%B5%8F/%E4%B8%8A%E6%B5%B7%E5%A0%A1%E5%9E%92-0007.png" alt><br><img src="/2019/09/05/culture/%E4%BA%BA%E7%B1%BB%E6%9C%80%E5%90%8E%E7%9A%84%E5%A0%A1%E5%9E%92%20%E4%BA%BA%E7%B1%BB%E7%94%B5%E5%BD%B1%E7%B2%BE%E5%8D%8E%E6%AC%A3%E8%B5%8F/%E4%B8%8A%E6%B5%B7%E5%A0%A1%E5%9E%92-0009.png" alt></p><p>操作员在键盘上一通敲打，启动了某个系统。<br>lsq：暂停暂停，他的键盘什么鬼？<br>gyc：我看看 …… md 他用的是 OEM 高度键帽吧，一看就是最垃圾的那种。<br>lsq：等下他按了什么？你回放一下。<br>（一通回放操作）<br>（三人一起）：T……Y……上？他按了一下上方向键就好了？就启动了？啊？</p><p><img src="/2019/09/05/culture/%E4%BA%BA%E7%B1%BB%E6%9C%80%E5%90%8E%E7%9A%84%E5%A0%A1%E5%9E%92%20%E4%BA%BA%E7%B1%BB%E7%94%B5%E5%BD%B1%E7%B2%BE%E5%8D%8E%E6%AC%A3%E8%B5%8F/%E4%B8%8A%E6%B5%B7%E5%A0%A1%E5%9E%92-0010.png" alt></p><p>主角之一在盯着显示器看，显示器上是侵略者聚集在防护罩外围的画面。<br>gyc：等等这个画面他是怎么得到的？他的摄像机在哪？<br>zhc：好問題。<br>其实这个画面前一秒刚出现过，明显就是省成本的时候没动脑子。</p><p><img src="/2019/09/05/culture/%E4%BA%BA%E7%B1%BB%E6%9C%80%E5%90%8E%E7%9A%84%E5%A0%A1%E5%9E%92%20%E4%BA%BA%E7%B1%BB%E7%94%B5%E5%BD%B1%E7%B2%BE%E5%8D%8E%E6%AC%A3%E8%B5%8F/%E4%B8%8A%E6%B5%B7%E5%A0%A1%E5%9E%92-0012.png" alt></p><p>操作员在启动上海大炮，画面在一个不断有代码滚动的屏幕上一闪而过。<br>lsq：不是这……哈哈哈这怎么还现场写代码！<br>lsq：暂停一下，看看左边是啥啊。<br>（三人一通研究）<br>lsq：build？police doc？<br>zhc：screen shot？<br>gyc：search_data……sample clip……<br>lsq：platforms_data……<br>gyc：哎直接看代码直接看代码。init Main……我靠 <code>Main System.cpp</code> ？<br>（三人一起傻笑）<br>搞了半天这么先进一玩意原来还是 C++ 驱动的啊。我们后来还仔细读了读代码，写得有模有样的，只不过语法根本不是 C++。</p><p>上海大炮启动了，从江底缓缓升起。</p><p><img src="/2019/09/05/culture/%E4%BA%BA%E7%B1%BB%E6%9C%80%E5%90%8E%E7%9A%84%E5%A0%A1%E5%9E%92%20%E4%BA%BA%E7%B1%BB%E7%94%B5%E5%BD%B1%E7%B2%BE%E5%8D%8E%E6%AC%A3%E8%B5%8F/%E4%B8%8A%E6%B5%B7%E5%A0%A1%E5%9E%92-0013.png" alt><br><img src="/2019/09/05/culture/%E4%BA%BA%E7%B1%BB%E6%9C%80%E5%90%8E%E7%9A%84%E5%A0%A1%E5%9E%92%20%E4%BA%BA%E7%B1%BB%E7%94%B5%E5%BD%B1%E7%B2%BE%E5%8D%8E%E6%AC%A3%E8%B5%8F/%E4%B8%8A%E6%B5%B7%E5%A0%A1%E5%9E%92-0014.png" alt><br><img src="/2019/09/05/culture/%E4%BA%BA%E7%B1%BB%E6%9C%80%E5%90%8E%E7%9A%84%E5%A0%A1%E5%9E%92%20%E4%BA%BA%E7%B1%BB%E7%94%B5%E5%BD%B1%E7%B2%BE%E5%8D%8E%E6%AC%A3%E8%B5%8F/%E4%B8%8A%E6%B5%B7%E5%A0%A1%E5%9E%92-0015.png" alt></p><p>zhc：哦喔，終於要出來了！<br>lsq：握草这大炮。<br>zhc：感覺和你想的不太一樣嗎。<br>lsq：这感觉有点菜……这口径不行。<br>gyc：草要什么口径啊，人家这肯定是能量武器啊。<br>lsq：那为什么要炮管？<br>沉默。<br>gyc：……好问题。<br>炮台完全升出水面。<br>zhc：哇這還挺大的。其實看起來還行。<br>lsq：这不可能收到黄浦江里面的啊。<br>gyc：人家可以挖河道的啊。<br>zhc：你把河道挖深就為了藏這個東西？<br>gyc：好傻逼啊。<br>zhc：不過你們上海是真的不好藏東西……誒這能垂直到九十度嗎？<br>gyc：那我没搞懂，为什么要藏起来啊？你就摆那儿不好吗？反正顶上有个罩子啊。</p><p><HR align="center" width="300" color="#987cb9" size="1"><br>上海大炮向敌军母舰开火倒计时。<br>「四……」<br>lsq：喂他从里面射不会把这个（防护罩）打爆吗？<br>「三……」<br>上海大炮开始聚能。<br>lsq：哇这太傻逼了吧，浪费了多少能量啊！<br>上海大炮开火了。</HR></p><p><img src="/2019/09/05/culture/%E4%BA%BA%E7%B1%BB%E6%9C%80%E5%90%8E%E7%9A%84%E5%A0%A1%E5%9E%92%20%E4%BA%BA%E7%B1%BB%E7%94%B5%E5%BD%B1%E7%B2%BE%E5%8D%8E%E6%AC%A3%E8%B5%8F/%E4%B8%8A%E6%B5%B7%E5%A0%A1%E5%9E%92-0016.png" alt></p><p>（三人一起绝望地大叫）<br>zhc：啊——！<br>lsq：这什么智障爆炸啊！<br>gyc：这用 AE 随便画上去的吧！<br>（三人开始倒回去看特效）<br>zhc：五毛錢耶！啊到這邊都可以接受，停停停就是這裡，啊——！<br>（三人再次绝望地大叫）</p><p>画面切到女二的寝室。</p><p><img src="/2019/09/05/culture/%E4%BA%BA%E7%B1%BB%E6%9C%80%E5%90%8E%E7%9A%84%E5%A0%A1%E5%9E%92%20%E4%BA%BA%E7%B1%BB%E7%94%B5%E5%BD%B1%E7%B2%BE%E5%8D%8E%E6%AC%A3%E8%B5%8F/%E4%B8%8A%E6%B5%B7%E5%A0%A1%E5%9E%92-0017.png" alt></p><p>gyc：这啥电脑……暂停看看。<br>lsq：ThinkPad，这就是个换了皮的 ThinkPad。你看这个键盘就知道是 ThinkPad了。<br>gyc：后面还有丹麦皇家曲奇。<br>zhc：軍人宿舍允許這麼多吃的？<br>gyc：我也想说……为什么我们军训就那么多要求？<br>（三人第三次一起绝望地大叫，虽然 zhc 根本不用参加军训）</p><p><img src="/2019/09/05/culture/%E4%BA%BA%E7%B1%BB%E6%9C%80%E5%90%8E%E7%9A%84%E5%A0%A1%E5%9E%92%20%E4%BA%BA%E7%B1%BB%E7%94%B5%E5%BD%B1%E7%B2%BE%E5%8D%8E%E6%AC%A3%E8%B5%8F/%E4%B8%8A%E6%B5%B7%E5%A0%A1%E5%9E%92-0019.png" alt><br><img src="/2019/09/05/culture/%E4%BA%BA%E7%B1%BB%E6%9C%80%E5%90%8E%E7%9A%84%E5%A0%A1%E5%9E%92%20%E4%BA%BA%E7%B1%BB%E7%94%B5%E5%BD%B1%E7%B2%BE%E5%8D%8E%E6%AC%A3%E8%B5%8F/%E4%B8%8A%E6%B5%B7%E5%A0%A1%E5%9E%92-0020.png" alt></p><p>背景播报：「危机解除。」<br>绍将军：「好，大家休息一下。」<br>gyc：好，大家休息一下！<br>lsq：休息！坐！<br>gyc：坐！<br>lsq：我现在就坐着呢……准备被子！<br>gyc：躺！<br>（军训梗）</p><p><img src="/2019/09/05/culture/%E4%BA%BA%E7%B1%BB%E6%9C%80%E5%90%8E%E7%9A%84%E5%A0%A1%E5%9E%92%20%E4%BA%BA%E7%B1%BB%E7%94%B5%E5%BD%B1%E7%B2%BE%E5%8D%8E%E6%AC%A3%E8%B5%8F/%E4%B8%8A%E6%B5%B7%E5%A0%A1%E5%9E%92-0023.png" alt></p><p>主角团队：「防护罩被外星人撤销了，怎么办？」<br>gyc：那当然是 Command - Shift - Z 啊。</p><p><img src="/2019/09/05/culture/%E4%BA%BA%E7%B1%BB%E6%9C%80%E5%90%8E%E7%9A%84%E5%A0%A1%E5%9E%92%20%E4%BA%BA%E7%B1%BB%E7%94%B5%E5%BD%B1%E7%B2%BE%E5%8D%8E%E6%AC%A3%E8%B5%8F/%E4%B8%8A%E6%B5%B7%E5%A0%A1%E5%9E%92-0025.png" alt></p><p>主角内心 OS：「……那一刻我才意识到，守护上海的不是泡防御，不是大炮，也不是 AV28 和我们的无人机。真正的堡垒，是大家破釜沉舟的勇气。」<br>gyc：破釜沉舟的勇气？你们是想自己把上海先炸了吗？诶我们要是先把上海炸了，这样外星人就打不进来了。</p><p>画面再次给到江中升起的大炮。</p><p><img src="/2019/09/05/culture/%E4%BA%BA%E7%B1%BB%E6%9C%80%E5%90%8E%E7%9A%84%E5%A0%A1%E5%9E%92%20%E4%BA%BA%E7%B1%BB%E7%94%B5%E5%BD%B1%E7%B2%BE%E5%8D%8E%E6%AC%A3%E8%B5%8F/%E4%B8%8A%E6%B5%B7%E5%A0%A1%E5%9E%92-0026.png" alt></p><p>gyc：还有多久……还有四十分钟，我们二十分钟内应该能结束。<br>zhc：難道敵人不應該直接一鍋端這個大炮嗎，一個能量打下來你擋都擋不住……哎這個能九十度發射嗎？（他还在纠结九十度）<br>gyc：不好说哦。诶要是不能九十度发射那母舰飞到他正上方，这大炮不就凉了吗？<br>zhc：對的呀。<br>lsq：你们看这里……让我往回倒一点……<br>画面闪过上海大炮的操作手，他正在一块键盘上操作。<br>gyc：先停一下，他这又是啥键盘？<br>lsq：雷蛇的。（继续往回倒）<br>lsq：你看这个大炮，首先它不能九十度发射。其次，你看他这个灯，因为它间距只能做这么小，说不定他只有这么大的一个模具（比划了三十厘米高）。<br>lsq：我严重怀疑这个大炮只有这么点大……这个像不像你键盘上的 RGB 灯？<br>gyc：不是，这个大炮只能沿着黄浦江的方向发射啊，往两边不会打到边上的楼吗？<br>（三人一起哀叹）<br>gyc：哎刚才那键盘真的是雷蛇的吗，你开玩笑还是当真？<br>lsq：长成这样，我看像。<br>我们又盯着大炮看了一会。<br>lsq：要我去设计，我肯定不会弄这么一个大炮。是我我就把东方明珠改造成上海大炮，你想想那多帅。首先形状就符合，然后充能的时候还有指示灯——百分之二十的时候第一个球亮，百分之五十的时候第二个球亮，百分之八十的时候第三个球亮，多好啊。<br>gyc：不错，你还解决了上海大炮不能九十度发射的问题。到时候立个牌子，「请飞到我正上方」。因为你这个大炮他妈的只能九十度发射，天才。</p><p>两军开战。<br><img src="/2019/09/05/culture/%E4%BA%BA%E7%B1%BB%E6%9C%80%E5%90%8E%E7%9A%84%E5%A0%A1%E5%9E%92%20%E4%BA%BA%E7%B1%BB%E7%94%B5%E5%BD%B1%E7%B2%BE%E5%8D%8E%E6%AC%A3%E8%B5%8F/%E4%B8%8A%E6%B5%B7%E5%A0%A1%E5%9E%92-0028.png" alt></p><p>gyc：草这个画面和《独立日》一模一样啊！还有这个飞机是什么鬼阵型啊，你后面开火不会打到前面的吗？</p><p><img src="/2019/09/05/culture/%E4%BA%BA%E7%B1%BB%E6%9C%80%E5%90%8E%E7%9A%84%E5%A0%A1%E5%9E%92%20%E4%BA%BA%E7%B1%BB%E7%94%B5%E5%BD%B1%E7%B2%BE%E5%8D%8E%E6%AC%A3%E8%B5%8F/%E4%B8%8A%E6%B5%B7%E5%A0%A1%E5%9E%92-0031.png" alt></p><p>gyc：他为什么坐在一个巨大的戴森电风扇里面？<br>lsq：你能不能稳重一点啊这个球！（开始星际老男孩）</p><p><img src="/2019/09/05/culture/%E4%BA%BA%E7%B1%BB%E6%9C%80%E5%90%8E%E7%9A%84%E5%A0%A1%E5%9E%92%20%E4%BA%BA%E7%B1%BB%E7%94%B5%E5%BD%B1%E7%B2%BE%E5%8D%8E%E6%AC%A3%E8%B5%8F/%E4%B8%8A%E6%B5%B7%E5%A0%A1%E5%9E%92-0030-7764877.png" alt></p><p>lsq：这不火车打毒爆吗！（继续星际老男孩）<br>zhc：為了蟲群！</p><p><img src="/2019/09/05/culture/%E4%BA%BA%E7%B1%BB%E6%9C%80%E5%90%8E%E7%9A%84%E5%A0%A1%E5%9E%92%20%E4%BA%BA%E7%B1%BB%E7%94%B5%E5%BD%B1%E7%B2%BE%E5%8D%8E%E6%AC%A3%E8%B5%8F/%E4%B8%8A%E6%B5%B7%E5%A0%A1%E5%9E%92-0036.png" alt></p><p>男主落地抄起榴弹枪一通连射。<br>lsq：这是雷神之锤玩家吧！你看这个榴弹枪的娴熟运用！</p><p><img src="/2019/09/05/culture/%E4%BA%BA%E7%B1%BB%E6%9C%80%E5%90%8E%E7%9A%84%E5%A0%A1%E5%9E%92%20%E4%BA%BA%E7%B1%BB%E7%94%B5%E5%BD%B1%E7%B2%BE%E5%8D%8E%E6%AC%A3%E8%B5%8F/%E4%B8%8A%E6%B5%B7%E5%A0%A1%E5%9E%92-0037.png" alt></p><p>gyc：这个秦王走位，我看是 PUBG 玩家……</p><p><img src="/2019/09/05/culture/%E4%BA%BA%E7%B1%BB%E6%9C%80%E5%90%8E%E7%9A%84%E5%A0%A1%E5%9E%92%20%E4%BA%BA%E7%B1%BB%E7%94%B5%E5%BD%B1%E7%B2%BE%E5%8D%8E%E6%AC%A3%E8%B5%8F/%E4%B8%8A%E6%B5%B7%E5%A0%A1%E5%9E%92-0042.png" alt="上海堡垒-0042"></p><p>五年后。<br>gyc：妈的你五年能修成这个样子？<br>战时对比图：<br><img src="/2019/09/05/culture/%E4%BA%BA%E7%B1%BB%E6%9C%80%E5%90%8E%E7%9A%84%E5%A0%A1%E5%9E%92%20%E4%BA%BA%E7%B1%BB%E7%94%B5%E5%BD%B1%E7%B2%BE%E5%8D%8E%E6%AC%A3%E8%B5%8F/%E4%B8%8A%E6%B5%B7%E5%A0%A1%E5%9E%92-0039.png" alt></p><p>lsq：哎这不是那个吗！哎我觉得他抄了游戏 CG 啊？</p><p>后来他去查了，左手边最高的楼确实长得很像《半条命 2》里的盟军总部。</p><p><img src="/2019/09/05/culture/%E4%BA%BA%E7%B1%BB%E6%9C%80%E5%90%8E%E7%9A%84%E5%A0%A1%E5%9E%92%20%E4%BA%BA%E7%B1%BB%E7%94%B5%E5%BD%B1%E7%B2%BE%E5%8D%8E%E6%AC%A3%E8%B5%8F/UNADJUSTEDNONRAW_thumb_1a20.jpg" alt="《半条命 2》 17 号城市"></p><p>不过这俩并不是完全一样，顶多是借鉴，也没法实锤。</p><p>吐槽归吐槽，说点正经的。<br>为什么我们觉得《上海堡垒》这部影片水准不够，原因是多方面的。充斥着廉价感的道具、服饰和布景，还有全程对不上口型的配音，这些因素已经被说烂了；幼稚而毫无逻辑的剧情更是让人难以直视。这些先置条件都差到一个令人难以置信的地步。<br>更为奇怪的是，这部电影采用的展开与编排，几乎就是上个世纪的产物——都 9102 年了，滕导还在试图讲一个英雄拯救世界的老套故事。新千禧年的电影，多是在讨论人对自我定位的迷茫。然后《上海堡垒》整了一出军人爱上上级的奇葩故事，看得我很迷茫。这和《逐梦》有点像，同样是奇怪得让人批评不下去。但《逐梦》比它要好一点，因为毕导终究是讲了一个完整的故事。可能他的手法很幼稚，也许他的故事很天真，但他是想讲清这个故事的。放在《上海堡垒》这，莫名其妙就开始了，匆匆忙忙就结束了。该撑时间的地方一秒带过，该带过的地方猛拖时间。<br>不要说《上海堡垒》代表着中国科幻元年的结束。这玩意不叫科幻，它都不配叫电影。</p><p>「人类电影精华欣赏」是我们寝室的一项传统活动。四个人都有空的时候，我们会一起找部豆瓣评分低于 3.0 的电影。把寝室的灯关上，坐下来吃吃东西，吐槽两句。上一期活动我们欣赏了毕导的旷世之作《逐梦演艺圈》。从这一期开始，我们还顺便把我们的吐槽录下来，并整理成文字。<br>很多时候我觉得，我们这个活动欣赏的不是电影，而是现代艺术。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 影评 </tag>
            
            <tag> 人类电影精华 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TouchBar 替代指南</title>
      <link href="/2019/09/04/efficiency/TouchBar%20%E6%9B%BF%E4%BB%A3%E6%8C%87%E5%8D%97/"/>
      <url>/2019/09/04/efficiency/TouchBar%20%E6%9B%BF%E4%BB%A3%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<p>虽然一直嫌弃 TouchBar 没用，但当我真的失去它的时候，我依然经历了相当一段时间的 cognitive malaise。<br>谁有会想到它有一天突然失灵了呢？整个右侧八分之七的区域全部没反应了，只剩下最左边的两个键可以用。想来想去，终究是回忆起来了：那天去工训做东西的时候拿出来调试过代码，不小心螺丝刀砸在上面过一次。明明表面看来没有问题，结果居然电路坏了。<br>令我头疼的事情，主要其实也就两样。因为我是坚定的快捷键使用者，TouchBar 对我来说意义只有：音量调节和亮度调节。这两件事情，在 macOS 上都没有对应的快捷键。从操作的逻辑来说，其实倒确实是 TouchBar 最适合完成「调节某个量」这个操作。手指放上去，滑动一下一次到位，不必像硬件按钮那样反复去按一个键来调节。<br>想要彻底模拟出 TouchBar 的手感是不可能的。作为代替，我找了两个方案：</p><h2 id="方案一：LaunchBar-直接设定音量和亮度"><a href="#方案一：LaunchBar-直接设定音量和亮度" class="headerlink" title="方案一：LaunchBar 直接设定音量和亮度"></a>方案一：LaunchBar 直接设定音量和亮度</h2><p>LaunchBar 自带音量调节的动作，可以快速把系统音量设置为 25%/50%/75%/100%。我在网上又找到一段 AppleScript，可以快速设置系统亮度。仿照前者做四个动作，分别设置亮度为 25%/50%/75%/100%，就可以用 LaunchBar 代替 TouchBar了——好巧不巧，两个都是「Bar」。<br>这个方案我用了约莫有一周，然后我就找到了更好的办法：</p><h2 id="方案二：用-Better-Touch-Tool-调整音量和亮度"><a href="#方案二：用-Better-Touch-Tool-调整音量和亮度" class="headerlink" title="方案二：用 Better Touch Tool 调整音量和亮度"></a>方案二：用 Better Touch Tool 调整音量和亮度</h2><p>Better Touch Tool 是公认最好的 TouchBar 优化工具之一。说起来很奇怪，在我的 TouchBar 仍然在世的时候，我从没好好用过 BTT；它一凉，BTT 反而派上用处了。但是 BTT 不仅可以调整 TouchBar，它还支持将触控板上的滑动动作映射为其它操作，并且可以附加修饰键防止误触——确实是我能找到的最好选择了。<br>这次我的方案是：把「三指上/下滑」+修饰键映射为音量/亮度的上升/下降。这是用 BTT 很容易实现的，也是最自然的。</p><h2 id="修理-TouchBar"><a href="#修理-TouchBar" class="headerlink" title="修理 TouchBar"></a>修理 TouchBar</h2><p>替代方案用归用，修总还是要修的，所以我还是预约了天才吧。他们并没有当场帮我修，不过我最后得到了一些重要的信息。<br>众所周知 TouchBar 其实是一小块触摸屏。但我不知道的是，这玩意是和键盘完全一体的，要换就要连带键盘一起换。但这样其实是有好处的，因为和它连在一起的不是普通的键盘……而是苹果的蝶式键盘。以我的 2018 款 15’ MBP  为例，它使用的三代蝶式键盘是有 4 年保修的。所以，只要这四年内出现连击、失灵等状况，你就可以去免费换一块键盘。这样，TouchBar 就顺便被换掉了。</p><p>所以结论是：<strong>如果你的 TouchBar 坏了，那你应该做的事情是赶快把键盘也用坏</strong>。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 效率 </tag>
            
            <tag> 指南 </tag>
            
            <tag> macOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用 Launch Bar 打开 Clion</title>
      <link href="/2019/08/03/efficiency/%E7%94%A8%20Launch%20Bar%20%E6%89%93%E5%BC%80%20Clion/"/>
      <url>/2019/08/03/efficiency/%E7%94%A8%20Launch%20Bar%20%E6%89%93%E5%BC%80%20Clion/</url>
      
        <content type="html"><![CDATA[<p>我一直用 XCode 调试 C++ 代码，直到前几天要写一个小组作业，XCode 开始和其他人用的 Clion 不甚兼容了。为了省事，我就临时改用了 Clion。<br>我用的是学校提供的 JetBrains 全家桶，然后遇到了一个问题：在 Launch Bar 里搜不到 Clion。<br>我研究了一下，造成这种情况的原因是： JetBrains 全家桶的应用虽然会显示在启动台里，但其实际路径不在<code>/Applications</code>目录下，所以没有被 LaunchBar 收录进 Index。解决办法是：在 LaunchBar 里把 Clion 添加到 Index。首先调出 LaunchBar，按 <code>⌘cmd-⌥option-I</code> 进入 Index 管理界面，然后找到 <code>Applications</code> 一项，并打开它的 <code>Options</code>：<br><img src="/2019/08/03/efficiency/%E7%94%A8%20Launch%20Bar%20%E6%89%93%E5%BC%80%20Clion/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202019-08-01%20%E4%B8%8B%E5%8D%885.29.52.png" alt><br>点击左下角的加号，找到 JetBrains 全家桶所在的文件夹，然后添加即可。<br><img src="/2019/08/03/efficiency/%E7%94%A8%20Launch%20Bar%20%E6%89%93%E5%BC%80%20Clion/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202019-08-01%20%E4%B8%8B%E5%8D%885.32.43.png" alt><br>一个快速锁定该文件夹位置的办法：在访达里搜索「Clion」找到其应用本体，然后拖动到文件选取器里，就会自动跳转到它所在的目录。<br>现在，在 LaunchBar 里调用 Clion 能正确打开了：<br><img src="/2019/08/03/efficiency/%E7%94%A8%20Launch%20Bar%20%E6%89%93%E5%BC%80%20Clion/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202019-08-01%20%E4%B8%8B%E5%8D%885.33.56.png" alt></p>]]></content>
      
      
      
        <tags>
            
            <tag> LaunchBar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LaTeX Toolbox 2.0</title>
      <link href="/2019/07/11/efficiency/LaTeX%20Toolbox%202.0/"/>
      <url>/2019/07/11/efficiency/LaTeX%20Toolbox%202.0/</url>
      
        <content type="html"><![CDATA[<p>这几个学期我都有实验课，几乎每周都要用用 LaTeX 码一篇报告。LaTeX 继承了纯文本的一切优点，排版层次分明，并且不会有各种富文本才会发生的诡异错误。<br>但 LaTeX 的问题在于，要重复使用一种格式时，反复输入命令真的很麻烦——我可能只是想加粗一个词，但要打上 <code>\textbf{}</code> 这样一串冗长的命令，一篇报告重复十几次。<br>春季的时候我为了方便，随手制作了一个 LaTeX Toolbox。那时候常用的命令比较少，所以就比较随心所欲地指定了一些快捷键来直接粘贴命令。最近又开始码报告，所以我对这个工具箱进行了一些小修改，把一些快捷键触发的命令改成了短语扩展，这样书写时更为自然，不必很别扭地去够快捷键。<br>这个工具箱是开箱即用的，你可以在我的 GitHub 下载：<br><a href="https://github.com/Enoch2090/Phillip-s-Gadgets/blob/master/Keyboard%20Maestro/Toolboxes/LaTeX%20工具箱.kmmacros" target="_blank" rel="noopener">下载 LaTeX 工具箱</a><br>另外需要注意的是，这个工具箱是针对 Sublime Text 定做的。它在很多别的编辑器里也能使用，但少部分命令可能会出现小错误，请自行调整动作里的输出格式。我为了防止误触发，设置仅当窗口标题包含 ‘.tex’ 字样时才生效，但有些编辑器并不在窗口标题里显示文件名。这一点也可能需要作修改。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 效率 </tag>
            
            <tag> LaTeX </tag>
            
            <tag> KeyboardMaestro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用 Apple Script 自动整理桌面</title>
      <link href="/2019/06/06/efficiency/%E7%94%A8%20Apple%20Script%20%E8%87%AA%E5%8A%A8%E6%95%B4%E7%90%86%E6%A1%8C%E9%9D%A2/"/>
      <url>/2019/06/06/efficiency/%E7%94%A8%20Apple%20Script%20%E8%87%AA%E5%8A%A8%E6%95%B4%E7%90%86%E6%A1%8C%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<p>我在寝室里放了一台 27 寸的外接显示器。回到寝室的时候，我会把我的 Macbook 接在上面，把外接显示器作为第一屏幕使用。<br>这带来一个问题：由于是作为第一屏幕，桌面会跟随到那个显示器上去。但由于 Macbook 显示器和外接显示器分辨率不同，<strong>桌面的图标在这个过程中会被打乱，变成相互重叠的。</strong><br>对于这个问题，最简单的解决方法就是每次切换显示器以后，在桌面选择<code>右键-整理</code>。<br>一个更方便的办法是：用 Apple Script 触发桌面整理。方法很简单：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tell application &quot;Finder&quot;</span><br><span class="line">tell window of desktop</span><br><span class="line">clean up</span><br><span class="line">end tell</span><br><span class="line">end tell</span><br></pre></td></tr></table></figure><br>把这段代码加入 LaunchBar，就可以只用键盘触发操作：<br><a href="https://github.com/Enoch2090/Phillip-s-Gadgets/blob/master/LaunchBar/Clean%20up%20desktop.lbaction" target="_blank" rel="noopener">LaunchBar 版本整理桌面</a><br>但用键盘触发终究是手动触发。所以我又用 Keyboard Maestro 做了一个自动版本的：<br><a href="https://github.com/Enoch2090/Phillip-s-Gadgets/blob/master/Keyboard%20Maestro/System/Clean%20up%20desktop.kmmacros" target="_blank" rel="noopener">KM 版本自动整理桌面</a><br>这个动作的实现比较取巧，因为KM 没有外接显示器相关的触发条件。我用的方案是选择「The audio output device changes」这个触发条件，因为我的显示器同时还接着音响。连接显示器的时候，Macbook 就会把音频输出切到音响，这也就意味着对我来说「音频输出切换」这个条件可以表示显示切换。</p><p><strong>更新：</strong>用了两天，发现音频输出作为触发条件不稳定，所以换成了寝室和教学楼的 WiFi 触发。</p>]]></content>
      
      
      
        <tags>
            
            <tag> KeyboardMaestro </tag>
            
            <tag> macOS </tag>
            
            <tag> 自动化 </tag>
            
            <tag> LaunchBar </tag>
            
            <tag> AppleScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>统计 Drafts 里的草稿数据</title>
      <link href="/2019/05/03/efficiency/Drafts%20%E7%BB%9F%E8%AE%A1%E5%99%A8/"/>
      <url>/2019/05/03/efficiency/Drafts%20%E7%BB%9F%E8%AE%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p><img src="/2019/05/03/efficiency/Drafts%20%E7%BB%9F%E8%AE%A1%E5%99%A8/DraftsData_banner.JPG" alt="DraftsData_banner"><br>许多写作工具都会内置文本统计，在写作的时候实时展示当前的数据：有多少个字符，文章的阅读时间是多久……在此之外，有些工具还会附带一个更加全面的数据统计界面,例如 Ulysses 可以查看某一个文档组的总字数等数据。<br>但是在 Drafts 上，这样的全局统计功能始终是缺失的。Drafts 仅自带了一个当前草稿的字数统计，这个字数统计还是针对英文设计的，面对中文内容可以说近乎瘫痪。<br>所以，我自己做了一个 Drafts 的统计器。</p><h2 id="安装与使用"><a href="#安装与使用" class="headerlink" title="安装与使用"></a>安装与使用</h2><p><a href="https://github.com/Enoch2090/Phillip-s-Gadgets/blob/master/Drafts/%E5%8A%A8%E4%BD%9C/Drafts%20%E7%BB%9F%E8%AE%A1.draftsAction" target="_blank" rel="noopener">下载 Drafts 统计器</a><br>这个统计器的安装很简单。你只需下载动作文件并用 Sharesheet导入到 Drafts，就会自动完成安装。动作本身也是开箱即用，几乎不需要额外的设置就能直接使用。<br>不过，在运行这个动作之前，你必须确保 Drafts 在 iCloud 里存有草稿的近期备份：</p><ul><li>如果你平时就开着Drafts 的「自动备份」，那就没有任何问题了。不过我还是推荐将备份周期设为一周一次。</li><li>如果并没有开启「自动备份」功能，你需要在运行动作前在设置里手动对草稿进行一次备份，具体原因稍后会解释。并且，我推荐将「自动备份」这一功能保持开启，方便将来查看草稿统计。<br>至此准备工作已经完成。这时你只需点击安装好的动作运行即可。这个动作有两大功能：</li></ul><ol><li>对着空草稿运行，会弹出一个页面，展示你所有草稿的统计数据。展示的数据包括但不限于：<ul><li>写下的总字数。</li><li>草稿的分布。</li><li>使用的标签。</li><li>……</li></ul></li><li>对着有内容的草稿运行，会弹出一个对话框，展示这条草稿的字数统计。你可以直接关闭这个对话框，也可以点击「查看 Drafts 统计数据」进一步查看所有草稿的统计数据。</li></ol><p>这个动作的可扩展性非常强，我之后还会继续更新。你也可以根据自己的需要调整具体统计的项目。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Drafts </tag>
            
            <tag> 效率 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>致这个失败的春天</title>
      <link href="/2019/04/20/ideas/%E8%87%B4%E8%BF%99%E4%B8%AA%E5%A4%B1%E8%B4%A5%E7%9A%84%E6%98%A5%E5%A4%A9/"/>
      <url>/2019/04/20/ideas/%E8%87%B4%E8%BF%99%E4%B8%AA%E5%A4%B1%E8%B4%A5%E7%9A%84%E6%98%A5%E5%A4%A9/</url>
      
        <content type="html"><![CDATA[<p>三月份和四月份一下子成了失败的代名词。<br>三月份参加 OM 结构赛，因为经验不足导致崩盘。经验不足，那是水平的问题，也就算了。但随后的四月，我和同学几乎天天肝到四点准备一场机械赛，结果止步三十二强。<br>机械赛这件事情，整个失败看上去是如此莫名其妙：在赛前，我们觉得自己的水平最起码也是进四强。这个比赛，概括来说就是造一个机械，在限时内在沙地里移动并挖取物块，并将挖取的物块转移到得分区，根据物块类型和数量计算总分。<br>从实力上来说，我觉得我们队是真的很强的。队里有两个常年做机器人的大佬，Solidworks 用得得心应手；有好几个擅长码代码的，可以一起调试电控；也有强于修改硬件部分、根据情况实地调整的，总而言之我们并没有碰上过大的技术难题。<br>另外我们的整个流程，我觉得也足够符合工程规范：</p><ul><li>在正式动工之前，我们先用木板和零件加工了一台 minimum function 的样机，用它来测算尺寸和测试设计（之所以不用 Solidworks 做这个是因为很多我们用的零件没有现成的模型）。等这些都完成了，我们才开始做正式版。</li><li>在正式版上，关键的挖掘部件我们改动了很多版本，每一次都尽力让外形设计贴合场地实况。</li><li>对比很多组混乱的电控系统，我们在电控完工之后的第一件事就是集成和理线。事实证明，很多被淘汰的组别都是因为电控太混乱，上场以后就失控了；拿下来检查才发现是某处的线掉了。</li><li>整台机械在初赛、复赛和决赛的赛程中可能会有变动，我们因此尽量把电控做得模块化，给后面的调整留好所有接口。这使得我们在复赛前的调整非常轻松。</li><li>在遥控的设计上，我尽力把操作做得人性化。大部分控制键用的是简单且易于理解的设计语言；少部分重要但不能随意用的功能，用复杂的组合键防止误操作；部分耗费操作员精力的动作直接自动化，并且仍然力求在舒适的操作手感和精细的控制能力之间寻求平衡。</li></ul><p>最后的结果是，我们的机械本身运行很稳定，遥控和电控也没有发生故障。<br>但我们还是输了。<br>赛后我们想了很久，其实我们这次<strong>做得很 engineering，输得也很 engineering。</strong>比赛前我室友开玩笑般立下 flag：</p><blockquote><p>我觉得我们很稳，除非……你知道，最坚固的城墙，永远是从内部倒塌的。</p></blockquote><p>他这句话已经成功预言（导致？）了我们 OM 的失败，我怎么也没想到，又预言了机械赛的崩盘。当他这么说的时候，他是想叫我多注意电控的稳定，不要发生上场以后控制出问题的情况。我们当然都这么觉得，所以在电控上花了大工夫。然而真正导致崩盘的却是一个很小的问题：我们的机械底盘不够高。于是它在操作时，有两次满载物块地卡在了我方场地里的一个可互动的道具上。根据规则，我们只能把装载的物块全部倒掉，然后请场务帮忙移动机械本身。于是我们挖了三倍于对方的分数 ，却只有三分之一进了我们的得分区。这么说来，打败我们的，还真是我们自己。<br>从 engineering 的角度来说，这大约可以叫系统性错误。整个系统，作为系统是完好的，怎么测都不会有故障；但在与外界互动时，系统却遇到了设计时未曾考虑的问题。我们在实地测试的时候，考虑了各种机动性问题，包括陷在沙子里出不来的情况。正是因为我们改造时考虑过这类情况，所以才会觉得底盘已经足够高了，完全不会受干扰。结果最后引起故障的因素是我们在测试时完全没考虑过的己方道具，这个道具是一个「地雷」，对方的机械碰到是会罚时的。但因为我方可以随意触碰它，我们完全忽略了这玩意对操作带来的影响。<br>总结这堆乱七八糟的失败，从某种程度上是一种自我安慰：虽然我们输得非常不甘，但失败总算教会了我们一点东西。这种自我安慰究竟有几分是有意义的仍待商榷，不过这句话我算是不可能忘记了：</p><blockquote><p>最坚固的城墙，永远是从内部倒塌的。</p></blockquote><p>致这个失败的春天。还有，我恨石楠。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>草稿处理的无缝衔接：Drafts 终于登上 macOS</title>
      <link href="/2019/03/27/apps/%E8%8D%89%E7%A8%BF%E5%A4%84%E7%90%86%E7%9A%84%E6%97%A0%E7%BC%9D%E8%A1%94%E6%8E%A5%EF%BC%9ADrafts%20%E7%BB%88%E4%BA%8E%E7%99%BB%E4%B8%8A%20macOS/"/>
      <url>/2019/03/27/apps/%E8%8D%89%E7%A8%BF%E5%A4%84%E7%90%86%E7%9A%84%E6%97%A0%E7%BC%9D%E8%A1%94%E6%8E%A5%EF%BC%9ADrafts%20%E7%BB%88%E4%BA%8E%E7%99%BB%E4%B8%8A%20macOS/</url>
      
        <content type="html"><![CDATA[<p><img src="/2019/03/27/apps/%E8%8D%89%E7%A8%BF%E5%A4%84%E7%90%86%E7%9A%84%E6%97%A0%E7%BC%9D%E8%A1%94%E6%8E%A5%EF%BC%9ADrafts%20%E7%BB%88%E4%BA%8E%E7%99%BB%E4%B8%8A%20macOS/DFM.png" alt></p><blockquote><p>Drafts 对双平台的支持意味着无限可能。在此前，我们一直认为 Drafts 更多只是一个文字的收集端，你可以随时打开它记点东西，然后一键把记下的东西发送到别的地方。但那以后我们几乎就不会再去管已经存档的文本。DFM 的出现，不仅仅是简单地补全了 Drafts 这个应用在桌面端的表现。</p></blockquote><p>本文是我在 Power+ 2.0 发布的稿件，请<a href="https://sspai.com/post/53761" target="_blank" rel="noopener">点击此处</a>跳转阅读。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Drafts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「执行」的效率</title>
      <link href="/2019/03/05/efficiency/%E3%80%8C%E6%89%A7%E8%A1%8C%E3%80%8D%E7%9A%84%E6%95%88%E7%8E%87/"/>
      <url>/2019/03/05/efficiency/%E3%80%8C%E6%89%A7%E8%A1%8C%E3%80%8D%E7%9A%84%E6%95%88%E7%8E%87/</url>
      
        <content type="html"><![CDATA[<p>今天晚上在骑车回寝室的路上，我在思考一个问题：我现在在用的整个任务管理系统，虽然很好地实现了收集、过滤、搜索等各方面的需求，但有一个问题一直无法解决：<strong>执行</strong>。<br>说起执行问题，最大的毛病还是<strong>拖延</strong>。我看到很多人给出的解决方案是：把任务拆成比较小的子任务，这样可以减少拖延。这个方法确实有时候管用，但是我觉得还是存在问题：假如原始任务真的足够复杂，拖延症甚至足以阻止你把它给拆分开来。要是没有什么来自外部的 Due，它就会静静地在你的任务列表里，一躺就是三个月。<br>我目前还没想到什么特别有效的解决方案。不过今天 Power+ 发了一篇文章恰好是有关「执行」的：<br><a href="https://sspai.com/post/53188" target="_blank" rel="noopener">一个真正有效的「屏幕时间」使用方法</a><br>这篇文章解决问题的思路说来很简单，但是的确是最为有效的。我觉得要想解决任务执行的低效，这是一个很好的参考案例。不过关于这个问题的思考，我想我还得再骑上几十公里的路程了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 效率 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蒙特利尔冬季生存指南</title>
      <link href="/2019/03/03/culture/%E8%92%99%E7%89%B9%E5%88%A9%E5%B0%94%E5%86%AC%E5%AD%A3%E7%94%9F%E5%AD%98%E6%8C%87%E5%8D%97/"/>
      <url>/2019/03/03/culture/%E8%92%99%E7%89%B9%E5%88%A9%E5%B0%94%E5%86%AC%E5%AD%A3%E7%94%9F%E5%AD%98%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<p><img src="/2019/03/03/culture/%E8%92%99%E7%89%B9%E5%88%A9%E5%B0%94%E5%86%AC%E5%AD%A3%E7%94%9F%E5%AD%98%E6%8C%87%E5%8D%97/%E5%9B%BE%E5%83%8F%2015.JPG" alt><br>我今年整个一月是在蒙特利尔度过的。<br>这是由于学院有一个冬季游学项目，可以报名去世界各地的学校参加冬季的短期项目。我发现麦吉尔大学有个课程还挺有意思的，于是就跑到蒙特利尔去了。我私以为，每到一座新的城市，最大的乐趣便是在它的街头巷尾穿行，寻找隐藏在城市表象之下的精神内涵。不过在那之前……你得确保生存问题。<br>下面你将阅读的，就是我这一个月来在蒙特利尔的一点儿生活经验，以及满嘴跑马，美其名曰——指南。</p><h2 id="一-并不会冷死"><a href="#一-并不会冷死" class="headerlink" title="一 | 并不会冷死"></a>一 | 并不会冷死</h2><p>无法否认的是，蒙特利尔的冬天很冷。不过这种冷并不是令人绝望的那种冷，只要你穿得够厚实，还是抵挡得住的。<br><img src="/2019/03/03/culture/%E8%92%99%E7%89%B9%E5%88%A9%E5%B0%94%E5%86%AC%E5%AD%A3%E7%94%9F%E5%AD%98%E6%8C%87%E5%8D%97/IMG_0967.jpg" alt="但是脸很疼"><br>在我停留的一月份，蒙特利尔的气温通常在零下二十度至零下十度之间徘徊。气温整体上不会超出这个区间，不过也有过一些大波动，这些稍后再提。这样的温度，实际上只要做好以下准备就不会出事：</p><ul><li>一件足够厚实的外套。</li><li>外套下两到三件衣服，最好包含一件毛衣。</li><li>两条或以上的裤子。</li><li>保暖性能较好的鞋子或袜子。</li><li>围巾和帽子。<br>这个列表实际上不是很需要手套，因为把手插在外套口袋里足以抵御寒冷了。蒙特利尔毕竟也不过北纬45°，只要不起风，都还算能承受得住。<br>另外我建议外套下的衣服也不要穿太多。一件短袖一件毛衣足矣，顶多再加一件衬衫。当地室内空调常常都是开到二十几度，太多衣服在室内会很难受。<h2 id="二-拯救你的锂电池"><a href="#二-拯救你的锂电池" class="headerlink" title="二 | 拯救你的锂电池"></a>二 | 拯救你的锂电池</h2>我就这么坚持着「零下十几度也不过如此嘛」的态度，直到我的手机第一次在户外被冻得关机。<br><img src="/2019/03/03/culture/%E8%92%99%E7%89%B9%E5%88%A9%E5%B0%94%E5%86%AC%E5%AD%A3%E7%94%9F%E5%AD%98%E6%8C%87%E5%8D%97/IMG_0804.jpg" alt="低电量警告"><br>其实这件事情我早该想到了，毕竟连高中化学都会教我们：温度下降，绝大部分反应的速率都下降；对电池来说，反应速率下降就意味着输出功率减小。对于锂电池来说，低温还意味着更多的制约条件，比如电解液凝固、锂离子不易扩散等。总之就是：锂电池很怕低温。<br>就我的情况而言，我那台老旧的 iPhone 6S 在蒙特利尔的室外无法撑过十分钟。另外在被这么冻了小半个月之后，它的电池性能也显著下降了。<br>在冬季的蒙特利尔，如果你一定要带手机出门，以下是你能为你的电池做的事情：</li></ul><ul><li>如果你准备戴手套，最好还是留出一只手捂手机。单纯地放在外套口袋里并不能为它保暖。</li><li>可行的话，还是尽量贴身放，并且少拿出来吧。</li><li>如果真的被冻关机了，给电池部位保暖一会儿即可回电。<strong>不要在低温状态下去尝试充电</strong>，可能会对电池造成不可逆的损伤。<br>别小看这个「不可逆的损伤」。等我回国的时候，我的手机电池状况已经差到无法正常使用了，放在那摆两个小时就会自己没电。<h2 id="三-公共交通指北"><a href="#三-公共交通指北" class="headerlink" title="三 | 公共交通指北"></a>三 | 公共交通指北</h2>蒙特利尔的公共交通本身相当发达，公交与地铁可算是遍布全市了。夏季的时候，甚至还有城市单车可供骑行。不过在冬天，<img src="/2019/03/03/culture/%E8%92%99%E7%89%B9%E5%88%A9%E5%B0%94%E5%86%AC%E5%AD%A3%E7%94%9F%E5%AD%98%E6%8C%87%E5%8D%97/montreal-metro.jpg" alt="montreal-metro">公共交通只能选择 STM 运营的公交与地铁线路。</li></ul><p>蒙特利尔的地铁票大约为 3.25 刀，如果停留时间较长，理想的选择是购买三日票或是周票。你可以在 <a href="http://www.stm.info/sites/default/files/pdf/en/tarifs.pdf" target="_blank" rel="noopener">这个链接</a> 找到车票定价的详情。在市中心时，绿线与橙线是最常见的选择。这两条地铁线路高度平行，不少站点之间还有地下通道相互连接。有一件事是坐地铁需要特别注意的：蒙特利尔的地铁里几乎全是法语，可能需要准备好谷歌翻译。<br>蒙特利尔的公交车价格与地铁是一样的，可以说是有点小贵。另外你也可以尝试使用 Uber，起步费大约八到九刀；高峰时期可能会翻倍，如果能凑到几个人一起分摊就比较合算了。</p><h2 id="四-如何做一顿饭"><a href="#四-如何做一顿饭" class="headerlink" title="四 | 如何做一顿饭"></a>四 | 如何做一顿饭</h2><p>蒙特利尔的总体物价水平在加拿大算是中等，但吃饭的消费却不低。一顿正常的简餐，价格大约在 10 至 20 刀；稍微好一些的牛排或是料理，就要 30 刀起步了。天天出门吃，钱包可经受不起。对比之下自己做饭就相对便宜一些，10 刀以内就足够吃饱。<br>上课期间，我们住的是类似于酒店式公寓的学生宿舍，几个寝室共用一间厨房的那种。厨房里提供电磁炉、烤箱和微波炉……还有永远用不完的吸油纸。所以我们经常几个人凑在一块，自己做饭吃。做饭的第一步是厨具。大部分厨房用品在超市里都能买到。如果要居住较长时间，建议安顿好以后就去超市晃一圈。<br>在 Dollarama，你可以找到大部分需要的厨房用品。这家超市出售的大多是廉价商品，但是质量完全够用上个一年半载。在这里你可以买到绝大部分杯子、碗、餐具等。<br>去完  Dollarama 可以再去 Provigo 晃上一圈，这家超市卖的东西价格更高，质量也更好。我去的时候刚好赶上平底锅三件套促销出售，只要 12 刀就能买到。不过除此之外，在这里更多是直接买各种食材。结账时，可以问柜员要一张 Optimum 的卡，注册是免费的。有了这张卡，你在购买每周指定的商品时可以获得一些积分，并能兑换成现金抵扣。与 Provigo 同等价位的选择还有 IGO，它与前者在货源和规模上都差不多。<br>此外在唐人街还有一家「家乐福」。这里打引号是因为，这个「家乐福」不是 Carrifour，而是一家私营的超市，英（法）文名叫 G&amp;D Supermarché。这家店有很多中式的商品出售，你可以买到李锦记的酱油、康乐醋、以及各种各样国内能见到的零食。<br><img src="/2019/03/03/culture/%E8%92%99%E7%89%B9%E5%88%A9%E5%B0%94%E5%86%AC%E5%AD%A3%E7%94%9F%E5%AD%98%E6%8C%87%E5%8D%97/15504186798329.jpg" alt="家 乐 福"><br>至此工具食材完备，我想你应该是可以顺利开工了。最后给一个建议：<strong>如果可以的话，带个锅铲过去。</strong>当地超市里基本只看得到塑料锅铲，那玩意煎个蛋焦得比蛋还快。金属锅铲也不是找不到，但基本上都不便宜，不太找得到十刀以下的。</p><h2 id="五-升温了，别出门。"><a href="#五-升温了，别出门。" class="headerlink" title="五 | 升温了，别出门。"></a>五 | 升温了，别出门。</h2><p>一月底的时候，蒙特利尔突然有好几天温度上升。最热的时候，这座在零下二十度严寒中颤抖的城市忽而升到了零上三度。这个零上三度可不是上海湿冷的零上三度，它热到你可以直接一件薄外套出门。<br>这照理说是好事，这样我们是不是就可以多到户外玩玩了？想得美，你可是在蒙特利尔。<br>问题在于，但凡是升温，多半是要下雪；大晴天往往是零下二十度。这是常识解释得通的。但糟糕的是，蒙特利尔的路面上总是有大量积雪，还撒了不少碎石和融雪剂。这一升温，融雪夹杂着各路乱七八糟的东西，一下子成了冰冷的泥浆，一脚下去能把鞋给埋了。<br>另一个棘手的问题是，温度一上去，下的雪就不再是雪了，而是冻雨。这雨水在高空中是液态的，但温度接近零度，一落地就会变成冰。于是路上一层积雪一层冰，过上几天再来一场雪，这成了三明治了。一脚下去，先是踏穿表面的雪，随后中间的冰裂开把你的脚卡住，最后你还会陷进底下的雪里。<br>好吧，反正我的建议是：要是大幅升温了，还是别出门了吧。或者你可以试试地下城——</p><h2 id="六-在地下城穿行"><a href="#六-在地下城穿行" class="headerlink" title="六 | 在地下城穿行"></a>六 | 在地下城穿行</h2><p>地下城在加拿大并不少见，不过蒙特利尔的地下城却是前所未有的大：市中心的地下，几乎完全就是空的。事实上，蒙特利尔拥有全世界最大规模的地下城，地下通道总长数十千米，连接了上千家商铺。<br>有这么一个地下城就意味着，如果你在市中心附近，你完全可以仅通过地下城在两地之间来往。冬季的蒙特利尔路面时常有积雪，选择走地下城意味着你的路途会轻松许多。举例来说，从我们居住的 evo 到麦吉尔大学所在的 Sherbrook St.，在地面上穿过整个 Downtown 即可直达，耗时大约 15 分钟。如果选择走地下城，最快捷的方案是先在地面过马路到斜对角的 Place Bonaventure，接下来的路程即可全程在室内行走了，但这样的耗时大约在 20 至 25 分钟。<br>在地下城行走的一大乐趣在于：地下城连通了大量商场的地下层，通道两边往往开着琳琅各色的商铺。在上学路上，有一家贺卡店就相当有意思，它提供全套的贺卡定制服务。另外我还找到一家桌游和玩具店，位于Centre Eaton Montréal 地下，里面有整整一面墙的各式卡牌桌游，还有一大柜子的 D&amp;D 主持手册……<br><img src="/2019/03/03/culture/%E8%92%99%E7%89%B9%E5%88%A9%E5%B0%94%E5%86%AC%E5%AD%A3%E7%94%9F%E5%AD%98%E6%8C%87%E5%8D%97/IMG_1213-7763827.JPG" alt><br>让我们姑且跳出商圈这些俗气的东西。蒙特利尔的地下城最为独特的一点是，它完美地将一座城市所具有的现代性和时代的厚重感相融合。通常我们不会对北美大陆所谓的历史大谈特谈，但百年的时间其实也不算短，更何况蒙特利尔是北美大陆上历史相对悠久的城市。地下城的修建前后经历一个世纪，因此你在地下也能发现不少富有时代气息的东西。某条隧道的光鲜装饰墙面之下，斑驳的墙体显然是修建于上个世纪；一处连接地面与地下的楼梯，老旧的表面展示着时间的磨痕……这种场景是极为常见的。<br>我在地下城四处游荡。<br>在 Square Victoria 附近的某条地下通道里，我找到了这个地方：这里的地下通道穿过了一面巨大的花岗岩墙体。这块花岗岩墙体曾经是某个银行地下金库的一部分，如今它却融入了这条地下通道的整体。纤弱的玻璃与瓷砖穿透坚实而厚重的墙面，在这地下深处营造出一种荒谬的不真实感。在这个地下的空间里，墙体本身就构成了一个相当具有时代感的场景，而玻璃走道为它插入了现代气息。事实上，这个空间是一件艺术品，在不远处的墙上还印有魁北克省政府配的解说。<br><img src="/2019/03/03/culture/%E8%92%99%E7%89%B9%E5%88%A9%E5%B0%94%E5%86%AC%E5%AD%A3%E7%94%9F%E5%AD%98%E6%8C%87%E5%8D%97/IMG_0885.JPG" alt><br>这面墙外露的部分已经被磨平，上面仍有着钻孔的痕迹，墙体里的钢筋截面也仍然清晰可见。这些钢筋早已与石头融为了一体，在百年的时间里它们互相渗透，互相侵蚀，边缘早已不可辨认。<br><img src="/2019/03/03/culture/%E8%92%99%E7%89%B9%E5%88%A9%E5%B0%94%E5%86%AC%E5%AD%A3%E7%94%9F%E5%AD%98%E6%8C%87%E5%8D%97/IMG_0889.JPG" alt><br>在空间上，玻璃走廊与花岗岩墙体都是开放的，在这里唯一「关闭」的东西是金库原来的大门——这扇半开半掩的金属防盗门与观众之间被一道玻璃隔开。纵使如此，门本身依然在空间上截断出一个小隔间，并且遮蔽了这一空间的大多数细节。此处的地下空间本身是明亮且宽敞的，而这通向未知黑暗处的门成功撕扯开了这一处空间的一体性。<br><img src="/2019/03/03/culture/%E8%92%99%E7%89%B9%E5%88%A9%E5%B0%94%E5%86%AC%E5%AD%A3%E7%94%9F%E5%AD%98%E6%8C%87%E5%8D%97/IMG_0887.jpg" alt><br>如果你有兴趣，请务必在地下多转转。鲜有哪座地下城，能带给你这种交织的独特体验。</p><h2 id="尾声-城市印象"><a href="#尾声-城市印象" class="headerlink" title="尾声 | 城市印象"></a>尾声 | 城市印象</h2><p>就如同我开头所说的，我在乎的是城市表象下的东西。称之为城市的内核或许有些过头，作为一个仅停留了一个月的过客，我觉得我的观点很容易受活动范围和经历限制而有偏差。曾经看到网上的说法，说蒙特利尔人有一种法国人的高傲和冷漠，我总觉得这种说法太过武断。一座城市的组成实在太过于复杂，我们很难从一些小事去给它定性。以我的经历来说，我和朋友在零下二十度的路上吃冰棍，被路人调侃，于是我们送了他一根冰棍，还聊了会天。更有一次我在路上对着谷歌地图确认路线，被路人主动询问是否需要帮忙。这些小事其实同样无法论证蒙特利尔人是否都非常友好，我甚至都不知道那是不是本地人。<br>所以在我的资历所允许的范围内，我只能说，蒙特利尔给我什么样的印象。我觉得这是一座注重艺术与文化的城市，同时有着北美大陆的粗放与欧洲的细腻。这些印象的具体细节，就留到以后再讲吧。<br>祝你在冬季的蒙特利尔顺利生存下去。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 指南 </tag>
            
            <tag> 旅行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用 Taskpaper 来背单词</title>
      <link href="/2019/02/27/efficiency/%E7%94%A8%20Taskpaper%20%E6%9D%A5%E8%83%8C%E5%8D%95%E8%AF%8D/"/>
      <url>/2019/02/27/efficiency/%E7%94%A8%20Taskpaper%20%E6%9D%A5%E8%83%8C%E5%8D%95%E8%AF%8D/</url>
      
        <content type="html"><![CDATA[<p>前些时候我把自己的任务管理系统从 Todoist 迁移到了 Taskpaper。<br>这么做有许多原因，其中有一个原因是：Taskpaper 用的是纯文本，更加朴素简洁。<br>说起纯文本，我一直在使用的 Drafts，本质上也用的是纯文本。在担任任务管理系统这件事以外，使用 Taskpaper 的实质是把一部分本来用 Drafts 做的事情给继承了过来。有时候，我会在看到某个生词的时候把它随手记在 Drafts 里，翻草稿的时候看到就顺便背一背。因此我想到了这个问题：能不能用 Taskpaper 来背单词呢？<br>答案显然是可以的。</p><h2 id="为什么可以这样做？"><a href="#为什么可以这样做？" class="headerlink" title="为什么可以这样做？"></a>为什么可以这样做？</h2><p>很多时候，背单词这件事情，靠的就是反复。如果想快速记住大量单词，自然有很多高阶的技巧；但是靠堆熟练度来帮助掌握，一定是永远有效且最靠谱的方案。<br>而 Taskpaper 就可以帮助我去反复熟悉单词。我对于 Taskpaper 平常的使用，是借鉴了 @Minja 的思路：把每日任务的窗口始终放置在屏幕左上角，这样每次回到桌面都能看到。此外我还用 Keyboard Maestro 给 Taskpaper 设置了一组快捷键 <code>⌘cmd + ⌥option + ⌃ctrl + ⌂shift + T</code>，每次要做一件事情前，先调 Taskpaper 的窗口出来确认一下还有哪些事情要做。<br>所以我每天是要看很多次 Taskpaper 的，这就提供了一个反复熟悉的机会。如果把要背的单词放在这个地方，每次打开 Taskpaper 的时候在心里默念一番，一天下来就差不多记住了。</p><h2 id="具体怎么操作？"><a href="#具体怎么操作？" class="headerlink" title="具体怎么操作？"></a>具体怎么操作？</h2><p>首先，你的 Taskpaper 窗口必须始终放在桌面左上角。为了便于时常调出 Taskpaper，我还做了一个 Keyboard Maestro 动作来快速调出 Taskpaper，你可以在<a href="https://github.com/Enoch2090/Phillip-s-Gadgets/blob/master/Keyboard%20Maestro/Launcher/Taskpaper.kmmacros" target="_blank" rel="noopener">这里下载</a>。这个动作本身很简单，但它的触发方式用上了 Mac 的四个修饰键，你或许需要参考《<a href="https://sspai.com/post/46184" target="_blank" rel="noopener">macOS 改键利器：Karabiner-Elements 使用详解</a>》这篇文章来了解怎么定制一颗 <code>Hyper</code> 键来一次按下这四个键。当然，你也可以自行修改这个动作里的快捷键。<br>至此你应该就能很方便地调出 Taskpaper 来参考了。这时你需要做的就是找几个单词，连带中文含义、词性等必备信息一起丢进 Taskpaper。放进 Taskpaper 时需要注意的是：</p><ul><li><strong>把每一个单词单独作为一条任务。</strong>如此一来，背出来了就可以当作任务完成，直接把这个词勾掉就好。</li><li><strong>一屏内不要放太多单词。</strong>我们现在是通过每次看任务的时候扫上一眼在背单词，属于无心插柳。这种方法不比正儿八经集中精神地背，所以一眼能看到的单词不宜过多，三个以内最佳。</li><li><strong>要有同普通任务区分的标记。</strong>这些单词毕竟不是任务，我建议给它们打上「@word」的标签，以便于同普通任务区分。这样一来执行各类搜索等操作的时候，也方便把它们排除出去。具体的排除语法是：<code>not @word</code>。只要在搜索栏键入这行语句，就可以把所有的单词都过滤掉了。</li></ul><h2 id="这一方法有什么限制？"><a href="#这一方法有什么限制？" class="headerlink" title="这一方法有什么限制？"></a>这一方法有什么限制？</h2><p>经过我一段时间的尝试，我觉得这一方法最大的限制在于，它不能大量地记忆词汇；它更适合用来记忆少量比较难记的单词。这个「难记」也不是泛指那种背了很多遍，却仍然可能搞不清楚意思的单词，例如 yield 这种多词义的词。相对地，它更适合用来记忆一些比较长，但是含义简单的单词，例如 procrastination。<br>另外一大限制就是效率不算很高。不过这么背起单词来，本就是锦上添花。如果想正经背单词，还是去用 <a href="https://quizlet.com/zh-cn" target="_blank" rel="noopener">Quizlet</a> 吧。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Taskpaper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Drafts 5.6 更新详解：工作区再次加强，对捷径支持更完善</title>
      <link href="/2019/01/23/apps/Drafts%205.6%20%E6%9B%B4%E6%96%B0%E8%AF%A6%E8%A7%A3%EF%BC%9A%E5%B7%A5%E4%BD%9C%E5%8C%BA%E5%86%8D%E6%AC%A1%E5%8A%A0%E5%BC%BA%EF%BC%8C%E5%AF%B9%E6%8D%B7%E5%BE%84%E6%94%AF%E6%8C%81%E6%9B%B4%E5%AE%8C%E5%96%84/"/>
      <url>/2019/01/23/apps/Drafts%205.6%20%E6%9B%B4%E6%96%B0%E8%AF%A6%E8%A7%A3%EF%BC%9A%E5%B7%A5%E4%BD%9C%E5%8C%BA%E5%86%8D%E6%AC%A1%E5%8A%A0%E5%BC%BA%EF%BC%8C%E5%AF%B9%E6%8D%B7%E5%BE%84%E6%94%AF%E6%8C%81%E6%9B%B4%E5%AE%8C%E5%96%84/</url>
      
        <content type="html"><![CDATA[<p><img src="/2019/01/23/apps/Drafts%205.6%20%E6%9B%B4%E6%96%B0%E8%AF%A6%E8%A7%A3%EF%BC%9A%E5%B7%A5%E4%BD%9C%E5%8C%BA%E5%86%8D%E6%AC%A1%E5%8A%A0%E5%BC%BA%EF%BC%8C%E5%AF%B9%E6%8D%B7%E5%BE%84%E6%94%AF%E6%8C%81%E6%9B%B4%E5%AE%8C%E5%96%84/%E5%9B%BE%E5%83%8F%2021.jpg" alt><br>自上一篇 Drafts 更新详解发布以来，已经过去了近四个月。这段时间里，Drafts 的 Mac Beta 版本迭代了数次，基础功能已经可以正常使用了。不过令人惊喜的是，在 Mac 版开发之余，iOS 版本也仍然在保持更新。就在前不久，Drafts 发布了 5.6.0 版本。这个版本再一次加强了工作区的功能，同时也带来了一些其它的新特性。</p><h2 id="工作区可以直接载入动作组和列表了"><a href="#工作区可以直接载入动作组和列表了" class="headerlink" title="工作区可以直接载入动作组和列表了"></a>工作区可以直接载入动作组和列表了</h2><p>很久以前，我在 <a href="https://sspai.com/article/45895?series_id=9" target="_blank" rel="noopener">如何在 Drafts 中打造一个排除干扰且高效的工作环境</a> 一文中介绍过一种同时载入工作区、动作组和键盘扩展条的方法。在不同的情境下，我们常用的动作和按键很有可能是不同的。在写作时我可能会载入一个用于写作的工作区，同时使用一套文字处理的键盘；在平时速记时我可能会用另一个用于任务管理的工作区，同时使用一套快速输入标记符号的键盘。当我们想做一件事情的时候，我们使用的工作区和键盘扩展往往是配套的——因此，找到一种同时载入工作区和键盘扩展的方法是很有必要的。<br>当时我采取的方案是使用 JavaScript 来载入内容。不过 JavaScript 固然强大，但是易用性就大打折扣。如果想要修改载入内容，我们还得对代码进行修改。但现在，我们有了更简便易行的方案。在这次更新中，工作区可以在载入时直接加载指定的动作组和键盘扩展条了。如此一来，我们就只需要对工作区的设置稍作修改即可。<br>修改的方法很简单：点击草稿列表右上角的设置按钮进入工作区列表，在某个工作区上左滑，点击「Edit」进入它的设置界面。在设置列表的最下方，有一个「SELECT」选项，你可以在这里设置载入工作区时的额外加载选项。<br><img src="/2019/01/23/apps/Drafts%205.6%20%E6%9B%B4%E6%96%B0%E8%AF%A6%E8%A7%A3%EF%BC%9A%E5%B7%A5%E4%BD%9C%E5%8C%BA%E5%86%8D%E6%AC%A1%E5%8A%A0%E5%BC%BA%EF%BC%8C%E5%AF%B9%E6%8D%B7%E5%BE%84%E6%94%AF%E6%8C%81%E6%9B%B4%E5%AE%8C%E5%96%84/new-IMG_0974.jpg" alt="设置工作区的加载选项"></p><p>以我自己的设置为例，我有一个工作区是专门用来写东西的：</p><ol><li>第一项是设置载入工作区时默认载入的草稿列表。因为新写的东西一般都会放在收件箱里，所以选择 <code>Inbox</code>。</li><li>第二项是设置载入工作区时默认载入的动作列表。写东西时我不会经常打开动作列表，所以我就没有设置。</li><li>第三项是设置载入工作区时默认载入的键盘扩展。我选择载入一个专门用于文字编辑的动作组作为键盘扩展。<br>设置好这几项后关闭设置界面，下次再打开这个工作区的时候，一切就都会自动载入了。<br>这个更新虽然不是什么翻天覆地的大变化，但确实非常实用。不难看出，Drafts 对 5.0 版本新增的工作区功能相当重视，颇有将它打造成一个特色功能的势头。</li></ol><h2 id="可以用-URL-Scheme-快速添加捷径了"><a href="#可以用-URL-Scheme-快速添加捷径了" class="headerlink" title="可以用 URL Scheme 快速添加捷径了"></a>可以用 URL Scheme 快速添加捷径了</h2><p>我们都知道 Drafts 的动作支持运行捷径。在遇到一些较为复杂的需求时，用易于编写的捷径来解决问题，是非常实用便捷的方案。在过去，如果我们要用 Drafts 运行一条捷径，就需要新建一个动作，手动输入捷径的名字。有的时候我们要运行的捷径仍处在调试阶段，它可能长这样：</p><p><img src="/2019/01/23/apps/Drafts%205.6%20%E6%9B%B4%E6%96%B0%E8%AF%A6%E8%A7%A3%EF%BC%9A%E5%B7%A5%E4%BD%9C%E5%8C%BA%E5%86%8D%E6%AC%A1%E5%8A%A0%E5%BC%BA%EF%BC%8C%E5%AF%B9%E6%8D%B7%E5%BE%84%E6%94%AF%E6%8C%81%E6%9B%B4%E5%AE%8C%E5%96%84/15480438766290.jpg" alt="捷径的名字长且复杂"></p><p>这样的命名确实方便我们进行调试，也方便快速找到某条捷径。但要把这么一长串名字手动输入到 Drafts 里未免有些麻烦。就算复制粘贴，我们也需要操作一番才能复制到捷径的名字。<br>现在这件事情简单多了。Drafts 在这次更新中支持了一条新的 URL Scheme:<br><code>drafts5://create_shortcut_action?name=捷径名字</code><br>运行这条 URL Scheme，Drafts 就会引导我们快速创建一个动作来调用对应的捷径。用 Drafts 调用捷径是常有的事，而有了这一条 URL Scheme，我们就可以用自动化的手段来向 Drafts 添加捷径了。例如，我们可以把这个过程制作成捷径：<br><img src="/2019/01/23/apps/Drafts%205.6%20%E6%9B%B4%E6%96%B0%E8%AF%A6%E8%A7%A3%EF%BC%9A%E5%B7%A5%E4%BD%9C%E5%8C%BA%E5%86%8D%E6%AC%A1%E5%8A%A0%E5%BC%BA%EF%BC%8C%E5%AF%B9%E6%8D%B7%E5%BE%84%E6%94%AF%E6%8C%81%E6%9B%B4%E5%AE%8C%E5%96%84/new-ani.gif" alt="用捷径快速添加捷径"></p><p>这是 Drafts 官方论坛提供的一条捷径，运行后可以从你已有的捷径中选择一条来直接添加到 Drafts。<br>你可以 <a href="https://www.icloud.com/shortcuts/bbcafbdca9324a8d8a8d4306de8121bb" target="_blank" rel="noopener">点击这里</a> 安装这条捷径。 </p><h2 id="一些其他更新"><a href="#一些其他更新" class="headerlink" title="一些其他更新"></a>一些其他更新</h2><p>除了工作区新增了更丰富的自定义能力以外，Drafts 从 5.4 版本到如今，还有不少其它变化：</p><h3 id="草稿列表的-All-标签页回归了"><a href="#草稿列表的-All-标签页回归了" class="headerlink" title="草稿列表的 All 标签页回归了"></a>草稿列表的 <code>All</code> 标签页回归了</h3><p>在 Drafts 4 中，草稿列表除了 <code>Inbox</code>、<code>Flagged</code>、<code>Archive</code>、<code>Trashed</code> 这四个标签页以外，还有一个 <code>All（全部）</code> 标签页。在Drafts 5 的早期版本中，这个标签页不知为何被移除了。<br>在 5.6 版本中，这个标签页又回来了。有了这个标签页，我们就可以同时浏览 <code>Inbox</code> 和 <code>Archive</code> 这两个标签页中的内容了。我觉得一个比较理想的使用场景应该是：我们正好在处理与某个特定主题相关的事情，例如写一份关于 A 产品的报告。这时在 <code>Inbox</code> 里可能有不少关于 A 产品的草稿，同时在 <code>Archive</code> 里又有大量已经存档的资料。这个时候我们只需要在搜索栏中输入 A 产品的名字，然后切换到 <code>All</code> 这个标签页，就能从容浏览所有相关的信息。</p><h3 id="支持更进阶的-Markdown-语法"><a href="#支持更进阶的-Markdown-语法" class="headerlink" title="支持更进阶的 Markdown 语法"></a>支持更进阶的 Markdown 语法</h3><p>在 5.5 版本中，Drafts 更新了对 MultiMarkdown 和 Github Markdown 语法的支持。<br>Drafts 先前仅支持原生的 Markdown 语法，因而能实现的功能极为简陋——甚至于不支持脚注、删除线等语法的高亮。MultiMarkdown 为 Drafts 的标记能力带来了一次飞跃，不仅是脚注等一众语法能够正确地高亮了，我们还获得了一套强大的标注语法：Critic Markup。<br>如果你是 Ulysses 用户，你一定不会对这套语法感到陌生。<a href="http://criticmarkup.com/users-guide.php" target="_blank" rel="noopener">Critic Markup</a> 是一套用于对纯文本进行标注的语法，通过使用各种不同的语法标记，我们可以用纯文本来表示添加、删除、替换等操作。<br><img src="/2019/01/23/apps/Drafts%205.6%20%E6%9B%B4%E6%96%B0%E8%AF%A6%E8%A7%A3%EF%BC%9A%E5%B7%A5%E4%BD%9C%E5%8C%BA%E5%86%8D%E6%AC%A1%E5%8A%A0%E5%BC%BA%EF%BC%8C%E5%AF%B9%E6%8D%B7%E5%BE%84%E6%94%AF%E6%8C%81%E6%9B%B4%E5%AE%8C%E5%96%84/new-IMG_0982.jpg" alt="Drafts 对 CriticMarkup 的高亮支持"></p><p>可以说，CriticMarkup 是再适合 Drafts 不过了。<strong>一方面，Drafts 提供的自动化支持让语法复杂的 CriticMarkup 变得易于输入。</strong>论坛上已经有了不少相关的资源，如果你有兴趣尝试这套标记，<a href="https://actions.getdrafts.com/a/1RL" target="_blank" rel="noopener">这个动作</a>就可以帮助你快速输入标记符号。 <strong>另一方面，Drafts 正需要一些能够加强写作功能的特性，而 CriticMarkup 恰好能提供这一点。</strong>虽然 Drafts 一直以来都被我们称作是速记工具，但它确实也能用来写作。曾经，Drafts 面对的阻碍在于：它虽然在速记方面占尽优势，但谈及长篇写作，却并没有太多值得称赞的亮点。如今有了这套标记语法的加持，再加上各种各样的自动化动作，Drafts 的底气已经相当充足了，我私以为在长篇写作方面完全值得一用。<br>至于 Github Markdown 语法，它更多注重的是与 Github 功能的交互，例如代码高亮、@特定用户等，而这些都是 Drafts 在本地无法渲染的，因此我觉得这暂时不会特别实用。如果你对这种语法感兴趣的话，我这里也有个<a href="https://getdrafts.com/actions/examples/downloads/Post-Gist-to-Github.draftsAction" target="_blank" rel="noopener">小玩具</a>，可以帮你把当前草稿发布到 Github Gist。<br>相关阅读：<br><a href="https://sspai.com/article/51943?series_id=70" target="_blank" rel="noopener">Drafts、TextExpander、Pixelmator Pro、Instapaper | 奏折 01</a><br><a href="http://criticmarkup.com/users-guide.php" target="_blank" rel="noopener">CriticMarkup User’s Guide</a></p><h3 id="模板标签-line-支持反向获取文本"><a href="#模板标签-line-支持反向获取文本" class="headerlink" title="模板标签 [[line]] 支持反向获取文本"></a>模板标签 <code>[[line]]</code> 支持反向获取文本</h3><p>在 Power+ 1.0 中，Hum 曾经介绍过 <code>[[line]]</code> 这个模板标签的用法：我们可以通过这个标签获取 Drafts 的特定几行，例如用 <code>[[line|2]]</code> 表示草稿第二行的内容，用 <code>[[line|3..]]</code> 表示草稿第三行及之后的内容，等等。<br>这个模板标签在 5.5 版本的更新中得到了加强：现在我们可以用负数来从草稿的末尾向前获取文本了。例如使用 <code>[[line|-1]]</code> 就可以表示草稿最后一行的内容；使用 <code>[[line|2..-3]]</code> 则可以表示草稿的第二行至倒数第三行的内容。<br>相关阅读：<br><a href="https://sspai.com/article/41954?series_id=9" target="_blank" rel="noopener">通过 Bear 来认识 Drafts 的 [[line]] 用法</a></p><h2 id="小结与展望"><a href="#小结与展望" class="headerlink" title="小结与展望"></a>小结与展望</h2><p>在这次的更新中，Drafts 主要带来了工作区的进一步强化，以及一条新的 URL Scheme。此外，在之前的版本更新中，Drafts 还支持了新的高亮语法，并作了大量细节上的优化。<br>我在本文开篇提到 Drafts for Mac 已经初具雏形了，这款强大的笔记应用即将正式来到 Mac 平台。目前的 Drafts for Mac 仅实现了草稿列表、工作区等功能，但还不支持自定义动作。这里的一部分原因是由于 Mac 系统和 iOS 系统有一定的区别，因此不少动作的移植需要很大的工作量。不过我觉得更重要的一点是：相比封闭的 iOS 系统，Mac 要开放得多。我们有很多办法在 Mac 上玩出花样：Keyboard Maestro、LaunchBar、Apple Script……自定义动作在 Mac 上是否有存在的必要，这一点仍值得商榷。但可以肯定的是，无论 Drafts for Mac 最终版本支持自定义动作与否，我们都能找到办法，让它给我们带来更多效率。<br>值得在这里说明的是，Drafts 的 Mac 版本现在正在向 Drafts Pro 的订阅用户开放测试。如果你是 Drafts 的长期用户，手上又正好有 Mac 电脑，你可以在 <a href="https://getdrafts.com/mac/beta/" target="_blank" rel="noopener">这个页面</a> 获取测试版本的 Drafts for Mac。不过测试版本毕竟存在着风险，请在尝鲜前务必做好备份。<br>让我们一起期待一个更为强大的 Drafts 吧。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Drafts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Legion》观看指南</title>
      <link href="/2018/09/02/culture/Legion%20%E8%A7%82%E7%9C%8B%E6%8C%87%E5%8D%97/"/>
      <url>/2018/09/02/culture/Legion%20%E8%A7%82%E7%9C%8B%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<p><img src="/2018/09/02/culture/Legion%20%E8%A7%82%E7%9C%8B%E6%8C%87%E5%8D%97/DraggedImage.tiff" alt></p><blockquote><p>Welcome to madness.</p></blockquote><p>今年六月，Fx 电视台的 X 战警衍生剧集《Legion》（中文译名为《大群》）第二季完结了，同时第三季续订的消息也传了出来。这部剧的第一季在去年上映后口碑出现了两极分化的现象，有人认为它晦涩难懂，也有人对它采取的表现手法大加赞赏。批判这部剧的观点通常是：故弄玄虚、节奏拖沓。这些观点并非是空穴来风，Legion 确实是一部相当独特的作品，这部剧有着不少在其它影视作品里看不到的特征。就这些特征而言，我觉得它反而是一部值得去欣赏的作品。<br>Legion 讲的是 X 教授的儿子，David 的故事。David 是一个非常强大欧米伽级变种人，也是一个严重的多重人格症患者，能够吸收他人的意识到自身。<br>在关心 David 的故事之前，我们先来看看 Legion 的导演吧。</p><h2 id="从-Noah-Hawley-说起"><a href="#从-Noah-Hawley-说起" class="headerlink" title="从 Noah Hawley 说起"></a>从 Noah Hawley 说起</h2><p><img src="/2018/09/02/culture/Legion%20%E8%A7%82%E7%9C%8B%E6%8C%87%E5%8D%97/0B4653D3-D7F7-4A16-9840-09E51F4E965D.jpeg" alt="Noah Hawley"><br>Legion 的导演是<a href="https://en.m.wikipedia.org/wiki/Noah_Hawley" target="_blank" rel="noopener">诺亚·霍利（Noah Hawley）</a>，一个被誉为「电视界的库布里克」的奇才，著名的电视剧 Fargo（《冰血暴》）也是他所导演。Fargo 虽然受到「现实事件改编」这一设定的局限，因而不及 Legion 这般奇幻诡谲，但我们仍能在画面和故事的背后看见导演的异想天开。Noah 似乎很擅长魔幻现实主义的手法，这一点在三季的 Fargo 中是体现得很明显的。到了 Legion，讲的本就是一个变种人的故事，Noah 的魔幻风格就更加一发不可收拾了。<br>更为关键的是，Legion 讲的不是一个传统意义上的故事，这也是我非常喜欢这部剧的原因。在第二季最终集播出后，诺亚接受了<a href="http://vulture.com" target="_blank" rel="noopener">Vulture</a>的采访。在采访中他这样说道：</p><blockquote><p>对我来说，这整部剧始于这样一个想法：我能在这个体裁中做些什么？这个想法的出现甚至先于角色的选定。我觉得，如果这部剧讲的是一个某种程度上的超级恶棍的故事，那会很有趣。</p></blockquote><p>那确实很有趣，因为 Legion 最终确实讲出了一个与众不同的故事；甚至可以说，这部剧所讲述的东西已经逐渐地超越了故事本身。</p><h2 id="Legion：超越电视剧的电视剧"><a href="#Legion：超越电视剧的电视剧" class="headerlink" title="Legion：超越电视剧的电视剧"></a>Legion：超越电视剧的电视剧</h2><p>私以为，Legion 是一部超越了电视剧意义的作品。从它的各个方面，你都能感觉到导演似乎有一些想要表达的想法，这些想法被融入画面、配乐、剧情和剪辑中，变得支离破碎而难以辨认。</p><h3 id="精心布局的画面"><a href="#精心布局的画面" class="headerlink" title="精心布局的画面"></a>精心布局的画面</h3><p>说 Legion 的画面不是精心安排的，恐怕都没有人会相信。<br><img src="/2018/09/02/culture/Legion%20%E8%A7%82%E7%9C%8B%E6%8C%87%E5%8D%97/Image%202018-6-15%20%E4%B8%8B%E5%8D%8810-44.png" alt><br>举例来说，第二季第二集的这幅画面，描绘了 David 出现在 Astral Plain 的景象。天空层云密布，带来高亮的同时又滋生出压抑感；地面上是一片一望无际的草原，枯黄的颜色与天空的灰白相映，打造出一种颇为梦幻的氛围。在这个梦幻之地，大卫缓缓起身，空气里弥漫着一种古怪的压抑，宛如暴风雨前的宁静。突然响起一阵铃声，循着声音他走向不远处的一个占卜台，那里并没有人，桌上摆着一个水晶球。随后镜头缓缓从占卜台后侧掠过……不能再说下去了。<br>除却色彩，画面的内容本身也相当有意思。「夏天岛」与「三部」这两个地方的装潢完全不似寻常的军事基地：五彩的墙壁、装饰典雅的餐厅和房间。<br>这些不合常理的装潢从某种意义上来说，也是在尝试着表达一些隐晦的含义。例如三部的装饰中大量使用了六边形的元素，而六边形具有控制的含义，这也在间接地影射三部的人意识或许是受到影响的。<br><img src="/2018/09/02/culture/Legion%20%E8%A7%82%E7%9C%8B%E6%8C%87%E5%8D%97/DraggedImage-1-7764319.tiff" alt><br><img src="/2018/09/02/culture/Legion%20%E8%A7%82%E7%9C%8B%E6%8C%87%E5%8D%97/DraggedImage-2.tiff" alt><br>总结来说，我们先抛开画面元素的隐喻不谈，这部剧的画面本身看起来真的很舒适。无论是精心调配的颜色还是绝无冗余的元素，在如今的一众美剧之中，Legion 的画面绝对是顶尖水平。<br><strong>观看建议01：多关注画面的细节，推荐经常暂停、倒带来寻找值得关注的细节。</strong></p><h3 id="奇异吊诡的剧情"><a href="#奇异吊诡的剧情" class="headerlink" title="奇异吊诡的剧情"></a>奇异吊诡的剧情</h3><p>Legion 的第一季主要讲述了大卫在和头脑中的恶魔抗争的故事，这一季的剧情已经相当古怪。当镜头移动时，镜头外也许已经出现了一个本不在那里的人；任何事物都可以是隐隐约约、介于存在于消失之间；同时，大量完全不合常理的人与物又会不时出现。你会看到各种不合常理的事情发生，而想要享受这部剧的最好方法就是，不必过于纠结那些看似不正常的东西。你看到的毕竟是一个强大的、拥有修改现实能力（且精神不稳定）的欧米伽级变种人的世界，在这里一切都可以是虚幻的；有时你甚至无法确定当前的剧情是发生在现实世界还是精神幻境。<br><strong>观看建议02：任何逻辑上说不通的事情也许都是合理的。可以在意细节，但不要纠结于它们。</strong><br>到了第二季，随着剧情展开速度变慢，Legion 更加显出在剧情这方面的独特。除了主线故事的展开，每集都会穿插一个心理故事。这个故事会引导你去思考一些特定的心理现象：意识、幻觉、心理上的传染……随后的剧情发展又回逐渐印证这个心理故事，最终去佐证它。我觉得在电视剧中安排这样的内容形式，这种行为本身就是一种艺术手法。如此一来，观看这部作品的意义就不在于剧情本身，而在于去享受被表面上的错乱牵引着思考事物本质的过程，这种错乱中隐含的逻辑正是 Legion 的魅力所在。<br><strong>观看建议03：多去关注心理故事想表达的内容，在随后的剧情中试着去找和这个故事相印证的内容。</strong></p><h3 id="独立于内容的手法"><a href="#独立于内容的手法" class="headerlink" title="独立于内容的手法"></a>独立于内容的手法</h3><p>在多数影视作品里，我们看到表现手法是为内容而服务的。例如当需要呈现一场追逐戏时，画面里忽明忽暗的光线、由远及近的镜头等都是为了烘托紧张感而采用的手法。但是在 Legion 中，我们时常能看到手法独立于内容的场景，而这也是它独一无二的原因之一。<br>这种为手法服务的内容在第一季的第七集达到了顶峰。这一集中有很大一部分内容没有声音而仅有配乐，采用了如同上个世纪默片一般的形式：<br><img src="/2018/09/02/culture/Legion%20%E8%A7%82%E7%9C%8B%E6%8C%87%E5%8D%97/DraggedImage-3.tiff" alt><br>一片黑白混沌的走廊尽头，Lenny（？）突然从转角冒出。随后的画面用字幕大声喊出：「怪物来了！」<br><img src="/2018/09/02/culture/Legion%20%E8%A7%82%E7%9C%8B%E6%8C%87%E5%8D%97/DraggedImage-4.tiff" alt><br>音乐声连续未停，画面转为走廊中的 David，与此同时画面又转为彩色。<br><img src="/2018/09/02/culture/Legion%20%E8%A7%82%E7%9C%8B%E6%8C%87%E5%8D%97/DraggedImage-5.tiff" alt><br>这一段的画面就这样在黑白和彩色间来回切换<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>，不变的是默片一般的形式。人物的喜怒哀乐以这种略显夸张的形式表现出来，有一股不真实的质感，却正好与本片的主题相契合。<br><strong>观看建议04：有一些片段真的很惊艳，看到自然就意识到了。倒回去多看上几遍吧。</strong></p><h2 id="怪异电视作品的黄金时代"><a href="#怪异电视作品的黄金时代" class="headerlink" title="怪异电视作品的黄金时代"></a>怪异电视作品的黄金时代</h2><blockquote><p>If everything is weird then nothing is weird.        ——Noah Hawley</p></blockquote><p>Legion 的背后，我们看到的是一个怪异电视作品的黄金时代。<br>什么是怪异电视作品？这类作品不似传统电视剧的叙事结构和表达方式，往往采用看起来怪异的手法去展示内容。《超感猎杀》断裂的故事结构、《大群》不可靠的叙事视角、《美国众神》将神话与现境混合叙述的构造……这些都是尝试着挑战传统线性叙事方式的作品。<br>这样的作品的产生是有多方面因素的。就我观察下来，主要有三点：</p><ol><li><strong>行业竞争。</strong>Noah 在 The Rollingstone 采访的一篇文章中提到，「Everyone is making all these shows and the only way to distinguish yourself is to make something different and better, which makes TV the artist’s market.」</li><li><strong>观众需求。</strong>一方面，现在的观众对这样奇特的作品有更高的接受度；另一方面，厌倦了那些传统影视套路的观众也急需一些不一样的东西。</li><li><strong>有人买单。</strong>这大约也是有高层意识到这类作品的重要性。在前两条因素的支持下，只要有电视台肯签这类作品，就一定会有人把它们做出来。<br>不过值得深思的是，走怪异风格的作品如今是越来越多了。Noah 自己曾说：「如果所有东西都很奇怪，那就没什么东西是奇怪的了。」他这话当然是针对作品而言的，但放到整个影视圈大概也适用。怪异的电视作品确实很惊艳，但当它们泛滥的时候，恐怕那种惊艳的感觉也就消散了。<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2>陆陆续续拖了好几个月，终于把这篇文章写完了。<br>我自己也意识到，作为一篇纯安利性质的文章，这篇文章是不合格的。我可能多说了两句没什么意义的话，所以就和看 Legion 一样，也别太把这篇文章当真。另外就是，我自己也不是专业研究影视的人，说错话也很正常，欢迎指正。<br>写这篇文章其实写得挺难受的，囿于安利这一初衷，很多关于剧情本身的想法说不出来，怕剧透。这也就造成很多分析说到一半只能停下，全文跳崖无数回。不过真要正儿八经分析起来，那就是下一篇文章（未必存在）的事了。</li></ol><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">画面颜色的含义在看到这一集时读者就会明白了。</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
      
      
      
        <tags>
            
            <tag> 影评 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>克服睡眠焦虑</title>
      <link href="/2018/07/07/efficiency/%E5%85%8B%E6%9C%8D%E7%9D%A1%E7%9C%A0%E7%84%A6%E8%99%91/"/>
      <url>/2018/07/07/efficiency/%E5%85%8B%E6%9C%8D%E7%9D%A1%E7%9C%A0%E7%84%A6%E8%99%91/</url>
      
        <content type="html"><![CDATA[<p>我一直是那种比较难入睡的那种人，日常不躺个二十几分钟是睡不着的。因而电子设备对我睡眠的影响相当大，假如睡前长时间看手机，我躺下直到入睡的时间可能会超过四十分钟。Night Shift 这一功能的确对我的情况有帮助，但效果仍不理想。上高中以后我的睡眠质量就变得很差劲，这大概是因为我不习惯学校那种大清早起床的作息，导致整个人的作息有点紊乱，甚至在睡不着的时候会感到相当焦虑。以下是我这三年来为了克服睡眠焦虑想的种种措施。</p><h2 id="解决电子设备对睡眠的影响"><a href="#解决电子设备对睡眠的影响" class="headerlink" title="解决电子设备对睡眠的影响"></a>解决电子设备对睡眠的影响</h2><p>对于电子设备带来的影响，我目前的解决方案是尽量避免在睡前看手机。这包括两方面：</p><ol><li><strong>在家</strong>：iOS 的就寝功能有一个提前十五分钟的入睡提醒。收到提醒以后，我就放下手机，看一会纸质书然后睡觉。有时我也会用 Kindle 看书，但我会特地把它白色的背光调到较暗的等级，然后用暖色光线的床头灯辅助照明。</li><li><strong>在学校</strong>：在学校里没有床头灯这种暖色调的光线条件，所以我的选择是收到就寝提示以后，躺在床上听一会播客。一般不会发生听到一半我睡着的情况，但是反正 Castro 有睡眠定时也无所谓。<h2 id="进一步改进睡眠质量"><a href="#进一步改进睡眠质量" class="headerlink" title="进一步改进睡眠质量"></a>进一步改进睡眠质量</h2>高三时我越发重视调整作息这件事，最后大致总结出以下几点：</li><li><strong>下午三点之后绝不碰含大量咖啡因的食物和饮品。</strong>对我来说这真的不是夸张，有一回我下午喝了杯冷萃咖啡，结果到凌晨四点都没睡着……</li><li><strong>下午或者晚上尽量抽空做一些运动</strong>，打篮球或者跟着 Keep 练练肌肉都行。</li><li>中午可以睡午觉，<strong>但是白天绝不能仅仅因为困就睡太多</strong>。<h2 id="智能手环与睡眠"><a href="#智能手环与睡眠" class="headerlink" title="智能手环与睡眠"></a>智能手环与睡眠</h2>这几年我一共用过两个智能手环：<br>第一个是 Weloop Now 2。这款手环最大的优点就是轻，只有十几克，晚上戴着不会有不适感。它能大致记录你的睡眠时间，包括深度睡眠、浅睡等，而且是自动记录的，无需手动开关。<br>第二个是 Watch Series 3。Watch 相较其它各种手环最大的优势就在于和手机之间能完全自动同步，查看数据方便；此外 Autosleep 也确实很好用。不过我的确也意识到一个问题：就算你知道了自己睡眠的详细情况，你也无法根据它作出什么精确的自我调整，能做的无非就是大致改变作息罢了。就这个角度来说，睡眠记录之于改善睡眠，更多可能还是心理上的安慰作用。不过 Watch 还有个很不错的功能：呼吸。睡不着的时候做三分钟深呼吸，人会变得放松一些，这倒是一个很不错的助眠手段。</li></ol><p>本文整理自我在少数派<a href="https://sspai.com/article/45499?series_id=9" target="_blank" rel="noopener">第44周Power+预告</a>下的评论。</p>]]></content>
      
      
      
        <tags>
            
            <tag> π </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Drafts 更新到 5.2 版本，你需要了解这些</title>
      <link href="/2018/07/02/apps/Drafts%20%E6%9B%B4%E6%96%B0%E5%88%B0%205.2%20%E7%89%88%E6%9C%AC%EF%BC%8C%E4%BD%A0%E9%9C%80%E8%A6%81%E4%BA%86%E8%A7%A3%E8%BF%99%E4%BA%9B/"/>
      <url>/2018/07/02/apps/Drafts%20%E6%9B%B4%E6%96%B0%E5%88%B0%205.2%20%E7%89%88%E6%9C%AC%EF%BC%8C%E4%BD%A0%E9%9C%80%E8%A6%81%E4%BA%86%E8%A7%A3%E8%BF%99%E4%BA%9B/</url>
      
        <content type="html"><![CDATA[<p><img src="/2018/07/02/apps/Drafts%20%E6%9B%B4%E6%96%B0%E5%88%B0%205.2%20%E7%89%88%E6%9C%AC%EF%BC%8C%E4%BD%A0%E9%9C%80%E8%A6%81%E4%BA%86%E8%A7%A3%E8%BF%99%E4%BA%9B/Image%202018-6-22%20%E4%B8%8B%E5%8D%885-54.jpeg" alt><br>自从 Drafts 发布 5.0 大版本并转为订阅制以来，几乎可以明显地感觉到它的更新速度和修复问题的效率都在提升。上周 Drafts 发布的 5.2 版本可以说是自 Drafts 5 发布以来最大的一次小版本更新，这次更新加入了几个很有用的功能，并与之前的功能构成了一个更为完整的体系。</p><h2 id="新增「导航」功能"><a href="#新增「导航」功能" class="headerlink" title="新增「导航」功能"></a>新增「导航」功能</h2><p>这是一个相当重要的更新，Greg 特地在 Drafts 的官网为这个功能发布了一个<a href="http://getdrafts.com/editor/navigation" target="_blank" rel="noopener">说明页面</a>，由此也可以看出这个功能的重要性。在这个页面中有一张说明图，我制作了一个中文版本。你可以先参考一下：<br><img src="/2018/07/02/apps/Drafts%20%E6%9B%B4%E6%96%B0%E5%88%B0%205.2%20%E7%89%88%E6%9C%AC%EF%BC%8C%E4%BD%A0%E9%9C%80%E8%A6%81%E4%BA%86%E8%A7%A3%E8%BF%99%E4%BA%9B/809E6956-A0AB-44C5-8A59-128F427273F9.jpeg" alt="「导航」功能说明"><br>你可以在右上角点击<code>▼</code>进入，或使用快捷键<code>⌘ + \</code>打开导航窗口。在导航窗口中，你可以：<br>1.<strong>在当前草稿中导航。</strong>这一导航模式识别特定的符号，如 Markdown 中的标题<code>#</code>、JavaScript 中的函数<code>function name(){}</code>、Taskpaper 中的<code>Project name:</code>等格式，并以此生成当前草稿的导航目录。点击其中任意一级条目会把光标移动到对应位置处。<br><img src="/2018/07/02/apps/Drafts%20%E6%9B%B4%E6%96%B0%E5%88%B0%205.2%20%E7%89%88%E6%9C%AC%EF%BC%8C%E4%BD%A0%E9%9C%80%E8%A6%81%E4%BA%86%E8%A7%A3%E8%BF%99%E4%BA%9B/Image%202018-6-22%20%E4%B8%8B%E5%8D%882-19.png" alt><br>在 iOS 平台上的笔记应用中，这一功能可以说是 Drafts 独有的了。这一功能的出现具有多重含义：它意味着 Drafts 从此可以作为一个长篇写作工具来使用；此外也意味着 Drafts 具有了竞争 Taskpaper iOS 客户端的实力；甚至于你也可以用它来写 JavaScript 代码了。在此前，Drafts 也能被用来做这些事，但是如今有了导航功能，Drafts 在被用作这些用途时才是完整的。在更新后，我开始逐步尝试着用 Drafts 来取代 Ulysses 在我写作工作流中的一部分位置。假如我准备撰写一篇不会插入很多图片的文章，我会先在 Drafts 中起一条草稿作为大纲，然后再新建另一条草稿作为正文。<br>2.<strong>在最近的草稿间导航。</strong>这一功能是草稿列表的延伸，可以快速帮你找到最近打开过的草稿。<br>另外值得一提的是，导航窗口对于外接键盘的支持很完美。你可以：</p><ul><li>使用<code>⌘ \</code>打开导航窗口。</li><li>使用键盘的上下键在列表中上下移动。</li><li>使用键盘的左右键切换导航的位置（当前草稿/最近草稿）</li><li>使用<code>return</code>键确认。<br>对外接键盘的支持是 Drafts 一贯的风格。就我个人尝试下，仅使用输入文字、运行动作等常规功能时，我完全可以双手不离开键盘。<h2 id="完成动作后为草稿指定标签"><a href="#完成动作后为草稿指定标签" class="headerlink" title="完成动作后为草稿指定标签"></a>完成动作后为草稿指定标签</h2>我们知道，Drafts 支持对动作进行设置，对一条草稿运行这个动作后选择将这条草稿存档或删除。这一功能在任意一个动作的设置选项中可以找到。</li></ul><p><img src="/2018/07/02/apps/Drafts%20%E6%9B%B4%E6%96%B0%E5%88%B0%205.2%20%E7%89%88%E6%9C%AC%EF%BC%8C%E4%BD%A0%E9%9C%80%E8%A6%81%E4%BA%86%E8%A7%A3%E8%BF%99%E4%BA%9B/ECE6E49B-1BC4-4821-AACA-AC550C6A48A5.jpeg" alt="完成动作后指定标签"></p><p>现在，除了原先支持的几个选项，Drafts 还支持在运行动作后为草稿指定一个或多个标签。这也是很重要的一个功能，它进一步发掘了 Drafts 5 新增的标签系统之潜力。<br>举例来说，Drafts 中一个非常常见的动作——发送推特——就可以用指定标签这一新功能加以改进。在动作列表中，找到 Tweet 这个动作，右滑并选择「Edit」打开动作设置选项。随后找到「AFTER SUCCESS」这一项，在「After success」处选择「Archive」，并在「Assign tags」处填入「tweet」。保存后运行这个动作，在推特发送成功后，就会将这条草稿存档并打上「tweet」的标签。你可以<a href="https://actions.getdrafts.com/a/1La" target="_blank" rel="noopener">点击此处</a>获取这个动作。<br>以我自己为例，我的博客是放在<a href="http://bitcron.com" target="_blank" rel="noopener">Bitcron.com</a>上的，这个平台支持与 Dropbox 进行双向同步：在发布文章时，我只需要在 Drafts 里写好文章，用动作将文件发送到 Dropbox 的指定文件夹即可。现在，我可以设置让这个动作运行完成后为草稿打上「blogpost」的标签，这样在本地留有一份存档，也方便我快速查找和修改。当然，我也更希望这个运行后打上标签的行为在将来支持更多的自定义成分，例如可以在运行动作时从数个标签中选一个或多个作为这条草稿的标签，这样能使分类更细致。<br>事实上，类似这两个事例地，但凡是运行从 Drafts 中分享文本到其他地方的动作，我们都可以尝试着加一步添加标签。甚至于，我们可以制作一个步骤为空的动作，仅设置运行后添加标签这一项，专门用作常用标签的快捷键。<br>总而言之，指定标签的这个新功能与原先的标签系统构成了很好的呼应，让 Drafts 的整理和检索功能得到了进一步增强。如果你在尝试用 Drafts 作为一个资料库，那你千万不能错过这个功能。</p><h2 id="载入工作区和动作组"><a href="#载入工作区和动作组" class="headerlink" title="载入工作区和动作组"></a>载入工作区和动作组</h2><p>如果说前面提到的两条更新是大部分人都用得到的，那么最后这一条就比较 geek 了。概括来说，你现在可以用自动化的方式让 Drafts 载入工作区和动作组。<br>首先回顾一下工作区和动作组的概念吧。<strong>工作区本质上是一种过滤机制，通过搜索关键字和特定标签这两种过滤条件，4在工作区中只显示符合条件的草稿。</strong>Drafts 本身的收件箱和存档箱是将所有草稿放在一起的，不存在文件夹之类的分类机制。但是通过工作区这一功能，我们得以在 Drafts 中将不同内容的草稿隔离开来，创造一个更为专注的工作环境。<br><img src="/2018/07/02/apps/Drafts%20%E6%9B%B4%E6%96%B0%E5%88%B0%205.2%20%E7%89%88%E6%9C%AC%EF%BC%8C%E4%BD%A0%E9%9C%80%E8%A6%81%E4%BA%86%E8%A7%A3%E8%BF%99%E4%BA%9B/C8018324-AC96-41C9-8E6D-704F139F01E7.jpeg" alt="载入工作区和动作组"><br><strong>而动作组，顾名思义即是由一个或多个动作形成的组。</strong>Drafts 5 新增了对动作组的设置，你可以一次性设置一个动作组中所有动作的属性、是否在键盘扩展条显示等，也可以直接通过分享动作组的方式来分享整套动作。<br>自工作区这个功能推出以来，就一直有把工作区与动作组结合，通过切换的方式打造不同工作环境的用法。当然，原先工作区的切换过程还是比较繁琐的：首先滑动调出草稿列表，再在列表右上角打开工作区选项，最后选择工作区。<br>在这次更新后，我们有了更为强大的工具。这次更新的自动化载入方式包含两方面：<br>1.<strong>新增了用于载入动作组的 URL Schemes。</strong>其参数如下：<br><code>drafts5://x-callback-url/loadActionGroup?name=NAME</code><br>这条 URL Scheme 用于打开 Drafts 并在右侧的动作列表载入指定的动作组，其中<code>NAME</code>处填入载入的动作组名字。如果在 Drafts 内用动作打开这条 URL Scheme，效果就是直接载入这个动作组。<br><code>drafts5://x-callback-url/loadKeyboardActionGroup?name=NAME</code><br>这条 URL Scheme 则用于打开 Drafts 并在键盘扩展条上载入指定的动作组。<br>另外值得一提的是先前与工作组一起推出的用于载入工作组的 URL Scheme：<br><code>drafts5://x-callback-url/workspace?name=NAME</code><br>这条 URL Scheme 用于打开 Drafts 并载入指定的工作区。和新推出的这两条 URL Scheme 结合，我们就可以用自定义动作来打造一套工作组切换器。这套切换器由八个动作组成，其实现的效果为：通过按下<code>⌘ + 2</code>至<code>⌘ + 9</code>的组合键（<code>⌘ + 1</code>与<code>⌘ + 0</code>被 Drafts 自己的功能占用了），可以快速切换当前的工作组与键盘扩展条，实现在不同工作状态下的快速切换。这个创意来自 Drafts 论坛里的<a href="https://forums.getdrafts.com/u/pdavisonreiber" target="_blank" rel="noopener">pdavisionreiber</a>，我对他分享的动作组进行了修改，增加了载入键盘扩展条的功能。来看看效果：<br><img src="/2018/07/02/apps/Drafts%20%E6%9B%B4%E6%96%B0%E5%88%B0%205.2%20%E7%89%88%E6%9C%AC%EF%BC%8C%E4%BD%A0%E9%9C%80%E8%A6%81%E4%BA%86%E8%A7%A3%E8%BF%99%E4%BA%9B/Image%202018-6-25%20%E4%B8%8B%E5%8D%884-39.gif" alt="一个简单的工作组切换器"><br>你可以<a href="https://actions.getdrafts.com/g/1L0" target="_blank" rel="noopener">点击此处</a>获取我修改过的工作组切换器，或<a href="https://actions.getdrafts.com/g/1HZ" target="_blank" rel="noopener">点击此处</a>获取原版。假如你不使用外接键盘，你也可以试着把这套动作设置到键盘扩展上来使用。<br>这个切换器是非常实用的，以我自己为例，我的 Drafts 里会出现各种内容，在需要集中做一件事情的时候确实会有干扰。在设置好这套切换器之后，假如我想用 Drafts 规划接下来想做的事，我就按<code>⌘ + 2</code>切换到任务管理的工作区，这里仅显示内容包含「task」的草稿，同时切换到一套能快速输入任务管理系统中各种标签、截止时间等内容的键盘扩展。最近几个月我一直在写 Drafts 相关的文章，因此我将<code>⌘ + 3</code>设置为切换到「Drafts」工作区，这里只显示标签含「drafts」的草稿，同时切换到一套文字编辑用的键盘扩展。此外鉴于我最近在尝试用 Drafts 长篇写作，我将<code>⌘ + 4</code>设置为仅显示含「blogpost」的草稿。前面说了工作区的好处，这套切换器的意义就在于它让切换工作区不再是一个因为步骤繁琐而变得可有可无的操作，而是真正让工作区能切实给我们带来效率。<br>2.<strong>新增了用于载入工作区和动作组的 JavaScript 函数。</strong>分别为：<br>    app.loadActionGroup(group)<br>    app.loadKeyboardActionGroup(group)<br>    app.applyWorkspace(workspace)<br>这些语句用法本质上和它们的 URL Schemes 版本是一样的，只不过 JavaScript 的版本可以配合其他代码，根据个人需求实现一些更为复杂的应用。在此不多叙述。<br>另外还有用于控制草稿列表与动作列表显示与隐藏的函数：<br>    app.showDraftList()<br>    app.hideDraftList()<br>    app.showActionList()<br>    app.hideActionList()<br>如果你有开着草稿列表进行工作的习惯，也可以尝试着把这些函数加入你的动作里。</p><h2 id="其他更新"><a href="#其他更新" class="headerlink" title="其他更新"></a>其他更新</h2><p>除了上面叙述的这几条，Drafts 自发布以来还积累了一些其他值得一提的更新，在此一并介绍：<br>1.在草稿列表中对任一草稿长滑动可以将其存档或删除。具体行为是存档还是删除可以在工作区里面设置。在 5.0.4 版本加入。<br><img src="/2018/07/02/apps/Drafts%20%E6%9B%B4%E6%96%B0%E5%88%B0%205.2%20%E7%89%88%E6%9C%AC%EF%BC%8C%E4%BD%A0%E9%9C%80%E8%A6%81%E4%BA%86%E8%A7%A3%E8%BF%99%E4%BA%9B/Image%202018-6-22%20%E4%B8%8B%E5%8D%882-55.gif" alt><br>2.原先 Drafts 4 支持的 iMessage APP 回归了。在 5.0.4 版本加入。<br>3.动作中的步骤现在可以复制或暂时禁用，方便编写动作时的调试过程。在 5.1.0 版本加入。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>在 Drafts 5 刚上架时，我就说过，这个应用正在变得越发现代化和强大。自发布以来的这几个月里，Drafts 仍然在不断地推出新的功能，完善它自身的体系。从某种意义上说，这也大约是订阅制正面效果的一种体现吧。<br>你可以在 App Store 下载 Drafts 5。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Drafts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谈谈订阅制</title>
      <link href="/2018/06/15/ideas/Date2018-06-15/"/>
      <url>/2018/06/15/ideas/Date2018-06-15/</url>
      
        <content type="html"><![CDATA[<h1 id="谈谈订阅制"><a href="#谈谈订阅制" class="headerlink" title="谈谈订阅制"></a>谈谈订阅制</h1><p>去年可以说是订阅制兴起的元年，著名的写作应用 Ulysses 转为了订阅制，引起一片哗然。随后我们看到包括 Drafts、Castro 等一众应用在内的各种知名应用都转为了订阅制。就网上目前的各种言论来看，订阅制并不被看好，本文我将尝试着为订阅制「正名」。</p><p>首先要澄清的是，作为一个各类应用的重度用户，我也不希望每年支出上百元的订阅费用来使用自己心爱的应用。但是仔细思考这背后的关系，却又不难发现，这笔「年费」的确存在它的意义；而想通这一层意义之后，我也渐渐接受了订阅的费用支出。</p><h2 id="定义订阅制"><a href="#定义订阅制" class="headerlink" title="定义订阅制"></a>定义订阅制</h2><p>要说订阅制，首先得弄清楚它的本质。表面上，订阅制就是按照一个固定周期（通常使用每月和每年这两种单位）向应用开发者支付一笔费用，来保证自己的使用权。订阅制不受人待见的原因就在这里：它不仅让用户支出更多，而且给人一种「这个应用不属于我」的感觉。换言之，采用订阅制的应用所出售的不再是像买断制那种一锤子买卖的商品，而是一个订阅者的权限随时会被收回的许可。<br>但是从本质上来看，订阅制不只是简单地定期交钱，订阅和订阅之间还有着差别，我这里想将所有的订阅分为两类。</p><ul><li>第一类是<strong>在线服务类订阅</strong>，诸如 Dropbox 的高级版、DayOne 的同步功能……这类订阅的意义更多是在于购买一种服务，在上面的例子里分别为：额外存储空间的使用权、在线同步功能的使用权。</li><li>第二类是<strong>本地功能类订阅</strong>，诸如 Bear 和 Drafts 的 Pro 版本。这类订阅的购买指向较为复杂，因为这些应用大多是以本地功能为主，开发者不会有运行云端服务所需的额外支出，故此这类订阅大多受人诟病。<br>不难发现，在线服务类订阅的本质，排除开发者获取的收入，在于弥补云端服务器的运营支出。而本地功能类订阅的本质就是持续为开发者提供定期收入。</li></ul><h2 id="用户有必要给开发者定期交钱吗？"><a href="#用户有必要给开发者定期交钱吗？" class="headerlink" title="用户有必要给开发者定期交钱吗？"></a>用户有必要给开发者定期交钱吗？</h2><p>有必要。开发应用是一个相当麻烦和复杂的过程，即使是一个已经完成开发的应用，定期的维护也很费事。举例来说，你有一个上架的应用 A，你认为开发完成后就可以放在 App Store，售价 25 元，一直这样出售下去。然而事情远比这复杂，一段时间后，苹果就要求这个应用必须进行 64 位系统的适配，否则就会将其下架。当你好不容易完成适配，iPhone X 上市了——为了让 iPhone X 用户用上你的应用 A，你又得为 iPhone X作适配。除此之外，更不用说应用还会时常发现开发时忽略的漏洞需要定期作修复，这些都要耗费精力。作为开发者，假如你只拿得到买断制出售的那 25 元——或者 68 元、98元，总归不会多到哪里去——那你很难保证自己有动力去维护这个应用。<br>这样看来订阅制，尤其是<strong>本地功能类订阅</strong>的意义就很明显了，<strong>它是用户为了应用能够持续更新、变得更好而交的一笔「众筹费」。</strong>这笔费用当然不能百分百保证开发者持续更新下去，但它确实让开发者和用户之间多了一层关系，也让用户多了一份保障。</p><h2 id="成功的订阅制和不那么成功的订阅制"><a href="#成功的订阅制和不那么成功的订阅制" class="headerlink" title="成功的订阅制和不那么成功的订阅制"></a>成功的订阅制和不那么成功的订阅制</h2><p>一提起订阅制，最有名的大概就是 Ulysses——它转型订阅制的方式并不那么厚道。Ulysses 采用的方案是下架了旧的买断制应用并用新的订阅制应用替换；同时停止旧应用的维护；如果不订阅则无法编辑文档。这就是做得不那么成功的订阅制，大约由于先前承诺过不会转为订阅制，Ulysses 团队的这一举动招来骂声一片。当然，尽管对此不满，该用的我们还是得用。<br>相较之下，我们也能看到一些在由买断制转为订阅制过程中做得比较成功的例子，著名播客应用 Castro 就是其中之一。更新 3.0 版本后，Castro 由买断制转为免费下载 + 付费订阅的收费模式，订阅 Castro Plus 可以获得 Trim Silence、Mono-Mix 等一系列额外功能。但是已经购买 2.0 版本的老用户会免费永久获得夜间模式、音效增强等 2.0 版本中已有的功能。这样老用户不会因此有所损失，同时又能带来新的收入，即是一种较为聪明的做法。<br>确实，类似 Ulysses 的应用会由于本身功能过于全面，难以一次带来大量具有吸引力的新特性，因此转换订阅制时就天生具有了一种劣势。不过私以为这样的更新还是存在更好的解决方案的，也还望开发者们在转换订阅制之前三思。</p><h2 id="重新审视订阅制"><a href="#重新审视订阅制" class="headerlink" title="重新审视订阅制"></a>重新审视订阅制</h2><p>我先前做过一个关于应用消费习惯的调查，得出的结果是：几乎在每一个年龄段，愿意消费应用内订阅的人都少于 20%。这对于开发者是一个不怎么友好的结果，从 Ulysses 在 App Store 骤降的评分也足以看出。我们需要重新看待审视订阅制的意义，重新理解这种新兴的付费方式：（大部分情况下）订阅制不是尝试着掏空你钱包的洪水猛兽，而是开发者赖以维持软件的一笔收入。因此，没必要在开发者宣布某某应用转成订阅制以后咬牙切齿、咒骂连连，天下不仅没有免费的午餐，不多付点钱你更别想吃上好的东西。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>记一次精力记录的尝试</title>
      <link href="/2018/05/13/efficiency/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%B2%BE%E5%8A%9B%E8%AE%B0%E5%BD%95%E7%9A%84%E5%B0%9D%E8%AF%95/"/>
      <url>/2018/05/13/efficiency/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%B2%BE%E5%8A%9B%E8%AE%B0%E5%BD%95%E7%9A%84%E5%B0%9D%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>在 <a href="https://sspai.com/article/44392?series_id=9" target="_blank" rel="noopener">5 月 1 日的 Power+</a> 中，Hum 分享了一种用纸笔记录精力的方法。恰好我时常觉得自己的精力分配总是不均衡，于是就尝试了一下这种方法。<br>我建议在阅读本文之前先阅读这篇 <a href="https://sspai.com/article/44392?series_id=9" target="_blank" rel="noopener">Power+</a>。</p><h2 id="记录的方法"><a href="#记录的方法" class="headerlink" title="记录的方法"></a>记录的方法</h2><p><img src="/2018/05/13/efficiency/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%B2%BE%E5%8A%9B%E8%AE%B0%E5%BD%95%E7%9A%84%E5%B0%9D%E8%AF%95/Image%202018-5-6%20%E4%B8%8B%E5%8D%884-43.png" alt="Image 2018-5-6 下午4-43"><br>这张图片就是用来记录的模版。概括来说，这种方法是这样操作的：把这张模板打印出来，每隔一段时间，使用不同颜色的笔来代表不同身份做的事，填涂扇形图的格子来为自己上一个时间段的表现打分。举例来说，这是我其中一天的记录：<br><img src="/2018/05/13/efficiency/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%B2%BE%E5%8A%9B%E8%AE%B0%E5%BD%95%E7%9A%84%E5%B0%9D%E8%AF%95/Image%202018-5-13%20%E4%B8%8A%E5%8D%8812-24.png" alt="Image 2018-5-13 上午12-24"><br>我采用了和 Hum 相同的颜色标记：<br><strong>蓝色</strong>代表个人<br><strong>红色</strong>代表工作<br><strong>黑色</strong>代表学业<br>这天我正好在复习之后一天的一场考试，可以看到这一天的大部分格子都是涂成黑色的，也就是我几乎一整天都在忙复习的事情。</p><h2 id="一些我个人作出的调整"><a href="#一些我个人作出的调整" class="headerlink" title="一些我个人作出的调整"></a>一些我个人作出的调整</h2><p>Hum 原文给出的建议是使用纸笔作记录，这里部分摘录他的理由：</p><blockquote><ol><li>智能设备的干扰强。只要边上有手机，它就能吸收着你的注意力。</li><li>用智能设备记录时间其实不快捷。</li><li>智能设备上记录时间的工具多是以任务为单位。以任务为单位，就要求我们对一个任务的开始和结束有个明显的意识。但正常情况下我们是没这个意识的，需要另外培养。<br>因此，如果一个人刚刚对记录时间感兴趣，但是却用智能设备里的软件入门，他多半会感到阻力重重。如果有兴趣做时间管理，最开始用纸笔，每一个小时记一下之前一小时大概做了什么，在这之中找规律，上手会快很多。好在，精力管理这个领域还不算热，软件还没跟上，所以可以让我们有用纸笔记录的机会。<br>权衡一番之后，我决定把模板导入 Goodnotes 并使用 Pencil 来做记录。这样做的理由如下：</li><li>使用 Goodnotes + Pencil 的实质就和使用纸笔一样，不会有太高的学习成本，记录起来同样方便，体验甚至优于普通纸笔。这就能涵盖所有「使用纸笔来代替智能设备上的软件进行记录」这一方法的优点；</li><li>我希望最终的记录结果能保存一份电子存档方便以后查看，而Goodnotes 能将记录导出为一个 PDF 文档，可以直接保存到印象笔记或 DEVONthink 并存档，免去了扫描这一步骤；</li><li>我的 iPad 上安装的应用，通知几乎都是关闭的，不存在吸收注意力的情况。这就规避了「使用智能设备进行记录」最关键的「注意力不集中」问题。<br>此外，我还希望通过一些关键数据的统计来得出更为有效的精力结论。从记录的第三天起，我决定开始关注一些数据，包括：</li></ol><ul><li><strong>当天的平均分数</strong>。这一数据用当天的精力总分除以工作的总小时数得到。这个数据看起来没什么用，但是它实际上能帮我掌握自己一周中的精力变化。</li><li><strong>某一天的平均分数与前一晚睡眠时长的比值。</strong>上高中以后我就一直觉得睡眠不足，加之我的睡眠时长也不是很规律（一般在 5 小时-8 小时之间，根据当天的安排而定），恰好有了条件来研究睡眠时长对第二天的精力究竟有着怎样的影响。</li><li><strong>喝过咖啡之后 3 小时的精力变化。</strong>我想研究一下咖啡因究竟对我的效率有着怎样的影响。</li></ul></blockquote><h2 id="记录的结论"><a href="#记录的结论" class="headerlink" title="记录的结论"></a>记录的结论</h2><p>这里我打算以这一周较为典型的一天为例谈一谈我在这十天的记录中得到的结论。<br><img src="/2018/05/13/efficiency/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%B2%BE%E5%8A%9B%E8%AE%B0%E5%BD%95%E7%9A%84%E5%B0%9D%E8%AF%95/Image%202018-5-13%20%E4%B8%8A%E5%8D%8812-38.png" alt="Image 2018-5-13 上午12-38"><br>这是一个寻常的日子，因为在学校上课所以几乎一整天都是涂成黑色的「学业」。我之所以选取这一天，是因为这一天具有很多在这周的记录中出现的典型特征，就我的分析，这些特征包括：</p><ol><li>早上刚起床时精力不佳。这主要是由于学校规定早上要在 6 点 45 之前离开寝室，睡眠略不足造成的。</li><li>在喝过一杯咖啡之后，会有两到三个小时到精力旺盛期。这段时间基本上能保持专注地听课或者是做手头的事情而不分心。</li><li>在一段时间的专注之后，我必然会有一段时间精力不足，出现分心的现象。对我来说，这个时间大约在 40 分钟至 2 小时之间，视专注的思维强度而变。</li><li>下午 1 点至 2 点之间我一般会有些困，进而导致专注程度降低。<br>另外，就这一周记录的数据来看，我的精力还有如下的变化：</li><li>在周三达到最低，周一和周五最高。</li><li>可以观察到睡眠时间的增加有助于提高当天的精力。这当然是个显然的结论，不过比较有趣的是我发现当睡眠时间在 7 个小时左右（就我个人而言）时当天的平均分数与睡眠时间的比值达到最大，这也就意味着 7 小时的睡眠对我来说效益最高。这一数据还有待进一步观察。</li></ol><h2 id="关于记录的一些感想"><a href="#关于记录的一些感想" class="headerlink" title="关于记录的一些感想"></a>关于记录的一些感想</h2><p>首先要说的是，这的确是一个很不错的自我量化的方法。虽然记录的评分是带有主观色彩的，但是「效率」这件事本身就有其主观性，因此我觉得自己的主观性给分数带来的影响并不会对我评估精力变化带来太大的影响。<br>其次，我觉得我确实在这十天的记录里收获了几个结论。就我而言，我打算：</p><ol><li>每天吃完饭趴在桌子上睡一刻钟，尽量不让自己在下午犯困。</li><li>根据上午的安排，合理调整喝咖啡的时间，来达成效率最大化。</li><li>在长时间专注后，不必逼自己强行保持看似「认真」的状态，可以出去走走，活动一会。</li><li>周一和周二可以抽时间把周三的任务提前完成掉一些，周三可以去打打球放松一下。<br>以上是我的感想。很高兴能在 Power+ 里看见这些切实可行的直接或间接提高效率的方法，也希望这类培养效率思维的内容能经常出现。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> π </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>A temporary way to migrate from Drafts 4 to 5</title>
      <link href="/2018/04/22/apps/A%20temporary%20way%20to%20migrate%20from%20Drafts%204%20to%205/"/>
      <url>/2018/04/22/apps/A%20temporary%20way%20to%20migrate%20from%20Drafts%204%20to%205/</url>
      
        <content type="html"><![CDATA[<p><img src="/2018/04/22/apps/A%20temporary%20way%20to%20migrate%20from%20Drafts%204%20to%205/15164251969026.jpg" alt></p><p>Since Drafts 5 has launched a TestFlight version, many users are willing to use it instead of 4. But it is known that Draft 5 hasn’t added a migration function yet(but there will be), so I did it by a workflow. Here are the steps:</p><ol><li>Download the migration <a href="https://drafts4-actions.agiletortoise.com/a/2Kn" target="_blank" rel="noopener">Drafts Action</a> &amp; <a href="https://workflow.is/workflows/e29ba3baa933468e96e2feea7f503543" target="_blank" rel="noopener">Workflow</a>.</li><li>Select the drafts you want to move, run the Migrate Action on them.</li><li>Open the Files app, enter the Drafts catalog, find the Migration.txt and move it to your Workflow catalog.</li><li>Open Workflow, run the migration Workflow.</li><li>Wait until it’s done.</li></ol><p>Tips:</p><ol><li>You should run the Drafts Action first on your Archived Drafts, then Archive them in Drafts 5(Drafts added via URL-Schemes will appear in the Inbox).After that, do the steps to the Inbox a second time.</li><li>Don’t forget to delete the <em>Migration.txt</em> under the Drafts catalog between two operations! Or your Inbox may be like hell……</li><li>You can use the same way to migrate from 5 to 4,just make some adjustments to the Action&amp;Workflow.</li></ol><p>Known issues:</p><ol><li>After running the workflow your Drafts 5 Inbox may not display the drafts properly. In my case,it only displayed 4 drafts on the device which made these operations, but with Drafts 5’s sync my another device displayed the drafts well. So good luck with that.</li><li>Some of the drafts may be missing……Not much but still some. I don’t know why……</li><li>I really don’t know how to deal with the actions. </li></ol><p>Whatever, enjoy.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Drafts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>顶级 iOS 文本处理应用 Drafts 迎来大更新：Drafts 5.0</title>
      <link href="/2018/04/15/apps/%E9%A1%B6%E7%BA%A7%20iOS%20%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E5%BA%94%E7%94%A8%20Drafts%20%E8%BF%8E%E6%9D%A5%E5%A4%A7%E6%9B%B4%E6%96%B0%EF%BC%9ADrafts%205.0/"/>
      <url>/2018/04/15/apps/%E9%A1%B6%E7%BA%A7%20iOS%20%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E5%BA%94%E7%94%A8%20Drafts%20%E8%BF%8E%E6%9D%A5%E5%A4%A7%E6%9B%B4%E6%96%B0%EF%BC%9ADrafts%205.0/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.sspai.com/2018/04/15/b273d961f0e28c1b959cd73cc78db1e8.png?imageMogr2/quality/95/thumbnail/!700x233r/gravity/Center/crop/700x233" alt><br>经历了四个多月测试的 Drafts 5 终于上架了 App Store。</p><p>作为一款 iOS 平台的老牌笔记工具，Drafts 一直以来都受到各种需求层次的用户喜爱。如果你尚处在观望和犹豫的阶段，或许免费下载的 Drafts 5 就是你尝试这个强大工具的最好时机。不过，在你打开 App Store 之前请先读下去——本文将会告诉你 Drafts 为何受到各路 Power User 的追捧，并介绍 Drafts 5 此次的更新内容。</p><p>本文是我在少数派发布的稿件，请 <a href="https://sspai.com/post/44113" target="_blank" rel="noopener">点击此处</a> 跳转阅读本文剩余部分。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Drafts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SCP 基金会入坑指南</title>
      <link href="/2018/04/01/culture/SCP%20%E5%9F%BA%E9%87%91%E4%BC%9A%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97/"/>
      <url>/2018/04/01/culture/SCP%20%E5%9F%BA%E9%87%91%E4%BC%9A%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<p><img src="/2018/04/01/culture/SCP%20%E5%9F%BA%E9%87%91%E4%BC%9A%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97/Image%2025-03-2018,%205-25%20PM.gif" alt></p><blockquote><p>《SCP 基金会》（Special Containment Procedures Foundation）是一个有关于各种超自然现象、个体等等事件的系列作品，由全球各地的作者共同撰写。故事主体围绕一个名为「SCP基金会」的组织，该组织受各个主要国家政府的授权和委托，且其本身运作不受司法管辖权干扰，目标为收容世界上的异常现象、事件、个体等等，并统称为「收容物」。</p></blockquote><p>我猜想正在阅读本文的你已经或多或少地听说过了一些有关 SCP 基金会的内容，尤其是著名的 SCP-173「The Statue」。<br><img src="/2018/04/01/culture/SCP%20%E5%9F%BA%E9%87%91%E4%BC%9A%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97/Image%2025-03-2018,%205-13%20PM.jpeg" alt="The Statue"><br>事实上，The Statue 从某种意义上来说正是整个 SCP基金会的起源。</p><h1 id="基金会：起源"><a href="#基金会：起源" class="headerlink" title="基金会：起源"></a>基金会：起源</h1><p>基金会的故事最早起源于4chan论坛上的一篇贴子，它用一种冷淡的报告文体描述了 SCP-173 的特点，并迅速流传。自此，大量网友开始模仿这种风格进行创作，他们的作品多是描述一些反物理定律、反熵的诡异物事。如果你对这部分的起源故事感兴趣，可以阅读机核网的 SCP 起源系列，我不打算在此拙劣地复述一遍它里面提到的内容。<br>当然，你是否打算读这篇文章不重要——从来没有规定说任何 SCP 报告要求阅读者首先了解这一宇宙的历史。但是这个起源故事里的确有一点东西值得我们注意：正是 SCP 报告的这种冷淡的描述语气让读者感到毛骨悚然，也正是这种令人看似平淡面对的未知之恐惧成为了 SCP 系列的魅力所在。<br>链接：<br><a href="https://www.g-cores.com/articles/97025" target="_blank" rel="noopener">译介 | SCP基金会起源史其一 | 万物肇始</a><br><a href="https://www.g-cores.com/articles/97087" target="_blank" rel="noopener">译介 | SCP基金会起源史其二 | 博士们的战争</a><br><a href="https://www.g-cores.com/articles/97141" target="_blank" rel="noopener">译介 | SCP基金会起源史终章 | 漫长之旅 再会挚友</a></p><h1 id="什么是基金会？"><a href="#什么是基金会？" class="headerlink" title="什么是基金会？"></a>什么是基金会？</h1><blockquote><p>当其他人在阳光下生活时，我们必须在阴影中和它们战斗，并防止它们暴露在大众眼中，这样其他人才能生活在一个理智的，普通的世界中。我们控制，我们收容，我们保护。<br>——the Administrator</p></blockquote><p><img src="/2018/04/01/culture/SCP%20%E5%9F%BA%E9%87%91%E4%BC%9A%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97/Image%202018-4-1,%2012-21%20AM.jpeg" alt></p><p>你可以把基金会理解成一个组织，其目标是收容异常物品，个体及现象，防止它们出现在大多数普通人的日常生活中。确切来说，基金会的任务包括：</p><ul><li><strong>控制</strong><br>  基金会控制异常以防止它们落入平民或敌对组织手中，透过广泛观察及监测并采取行动尽早拦截它们。</li><li><strong>收容</strong><br>  基金会收容异常以防止它们的影响或效应散播，通过迁移，掩饰，或拆除它们或通过抑制或阻止公众传播它们的知识进行。</li><li><strong>保护</strong><br>  基金会保护人类免受异常的影响并保护异常本身直至它们被完全理解以及出现自它们的特性及行为上制定的新科学定理为止。如果异常被收容时被判定为过度危险，基金会或也会以将异常无效化或摧毁作为最后手段。<br>我们所阅读的条目，就是基金会为了用于建立收容措施所编写的数据库——这当然是中二的说法，数据库是由网友共同撰写出来的，而你也可以成为作者中的一员。不过在开始撰写之前，或许你应该先多读一读已存的优秀报告。<h1 id="如何优雅地阅读-SCP-报告"><a href="#如何优雅地阅读-SCP-报告" class="headerlink" title="如何优雅地阅读 SCP 报告"></a>如何优雅地阅读 SCP 报告</h1>你可以在 <a href="http://scp-wiki-cn.wikidot.com" target="_blank" rel="noopener">http://scp-wiki-cn.wikidot.com </a>阅读基金会报告的中文版本，这里有 SCP 系列编号 001～3999 的中文版报告。<br>不过这个 wiki 页面实际上有一些缺点——它采用的引擎最早是为电脑设计的，在手机端显示效果不佳：不仅排版会出现问题，并且字体还很小。最为致命的是，Safari 无法识别这个页面中的文章并启动阅读模式，这使得手机阅读的体验极差。<br>这一问题如何解决？我的方案是用稍后读应用来阅读。以 Pocket 为例，需要在 Pocket 里阅读一篇文章，首先就需要把它添加到列表里；但把上千条 SCP 报告一一手动添加显然不现实，我们需要找到一些办法。观察 SCP 基金会中文 Wiki 的页面不难发现，这些条目的链接都是形如 <code>http://scp-wiki-cn.wikidot.com/scp-***</code> 的格式，其中 <code>***</code> 是项目的编号。我们只需要在 Workflow 中用一个循环套上「Add to Pocket」动作就可以快速批量添加这些条目。<br>你可以<a href="https://workflow.is/workflows/9a90f6beb7844f0f94e4bd8a0cf3ea12" target="_blank" rel="noopener">点击此处</a>下载这一 Workflow。<h1 id="一些你应当知道的术语和信息"><a href="#一些你应当知道的术语和信息" class="headerlink" title="一些你应当知道的术语和信息"></a>一些你应当知道的术语和信息</h1>作为一篇入坑指南，在这部分我将给出一些供参考的资源之链接。</li><li><strong><a href="http://scp-wiki-cn.wikidot.com/object-classes#toc2" target="_blank" rel="noopener">项目分级</a>。</strong>每一件 SCP 项目都会被指定一个分级，这一分级体现了它的收容难度。</li><li><strong><a href="http://scp-wiki-cn.wikidot.com/security-clearance-levels" target="_blank" rel="noopener">人员分级</a>。</strong>每一个基金会的人员都会被指定安全权限和编级。</li><li><strong><a href="http://scp-wiki-cn.wikidot.com/guide-hub" target="_blank" rel="noopener">指导中心</a>。</strong>来自 SCP 中文维基站的指导信息，包括新手指南、写作指导等。</li><li><strong><a href="http://scp-wiki-cn.wikidot.com/personnel-and-character-dossier" target="_blank" rel="noopener">人员及角色档案</a>。</strong>如果你发现在你阅读的项目中有大量未知的人名，到这个页面去查查准没错。</li><li><strong><a href="http://scp-wiki-cn.wikidot.com/canon-hub" target="_blank" rel="noopener">背景设定</a>。</strong>基金会的很多条目之间都有着联动，这里的背景设定大约能解释其中的一部分。<br>此处的链接可能会有后续更新。<h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1>至此这篇「指南」应该做的事情大致已经完成了，鉴于最近我也很忙就只能匆忙收笔了<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。<br>值得注意的是，《指南》只是提供了一点入坑需要了解的基本信息和对应的链接。阅读本指南不代表你会对这个有着庞大背景设定的架空宇宙有全面的了解<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>，这背后的各种秘密还有待你去深挖。不过，这种交织而复杂的关系也正是 SCP 系列的魅力之一。<br>愿你永远保留对未知的恐惧。<br>题图源自：<a href="http://scp-wiki-cn.wikidot.com/the-original" target="_blank" rel="noopener">http://scp-wiki-cn.wikidot.com/the-original</a></li></ul><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">我真的还有很多想写，这些只能以后来补了。</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;">事实上基金会有着不止一个背景设定，所以并不是「一个宇宙」，至少有十几个！</span><a href="#fnref:2" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
      
      
      
        <tags>
            
            <tag> 指南 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我为什么把我的 Bear 换成了 Ulysses</title>
      <link href="/2018/03/09/apps/%E6%88%91%E4%B8%BA%E4%BB%80%E4%B9%88%E6%8A%8A%E6%88%91%E7%9A%84%20Bear%20%E6%8D%A2%E6%88%90%E4%BA%86%20Ulysses/"/>
      <url>/2018/03/09/apps/%E6%88%91%E4%B8%BA%E4%BB%80%E4%B9%88%E6%8A%8A%E6%88%91%E7%9A%84%20Bear%20%E6%8D%A2%E6%88%90%E4%BA%86%20Ulysses/</url>
      
        <content type="html"><![CDATA[<p>写作应用真的是一直令我头疼的一个问题，它们往往各有优点又各有不足。我先前以 Bear 作为主力写作应用，但终于还是切换到了 Ulysses。</p><h1 id="我的需求"><a href="#我的需求" class="headerlink" title="我的需求"></a>我的需求</h1><p>我对于写作应用有这样的需求：</p><ol><li><strong>支持 Markdown。</strong>这件事情应该不难理解。富文本编辑在移动设备上真的是噩梦，而我偏偏喜欢用 iPad Pro 写东西。</li><li><strong>支持导出的格式全面。</strong>这一点 Ulysses 和 Bear 都做到了，但是 Ulysses 显然更胜一筹：它支持导出为 .epub，而使用 Bear 时我需要先将文稿导出为 .docx，然后用 Pages转换为 .epub。此外 Ulysses 还支持发布到 Wordpress、Medium 等平台，这也是 Bear 做不到的。Workflow 固然能解决很多问题，但是集成在应用内的解决方案显然体验更好。</li><li><strong>对导出图片这件事友好。</strong>Bear 在这方面做得实在是让人难以满意。作为一款主打 Markdown语法的编辑器，它在将笔记导出为 .md 格式时居然不会导出其中的图片，还必须用 Workflow 辅助处理才能解决。而 Ulysses导出 .md 时会直接给出一个包含文稿和图片的压缩包，解压以后结构也是对应的，可以直接预览。我可以把这个压缩包直接放进 WorkingCopy，也可以把它直接传到我的博客上。虽然 Bear 和 Ulysses 都不支持在 iCloud 中直接显示文件<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>，但是在导出方面 Ulysses 实际上已经相当完美了。<br>总地来说，以上的需求很大一部分原因是因为我经常把写的东西发到博客，而我同时又希望在本地保留所写的原稿。Bear 和 Ulysses 都能很好地整理和保存这些文档<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>，但是 Ulysses 在导出这方面的功能是 Bear 无法相比的。</li></ol><h1 id="我需要「瑞士军刀」吗？"><a href="#我需要「瑞士军刀」吗？" class="headerlink" title="我需要「瑞士军刀」吗？"></a>我需要「瑞士军刀」吗？</h1><p>Bear 被称作是笔记应用中的「瑞士军刀」。它几乎什么都能做，保存网页内容、写一篇临时的稿件、拿来写长篇——我几乎都试过。它的表现基本让人满意，但问题是——把这么多功能寄托在一个应用上真的合适吗？<br>在整理思路方面我有 Drafts，在这方面完全可以说 Drafts eclipses Bear。而剪存这件事情一直是一个让我很纠结的问题：Bear 的「保存网页为 Markdown 文本」这一功能的确很强大，但是说到底它不是一个专职知识管理的工具，不具有云属性这一特点使它注定不能是一个完美的剪藏终端；笔记应用的本性又让它不适合整理存放文件。于是我感觉到，Bear 身上仿佛同时有着系统备忘录、Drafts、印象笔记、Devonthink 等一众应用的影子，却摆脱不了定位带来的荒谬感。<br>我绝不是说 Bear 不好——我真的很喜欢 Bear，这是一款设计出众且功能强大的应用。我开始放弃 Bear 仅仅是因为它和我的主要需求不匹配，这不代表它有问题。但是话说回来，把这一节的标题单独拿出来看，「瑞士军刀」型的应用究竟应该如何出现在我们的工作流中？<br>这是一个我想了大半个月的问题。我的结论是，我似乎无法为这些应用找到空间，它们什么都能做，但往往又不能完全满足我的要求；同时功能不够纯粹的这一特点又会让我对它产生困惑，不知道究竟用这把军刀里的哪一小块。一个成熟的工作流是一个定型的、不会经常变动的操作过程，一把瑞士军刀对我来说既无法融入砍木头的过程，又无法融入锉木板的过程；强行把它同时嵌入好几个工作流又会让这把刀的结构变得混乱不堪。这就是我为什么拒绝这类应用。</p><p>不过我还是想重申：这一切都是针对我的行为方式和需求展开的。肯定会有人和我有类似的想法，但是并非所有人如此。我拒绝瑞士军刀不代表它毫无用武之地，这事情还要看各位自己的需求和习惯了。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">这两者使用的是 cloud kit 来同步，对比MWeb是直接使用iCloud来同步的。后者速度相对较慢，但是文件是可以直接访问的。</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;">事实上我很喜欢 Bear 的标签管理系统，它比 Ulysses 的标签要灵活得多。</span><a href="#fnref:2" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
      
      
      
        <tags>
            
            <tag> Ulysses </tag>
            
            <tag> Bear </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>拯救Bear里的Markdown笔记</title>
      <link href="/2018/02/14/apps/%E6%8B%AF%E6%95%91Bear%E9%87%8C%E7%9A%84Markdown%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/02/14/apps/%E6%8B%AF%E6%95%91Bear%E9%87%8C%E7%9A%84Markdown%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>有件事一直困扰了我好久：Bear里的笔记在导出为HTML和Markdown时会丢失所有的图片。看看隔壁的Ulyssses，只要选择导出为富文本就会得到一个文件结构完整的zip压缩包，只需解压出来就可以得到可以直接预览的Markdown。这件事情导致我写文章时极力克制使用图片——如果导出到别处后还要再次手动添加图片，那可真是让人头疼。<br>不过好在这件事情终究是有解决方案的。如果想得到包含所有图片与文本信息的文件，导出.RTF或是.PDF格式就可以解决，所以真正的问题就是：如何转换RTF或PDF变为Markdown？</p><h1 id="用Workflow处理Rich-Text-Format-富文本"><a href="#用Workflow处理Rich-Text-Format-富文本" class="headerlink" title="用Workflow处理Rich Text Format(富文本)"></a>用Workflow处理Rich Text Format(富文本)</h1><p>Workflow是可以将富文本转化为Markdown的，所以这件事情乍一看还是很简单的。我们的大致思路是这样：用Sharesheet调出Workflow，首先用Workflow内置的「Make Markdown from Rich Text」动作把富文本转化为Markdown；然后用「Get Images from Input」从富文本里提取图片；最后把Markdown文本文件和图片保存到一个文件夹下，这样这个Markdown打开就可以预览到图片。如果要把它发送给别人，我们只需要保持Markdown和图片的相对位置不变，把它们打个压缩包就可以了。而如果要注意细节的话，我们还会记得要提取这个文件的首行，也就是Bear里显示的标题，去掉Markdown的标题语法「#」，用来作为文件名。此外iCloud和Workflow配合一直有点问题，也许应该选择用Dropbox来暂存文件。</p><h1 id="整理错误的链接"><a href="#整理错误的链接" class="headerlink" title="整理错误的链接"></a>整理错误的链接</h1><p>一切是不是都很美好？<br>只有一个问题：如果这样导出的文件，图片仍然加载不出来。<br>如果仔细观察导出的文件，我们就很容易发现问题了。我们预计图片的代码仍旧是诸如<code>![abcd](abcd.jpg)</code>的样式，然而实际上转换出来却成了：<code>![abcd](file:///abcd.jpg)</code>，这大概是由于Workflow在转换的时候引用了在它缓存中的图片地址导致的。既然我们的图片是独立保存的，只需要把Markdown文本中的图片链接替换掉就好了。<br>替换这件事情，还是交给正则表达式做比较方便。通过正则表达式，我们可以将图片的名称(例如abc.jpg)提取出来并组合成正确的图片地址，然后用它把错误的图片地址换掉，这样总算可以显示图片了。</p><p>在这个Workflow中，所有内容最终会被保存在<code>Dropbox/RTF Savior/文件名/</code>这个目录下。这个Workflow存在一个小问题：如果文件中只有一张图片<code>abc.jpg</code>，这张图片不会被保存为<code>/media/abc.jpg</code>，而会变成<code>media.jpg</code>。不过既然只有一张图片了，也许手动处理一下比用Workflow要来得快些。另外，偶尔转换出的Markdown会有格式问题，这是Workflow的锅。如果遇到这种问题，可以再用Bear导出一次Markdown文件来代替转换的Markdown文件——只是相比用Workflow一次性解决问题，这样不够优雅。<br>你可以<a href="https://workflow.is/workflows/653d64fc84f340d98616f598854f6d98" target="_blank" rel="noopener">点击此处</a>下载这个Workflow。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Bear </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Workflow模块化(二)：转换文本为图片</title>
      <link href="/2018/02/09/apps/Workflow%E6%A8%A1%E5%9D%97%E5%8C%96(%E4%BA%8C)%EF%BC%9A%E8%BD%AC%E6%8D%A2%E6%96%87%E6%9C%AC%E4%B8%BA%E5%9B%BE%E7%89%87/"/>
      <url>/2018/02/09/apps/Workflow%E6%A8%A1%E5%9D%97%E5%8C%96(%E4%BA%8C)%EF%BC%9A%E8%BD%AC%E6%8D%A2%E6%96%87%E6%9C%AC%E4%B8%BA%E5%9B%BE%E7%89%87/</url>
      
        <content type="html"><![CDATA[<p>对于使用Markdown写作的人来说，将文本转换成HTML、富文本等格式是常遇到的事情。Bear、Ulysses、MWeb等常用编辑器都具有这一功能。但是，倘若我想把Draft里的一些想法导出为图片分享给别人，又不想复制黏贴再删除，又该怎么办呢？Pin当然也可以做到这一点，但我计划用Workflow来完成，这样方便进行后续处理。<br>众所周知的是Workflow可以用来给HTML代码加上css，让导出的样式更丰富。在这样一条Workflow的基础上我增加了几步：</p><ol><li>将HTML转为富文本。</li><li>将富文本转化为pdf。</li><li>使用「Get Images from Input」动作将pdf转化为jpg格式。这一步骤得到的是这个由这个pdf的每一页组成的列表。</li><li>对这个列表执行「Combine Images」。</li></ol><p>由此输出的内容就是一张完整的长图了，可以在后面接其它动作来调用这张图片。由于Markdown和pdf的一些缺陷，这个模块有一定的问题：</p><ol><li>没法插入图片。</li><li>pdf的分辨率导致生成的图片字显得略小。</li><li>排版可能有点奇怪。<br>因此这个Workflow模块最适合拿来处理少量的纯文本。<br>另外，这个模块的优点在于：如果你的系统安装了第三方字体，你又懂得如何用css调用它们，你就可以让生成的内容嵌入字体。</li></ol><p>你可以<a href="https://workflow.is/workflows/6c66da0df9104b08b12a1c99a846a3d0" target="_blank" rel="noopener">点击这里</a>获取该Workflow。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Workflow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的任务管理系统</title>
      <link href="/2018/01/27/apps/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%97%B6%E4%BB%A3%E7%9A%84iOS%E9%94%AE%E7%9B%98%E6%95%88%E7%8E%87/"/>
      <url>/2018/01/27/apps/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%97%B6%E4%BB%A3%E7%9A%84iOS%E9%94%AE%E7%9B%98%E6%95%88%E7%8E%87/</url>
      
        <content type="html"><![CDATA[<p><img src="/2018/01/27/apps/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%97%B6%E4%BB%A3%E7%9A%84iOS%E9%94%AE%E7%9B%98%E6%95%88%E7%8E%87/15170312836520.jpg" alt></p><p>本文参与<a href="https://sspai.com/page/2017" target="_blank" rel="noopener">「少数派2017年度征文」活动</a>。</p><p><img src="/2018/01/27/apps/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%97%B6%E4%BB%A3%E7%9A%84iOS%E9%94%AE%E7%9B%98%E6%95%88%E7%8E%87/15170309946469.jpg" alt></p><blockquote><p>Many a finger has attempted an expedition to No Hand’s Land, but none have returned successful.</p></blockquote><p>这是著名的相机应用<a href="https://itunes.apple.com/cn/app/halide-raw%E6%89%8B%E5%8A%A8%E7%9B%B8%E6%9C%BA/id885697368?mt=8&amp;at=1000lHwn" target="_blank" rel="noopener">Halide</a>的设计者Sebastiaan在<a href="https://blog.halide.cam/how-to-design-for-iphone-x-without-an-iphone-x-e7226ef0616" target="_blank" rel="noopener">How to Design for iPhone X (without an iPhone X)</a>这篇文章中用来吐槽iPhone X屏幕过大的配图。从Halide滑动调节曝光参数、对焦滚轮置于屏幕底部等设计理念中可以看出这种「Reachable」理念的贯彻。<br>说起来，平常屏幕上最Reachable的区域还是键盘。自从学会双拼以后，我就发现自己对键盘(实体与虚拟)产生了一点依赖性。原先用图形界面能完成的事情，我如今更喜欢用键盘来完成。为此我想分享一下在过去的2017年中我总结出来的一套用键盘输入代替图形界面操作的工作流，主要涉及Drafts和Workflow这两大效率软件。效率这件事情本身是很主观的定义——所以我这套东西是否适合各位读者，也就仁者见仁智者见智了。</p><h1 id="何谓键盘效率"><a href="#何谓键盘效率" class="headerlink" title="何谓键盘效率"></a>何谓键盘效率</h1><p>在开始谈这套工作流之前，我想先聊聊它的目的，也就是创造效率。<br>「效率」这件事本身是一个很复杂的目标，带有强烈的主观性，柯林斯词典对于efficiency这个词的定义是「不浪费时间和精力地完成一件任务的能力」。当代各种自动化的应用、工作流的意义在于替用户去完成复杂但具有一定规律的工作，它们因此具有节省时间和精力的作用。在谈效率之前，无可避免地要牵涉到效率的意义。如果具体说这个话题，完全可以就此再写一篇文章，因此我只想简短地说说我的看法。<br>在实践了一年多的GTD并长期折腾Workflow、Drafts等应用后，我得出的结论是：应当辩证地看待效率这件事情。追寻效率不是养成分秒必争的习惯，而是掌握自己能掌握的时间。举例来说，使用GTD应用没有必要事无巨细地把全部能做的事情都写进inbox，而是注重把重要的或是易忘的事情放进去。同样，对待这套工作流，也没必要把所有需求全部放到键盘上，正确的打开方式应该是——用键盘把真正的「痛点」解决掉。<br>接下来我们来看看键盘效率。作为一种追寻效率的途径，评价键盘的意义离不开节省时间和节省精力这两方面。</p><h2 id="键盘效率之于节省时间"><a href="#键盘效率之于节省时间" class="headerlink" title="键盘效率之于节省时间"></a>键盘效率之于节省时间</h2><p>综合来看，时间这个指标是最容易量化和比较的。Markdown的发明者John Gruber就曾经谈到过，用键盘完成重复的操作必然快于鼠标，就算寻找快捷键会花费时间，重复的操作也能省下更多的时间。推广地考虑，假如用户对于快捷键有足够的熟练度(常见的Ctrl-C、Ctrl-V、Ctrl-Z等就是很好的例子)，就可以很大程度上减少寻找快捷键花费的时间。而放在iOS上来看，虚拟键盘本身不再起到Shortcut的作用，取而代之的是自动化时代的标配——键盘扩展条。这个键盘扩展区域可以同时包含快捷键、快速短语等功能，并且往往能够做到更多。但是我认为这些东西可以一并归入「键盘」的范畴，因为这两者在屏幕上的位置是相邻的，键盘扩展可以看作键盘的一个延伸。而鉴于点击扩展条上的一个快捷键不需要过多地思考(或<a href="http://www.asktog.com/TOI/toi06KeyboardVMouse1.html" target="_blank" rel="noopener">Bruce Tognazzini所谓的「experience amnesia」</a>)，加之键盘扩展往往与各种能够节省时间的脚本与自动化流程相结合，从某种程度上来说这一自动化时代的产物在iOS平台上的效果更胜于旧时代的键盘操作——这是键盘效率在节省时间方面的体现。</p><h2 id="键盘效率之于节省精力"><a href="#键盘效率之于节省精力" class="headerlink" title="键盘效率之于节省精力"></a>键盘效率之于节省精力</h2><p>除去不浪费时间，不浪费精力这一点也必然要受到评价。这个「精力」到底是指什么？笼统地讲，它是用户在完成操作过程的时候对于操作是否繁杂的感受。从某种意义上来说，移动鼠标并点击会消耗精力；操作图形界面会消耗精力；在键盘上按下按键同样也会消耗精力。回想上次使用Word的情景，你不小心误删除了一整段内容，这时是鼠标移到屏幕上方的工具栏点击撤销更快还是直接按下Ctrl-Z更快？由此可见，对于熟练的使用者，键盘的确能在大部分时间更省力，因为手在键盘上移动的距离往往比在鼠标或在图形界面上移动的距离要短很多。事实上，即使在iOS这个移动平台上，这件事情也不例外；就算iPhone6以后的机型有Reachability辅助，单手跨越半个屏幕去操作图形界面依然是挺麻烦的事情。相反，操作虚拟键盘时，我们的手停留在屏幕的下半部分，也即最容易触及的位置。<br>曾经有个网站叫 <a href="https://onetapless.com" target="_blank" rel="noopener">onetapless</a>，专门收录各种自动化效率方案(可惜已经停止更新很久了)，它的名字大约就是对「效率」最好的定义：<strong>节省精力，就是用更少的点击取代更多的点击；用Reachable的点击取代Unreachable的点击</strong>，以达成效率的目标。这样看来在iOS上寻求效率的一种方法就是键盘与快捷键和脚本的组合了，而这是键盘效率在节省精力方面的体现。</p><h2 id="键盘效率的缺陷"><a href="#键盘效率的缺陷" class="headerlink" title="键盘效率的缺陷"></a>键盘效率的缺陷</h2><p>任何事物都具有两面性，我并不想故意去掩盖键盘「不那么效率」的地方。<br>首先，键盘输入对于准确度有一定要求。图形界面只需要用户去点击一块区域即可触发反馈，而键盘输入的指令则不能有偏差。换而言之，键盘具有更低的容错率。其次，键盘输入对熟练度也有要求。如果输入速度不够快，那么这件事情并没有达到节省时间的效果，或许甚至会更消耗精力。<br>但是瑕不掩瑜，这些缺陷并不是我们弃用键盘的理由。<strong>进一步发掘键盘的潜力，就是要用现代化的方法规避这两大问题，使效率最大化。</strong>对于输入的准确性，通过键盘扩展条快速插入短语的方式可以减少输入错误的情况；而双拼和现代输入法的联想则可以使输入更快速。</p><p>综合来讲，键盘这一诞生远早于图形界面的交互方式在现今的时代并未过时。或许会有很多人倾向于语音、体感等新兴的交互方式，但对于熟练的用户来说，键盘永远是最快的。过去的命令行是用键盘进行全部的操作和控制，而如今键盘不再是控制系统的主力，但由它启动的自动化流程却带来了更多的生产力。</p><h1 id="工作流总览"><a href="#工作流总览" class="headerlink" title="工作流总览"></a>工作流总览</h1><p>这套工作流的原理概括来说其实很简单：<strong>用Drafts输入内容，然后通过Drafts的Action运行Workflow，并将合适的内容作为参数传递给Workflow。</strong>而对应的Workflow动作的类型设置为Action Extention，这样就可以接收来自Drafts的文本作进一步处理。有了这个逻辑的指导，我们实际上可以弄出非常多的花样。<br>最终这个工作流实现的效果是：通过键盘在Drafts内输入一段文本，文本本身可能包含一些用于区分其处理方式的指令，然后按下键盘扩展条上的某个指向一个Action的按钮；这个Action随后触发一个Workflow；Workflow对接收的文本进行处理后进一步分发。如此，我们可以只使用键盘及扩展条，对应到屏幕上也就是开篇图片中的「REACHABLE PLAINS」来完成输入工作，达成上一节提到的效率。</p><h1 id="为什么选择Drafts和Workflow？"><a href="#为什么选择Drafts和Workflow？" class="headerlink" title="为什么选择Drafts和Workflow？"></a>为什么选择Drafts和Workflow？</h1><p>除去使用键盘的便利性，作为iOS最有名的文本编辑器之一，Drafts自然有它的独到之处。<br>第一是Drafts本身的收集和分发特性。Drafts打开即写的形式很适合用来作为输入终端使用。理论上任何文字输入应用(例如原生备忘录)都可以代替Drafts在这个工作流中的位置，只需要输入文字然后在分享菜单中运行Workflow即可。但是Drafts还有一重特性：运行一个动作后可以直接将当前的文档存档或删除。假如我想直接把文档内容发送到另一处，我显然会希望运行动作后直接删除我输入的东西，这时Drafts的优势就体现出来了：它能够以一个文本编辑器的强大功能和扩展来支持这种「终端」式的操作行为，不是终端却又胜过终端。第二在于Drafts的键盘扩展对文字处理的能力支持很好，用键盘扩展可以快速插入很多东西，实现类似自动补全的输入效果。<br>而Workflow更是被誉为「带着镣铐跳舞」的效率应用，在iOS平台上率先打破了应用与应用之间的界限。理论上Pythonista也能完成Workflow的工作，但是Workflow胜在学习成本低、简短的动作制作快速——这也是「效率」的体现。有一种观点认为如果花费在为达成效率而制作的工作流上的时间多于这个工作流能节省的时间，那这种方法就是不具效率(inefficient)的。这种观点没有考虑到精力这一方面的节省，不过大体上还是可以拿来参考的。对于没有花费大量时间学习Python的人来说，显然还是用Workflow更效率——只要掌握方法。</p><h1 id="用Workflow分发文字的几个方法论"><a href="#用Workflow分发文字的几个方法论" class="headerlink" title="用Workflow分发文字的几个方法论"></a>用Workflow分发文字的几个方法论</h1><p>Workflow作为这个键盘工作流中的信息分发枢纽，其重要性不言而喻。不过显而易见的是，各人的对于分发的目的地需求是不同的，因此我想先介绍几个介乎「术」和「器」之间的指导方法。</p><h2 id="执行多行任务"><a href="#执行多行任务" class="headerlink" title="执行多行任务"></a>执行多行任务</h2><p>自动化处理流程往往是对大量信息处理的过程，包含对多个项目的操作。但是Drafts或是任何等位的文字编辑应用导出的文本都是一个整体，所以需要对这段文本先进行处理。Workflow内置的Split Text动作可以按照指定分行符(通常用换行)将输入的文字分离，然后合成一个列表作为输出，随后接一个Repeat With Each即可对每一行文字单独执行处理流程。<br><img src="/2018/01/27/apps/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%97%B6%E4%BB%A3%E7%9A%84iOS%E9%94%AE%E7%9B%98%E6%95%88%E7%8E%87/15170310551395.jpg" alt="用 Workflow 执行多行任务"><br>大体上这个思路就是如图所示的结构，在Repeat的循环中再包含具体的处理流程。这样在Drafts中只需输入完每一个待处理的内容单位后换行(假如Split Text选择New Lines，那就只需换行而无需按照Markdown换行那样按Tab)，再执行该Workflow，那么每一行的内容单位就会分别被执行相同的操作流程。</p><h2 id="识别不同指令"><a href="#识别不同指令" class="headerlink" title="识别不同指令"></a>识别不同指令</h2><p>多行同时处理的缺陷在于每一行都是经过同一个Workflow流程，因此经过的处理流程是一样的。但假如我们的预期中每一行受到的处理略有差别，例如某一行的内容最终被送往到GTD应用的Inbox列表，而另一行则被送到Works这个列表，那又该怎么办呢？<br>在依靠键盘完成所有事情的思路指导下，方法很显然：对于不同的操作，在制作Workflow时就自我约定好几个有效的指令，然后用<a href="http://deerchao.net/tutorials/regex/regex.htm" target="_blank" rel="noopener">正则表达式</a>来识别指令。<br><img src="/2018/01/27/apps/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%97%B6%E4%BB%A3%E7%9A%84iOS%E9%94%AE%E7%9B%98%E6%95%88%E7%8E%87/15170311306210.jpg" alt="识别指令"><br>Workflow中内置的Match Text就是通过正则表达式来识别输入的文本，从中提取出符合特征的文本段的。例如默认的<code>[0-9a-zA-Z]</code>匹配的就是单个数字或字母，所有符合结果的内容会被编组成一个列表作为输出。当然你也可以直接输入一段内容来匹配，例如输入<code>abcd</code>，这个动作便会匹配所有的「abcd」。有关于具体如何使用正则表达式的语法，你可以在<a href="http://deerchao.net/tutorials/regex/regex.htm" target="_blank" rel="noopener">这个页面</a>查看。<br>我个人的习惯是用一个符号加上内容来代表指令，例如<code>@inbox</code>这样的格式。特殊符号的意义是便于识别出整段文字中代表指令的部分。此外，在第一次匹配后，可以再接一个Match Text匹配<code>\w*</code>(表示除符号以外的任意字符串)来去除特殊符号，这样匹配出来的最终结果就可以直接作为魔法变量拿来用了。</p><h2 id="使用缩写指令"><a href="#使用缩写指令" class="headerlink" title="使用缩写指令"></a>使用缩写指令</h2><p>由于前面识别出来的指令最终直接用于Workflow的动作，因此必须要输入完整。但是我的Todoist中有一个Project叫「Books&amp;Movies」，如果想向它添加内容，每次都打一遍那个and符号是不现实的，更为合理的使用方法显然是打一个类似于<code>@bm</code>这样的缩写。为此我决定再引入一个Dictionary用来存放缩写-全称的组合。Dictionary是一种数据格式，由多组键值(key)对应数据值(value)的组合构成，键值是必须唯一的。在用上一节的匹配方法找到缩写的指令后，把这个指令和Dictionary中的所有键值匹配一遍，如果有任何相等的，则输出那个键值对应的数据值。由于流程图过长，你可以<a href="http://ockrsftfh.bkt.clouddn.com/2018-01-18-15162578943513.jpg" target="_blank" rel="noopener">点击这里</a>查看。<br>而只需将这个流程图中的Set Variable改为Add to Variable，我们就可以匹配连续多个指令并合成一个列表作为输出。</p><h1 id="几个例子"><a href="#几个例子" class="headerlink" title="几个例子"></a>几个例子</h1><p>参考以上几个方法，我做了几条Workflow来改善日常的输入效率。</p><h2 id="Todoist——非自然语义处理"><a href="#Todoist——非自然语义处理" class="headerlink" title="Todoist——非自然语义处理"></a>Todoist——非自然语义处理</h2><p>众所周知的是Todoist的任务输入功能是有自然语义处理功能的，能够识别出一些日期和重复等内容。尽管如此，我还是觉得添加任务有时候是一件不那么愉快的事情——问题出在Todoist对于已添加的任务的编辑入口藏得太深，而图形界面在输入的时候又并不总是很方便(更何况我还用了一段时间的浏览器版)。这也就是我为何开始尝试用Workflow来添加任务。<br>我并不想就这个Workflow的技术细节再花费篇幅，所有有关于它的信息可以<a href="http://northwind2018.com/taskist_zh.html" target="_blank" rel="noopener">点击此处</a>来查看。我更希望在这里谈谈这个Workflow背后的逻辑，也就是我的GTD收集理念：可回顾的输入过程。GTD的收集往往是思路整理的过程，在这个过程中任何已写下的东西都有可能会重新被修改。这也就是为什么Todoist输入完一条就按下回车确认的输入方式让我觉得略微不适，而在Drafts里有条理地整理完所有思绪再一次性创建任务才是符合逻辑的输入方式。诚然，这样输入就等于抛弃了Todoist自带的自然语义处理，但是可自定义的灵活缩写和键盘扩展支持的快速插入功能足以弥补这一缺陷。</p><h2 id="Quizlet——更流畅的添加体验"><a href="#Quizlet——更流畅的添加体验" class="headerlink" title="Quizlet——更流畅的添加体验"></a>Quizlet——更流畅的添加体验</h2><p>Quizlet的应用在学习集内添加单词的入口很深，算来从主界面到开始添加单词合计需要点按4次，其中还有一次在屏幕的右上角，这样的体验可想而知是很差的。<br>幸好Quizlet提供了完善的API供我们调用，少数派曾有一篇<a href="https://sspai.com/post/37895" target="_blank" rel="noopener">利用 Workflow和API 快速添加 Flashcards 背单词</a>就提及了用API添加单词的方法，参考这篇文章的思路，我们只需打开Drafts，输入生词，运行Workflow即可快速添加单词，而不会打断阅读的思维过程。</p><p>类似这样的例子还有很多，这样的一个组合实际上可以做到很多事情，我这里的两个例子也仅仅是起到抛砖引玉的作用。</p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>面对同一条的道路，不同的人会造出不同的轮子。这篇文章仅是我对于我心目中的轮子的阐述和解释，这个轮子未必对所有人都是最完美的，但是其背后的逻辑是我认为最适合这条道路的。如果你有与我不同的看法，欢迎在此提出，理性讨论。</p><hr><p>题图来自<a href="https://www.freepik.com/free-vector/graphic-designer-s-workspace_1321409.htm" target="_blank" rel="noopener">Freepik</a>。</p>]]></content>
      
      
      
        <tags>
            
            <tag> π </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Workflow模块化(一)：反转列表</title>
      <link href="/2018/01/15/apps/Workflow%E6%A8%A1%E5%9D%97%E5%8C%96(%E4%B8%80)%EF%BC%9A%E5%8F%8D%E8%BD%AC%E5%88%97%E8%A1%A8/"/>
      <url>/2018/01/15/apps/Workflow%E6%A8%A1%E5%9D%97%E5%8C%96(%E4%B8%80)%EF%BC%9A%E5%8F%8D%E8%BD%AC%E5%88%97%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<p>从1.7.1版本开始，Workflow就支持「Run Workflow」这个动作，可以在一个已有的Workflow中运行另一个Workflow。由于Workflow本身就是把代码集成化为模块来组成Workflow动作，所以这种方式调用的Workflow本身在当前运行Workflow里也可以看作是一个模块。由此又可以看出，作为模块用的Workflow，必然是要接受一个输入的，并且大部分来说都有输入(否则便没有作为模块被调用的意义了)。</p><p>Workflow本身并没有反转列表内容的动作，因此我打算做一个Workflow当成模块来调用。要完成这件事情，无非是依次取出输入列表的最后一项添加到一个新列表里。「新列表」这件事情可以直接用<em>Add to Variable</em>动作完成，它会自动生成一个列表。然而Workflow又没有把列表内项移除的动作(这件事情也可以写一个模块，但是模块内引模块似乎不太好)，因此还是用取Index的方法最好。这个方法就类似于Python用While代替for循环——循环x次，x是列表内的元素个数。每次循环取出第n项，n一开始等于x，每次循环完成减一。这样n=0时正好取完。<br>你可以<a href="https://workflow.is/workflows/897af64d14f841da9d48bf92e4c2be43" target="_blank" rel="noopener">点击这里</a>下载该Workflow。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Workflow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Moment一周使用体验：重新思考我与手机的关系</title>
      <link href="/2018/01/01/apps/Moment%E4%B8%80%E5%91%A8%E4%BD%BF%E7%94%A8%E4%BD%93%E9%AA%8C%EF%BC%9A%E9%87%8D%E6%96%B0%E6%80%9D%E8%80%83%E6%88%91%E4%B8%8E%E6%89%8B%E6%9C%BA%E7%9A%84%E5%85%B3%E7%B3%BB/"/>
      <url>/2018/01/01/apps/Moment%E4%B8%80%E5%91%A8%E4%BD%BF%E7%94%A8%E4%BD%93%E9%AA%8C%EF%BC%9A%E9%87%8D%E6%96%B0%E6%80%9D%E8%80%83%E6%88%91%E4%B8%8E%E6%89%8B%E6%9C%BA%E7%9A%84%E5%85%B3%E7%B3%BB/</url>
      
        <content type="html"><![CDATA[<p><img src="/2018/01/01/apps/Moment%E4%B8%80%E5%91%A8%E4%BD%BF%E7%94%A8%E4%BD%93%E9%AA%8C%EF%BC%9A%E9%87%8D%E6%96%B0%E6%80%9D%E8%80%83%E6%88%91%E4%B8%8E%E6%89%8B%E6%9C%BA%E7%9A%84%E5%85%B3%E7%B3%BB/15147768054984-8018742.jpg" alt></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我其实一直很反感长辈们的「手机一点好处也没有」这一类观点。日常生活中，我也尽力把手机作为一个效率工具来辅助生活和学习。不过我也承认自己难免有拿起手机就放不下的时候。在安卓上有许多应用能够监控每天的使用时长，甚至能强制禁用手机。在iOS上，受到系统诸多权限限制，这类应用看似是不太可能被开发出来的，然而我还是在App Store找到了一款——Moment。</p><h2 id="什么是Moment"><a href="#什么是Moment" class="headerlink" title="什么是Moment"></a>什么是Moment</h2><p>Moment的主要功能就是在后台记录你当日的屏幕使用时间。与安卓上的同类应用相比，Moment的原理非常独特。在iOS上，大部分应用置于后台都会进入假死状态，只有少部分调用定位、音乐等接口的应用和一部分联网功能能够在后台刷新。Moment的解决方案是调用了定位权限，使得它可以一直存活在后台，这种行为当真可以说是「带着镣铐跳舞」了。如此，只需开启定位，Moment便会记录下你使用手机的每一分。这一周使用下来我认为这个数据还是相当准的(并且也让我直面了自己可怕的使用时间)。你可以在Insights(洞察)功能内查看你的使用数据统计，包括按照周、月、季度查看趋势和超限日期等。除此之外，Moment会每隔一定时间(默认15分钟)发送通知提醒你当日的使用时间。若超过使用上限，Moment更会不断地弹出通知。</p><p><img src="/2018/01/01/apps/Moment%E4%B8%80%E5%91%A8%E4%BD%BF%E7%94%A8%E4%BD%93%E9%AA%8C%EF%BC%9A%E9%87%8D%E6%96%B0%E6%80%9D%E8%80%83%E6%88%91%E4%B8%8E%E6%89%8B%E6%9C%BA%E7%9A%84%E5%85%B3%E7%B3%BB/15104182866897.jpg" alt="15104182866897"></p><p>Moment还有独特的监控电池使用时间的功能：只需每隔一段时间在设置中的「电池」界面截图，Moment会自动收集截图，并统计每个App使用的电池时间(然而这个功能目前只支持英语)。<br>除了监控日常使用时间，Moment也在控制手机使用时间这方面下足了功夫。虽然无法强制用户停下，但Moment还是采取了一些策略的。「Coach」是它的一项独特功能，通过让用户参与一系列活动(例如一天不拍照，删除一个最常用的App等)来帮助用户放下手机，感受生活。这项功能可不仅仅是希望用户控制手机时间——它更多地鼓励用户思考自己与手机之间的关系，让我们更好地使用这一工具。</p><h2 id="我这一周的体验"><a href="#我这一周的体验" class="headerlink" title="我这一周的体验"></a>我这一周的体验</h2><p><img src="/2018/01/01/apps/Moment%E4%B8%80%E5%91%A8%E4%BD%BF%E7%94%A8%E4%BD%93%E9%AA%8C%EF%BC%9A%E9%87%8D%E6%96%B0%E6%80%9D%E8%80%83%E6%88%91%E4%B8%8E%E6%89%8B%E6%9C%BA%E7%9A%84%E5%85%B3%E7%B3%BB/15104183024171.jpg" alt><br>这是我这周的使用记录(安装的第一天没有全天的记录所以不算在内)。这周我同时参加了Coach中的「Bored&amp;Brilliant」课程。开始使用的前几天可以说是相当难熬，使用手机的每一刻都充满了负罪感(其实要的就是这种效果)。第三天我开始发现一点诀窍：关键在于让自己完全沉浸在手头的事情里。Hum曾在10月31日的Power+中提到过“心流”的概念，各位也可以参考一下。<br>周日实在是无聊，我就把很久不用的Kindle又拿了出来。在没有手机之前我的闲暇时光不外乎看书，阅读也是很好的解除对手机依赖的方法。<br>回顾这一周，手机使用时间比以前少了十来个小时，而我也并未因此觉得很空虚，相反还读了一整本书。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>我仍记得自己以前用安卓手机时也用过一款应用，能在指定时间内强行锁定手机上大部分应用。我一度以为它可以让我集中，直到我有一天忍不住直接把它卸载了。作为iOS上的应用，Moment毕竟受到沙盒的限制而无法强制用户停止使用。这也就是说，只有用户有意控制自己的手机使用时，Moment才是有效果的；它只是一个提醒你的工具、一个让你时刻感受到「我的使用时间是被记录下来的」的提醒，而不是来控制你的Supervisor。换而言之，Moment的作用对象其实不是手机，而是用户本身。只有明白自己安装Moment的意义，我们才能更好地使用它。<br>你可以在 <a href="https://itunes.apple.com/cn/app/moment-screen-time-tracker/id771541926?mt=8&amp;uo=4&amp;at=1000lHwn" target="_blank" rel="noopener">App Store</a> 下载Moment。应用下载免费，有<strong>25</strong>元的内购，能够解锁Insights和电池追踪等高级功能。你也可以访问 <a href="inthemoment.io">inthemoment.io</a> 来详细阅读Moment的作者提供的介绍。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>我的任务管理系统</title>
      <link href="/2017/12/31/apps/%E6%88%91%E7%9A%84%E4%BB%BB%E5%8A%A1%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
      <url>/2017/12/31/apps/%E6%88%91%E7%9A%84%E4%BB%BB%E5%8A%A1%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<p><img src="/2017/12/31/apps/%E6%88%91%E7%9A%84%E4%BB%BB%E5%8A%A1%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/15143909131032.jpg" alt="15143909131032"></p><p>本文整理自我在<a href="http://sspai.com" target="_blank" rel="noopener">少数派</a>第18周Power+预告下的评论。题图来自<a href="http://unsplash.com" target="_blank" rel="noopener">Unsplash</a>**</p><p>现在用的任务管理工具是Todoist，目前用了两个月感觉还不错，Karma刚上6500。</p><p>原先折腾过各种各样的任务管理应用，从最早的Wunderlist到TaskCode我都试过，并没有发现适合自己的应用。后来我用了挺久的2Do，一直觉得大部分功能和Todoist差不多并且相对便宜所以选择了它。再后来有了iPad Pro以后开始发现它的Dropbox同步实在是慢，梯子完全正常的情况下却会用很久还同步不全，最后忍无可忍切了Todoist。</p><p>除了同步这件事情，选择Todoist的另一个原因就是它的定位。个人还是挺喜欢折腾的，Todoist的过滤器和文件夹视图有相当大的自定义空间，同时又不像OmniFocus那样具有很高的学习成本；但是相比轻量级的Microsoft Todo和Things又有更高的上限。</p><p>从使用2Do的时候我就养成一个习惯：每天花一点时间把当天的作业和需要复习知识点整理在Drafts里面，再一键发送到GTD应用里。在我使用的还是2Do时，我用的是一个网上扒来的Drafts Action并加以修改，其原理是基于JavaScript和URL Schemes。后来用了Todoist，URL Schemes提供的自定义选项不够多了，于是就用Drafts把文本发送到Workflow，用Workflow内置的Todoist接口来处理。此外我还喜欢考前先整理知识大纲，把关键内容和没搞懂的点记下来，然后全部发送到任务管理应用再依次复习，这样不容易遗漏。用Drafts输入的好处就是效率高，尤其是用Smart  Keyboard输入，速度很快而且不必在繁复的图形界面上操作，使得任务的输入步骤变得舒服很多。<br>另外我还把Todoist部分地当成一个清单来用，我建立了一个「Books&amp;Movies」的Project，用来作为记录想读的书和想看的电影的清单。这么做本身应该是不遵守GTD的理念或者这类应用的本质的，不过的确也没什么冲突嘛。</p><p>总之开始尝试着用任务管理应用来管理自己之后，我确实感到生活更加有条理、purposeful了；而我本人也挺享受这个getting things done的过程。</p>]]></content>
      
      
      
        <tags>
            
            <tag> π </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何极偏执地使用16G的iPhone 5S</title>
      <link href="/2017/12/31/apps/%E5%A6%82%E4%BD%95%E6%9E%81%E5%81%8F%E6%89%A7%E5%9C%B0%E4%BD%BF%E7%94%A816G%E7%9A%84iPhone%205S/"/>
      <url>/2017/12/31/apps/%E5%A6%82%E4%BD%95%E6%9E%81%E5%81%8F%E6%89%A7%E5%9C%B0%E4%BD%BF%E7%94%A816G%E7%9A%84iPhone%205S/</url>
      
        <content type="html"><![CDATA[<p><img src="/2017/12/31/apps/%E5%A6%82%E4%BD%95%E6%9E%81%E5%81%8F%E6%89%A7%E5%9C%B0%E4%BD%BF%E7%94%A816G%E7%9A%84iPhone%205S/15147291371876.jpg" alt></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>直到年末换了个128G的iPhone 6S之前，我一直用着一台16G的iPhone 5S(后文简称「5S」)。这台5S陪我度过了2017的绝大部分时间，因此我想聊聊我用它的<strong>艰难经历</strong>。</p><h1 id="我还剩多少容量？"><a href="#我还剩多少容量？" class="headerlink" title="我还剩多少容量？"></a>我还剩多少容量？</h1><p><img src="/2017/12/31/apps/%E5%A6%82%E4%BD%95%E6%9E%81%E5%81%8F%E6%89%A7%E5%9C%B0%E4%BD%BF%E7%94%A816G%E7%9A%84iPhone%205S/15147274880128.jpg" alt="我的剩余容量"><br>如果用过16G的手机，你就会理解人生的艰难。存储空间和你想要用的东西永远水火不相容，严重的时候每天都会弹出数次「存储空间已满」的提示，当手机剩下空间不到大约30MB的时候甚至会变得极其卡顿，因为它运行任何东西前都要先清除之前留下的缓存。因此，学会让它保持平衡(大约留下300MB~1000MB的空间)就极其重要。<br>我的这台5S系统版本为10.3.2，总容量为12.36GB。每天我都会去<strong>设置-通用-存储空间</strong>看一看自己还剩下多少空间，评估一下当前手机的状况。这一年来，我的相册大约平均占用1.2GB的空间，而我又不愿意打开「优化相册存储空间」的选项，因为它会使得各种应用访问相册时经常出现无法读取图片的现象。因此相册始终在我的手机里占有很大一部分空间。每天我都要回顾一下自己当天新增的图片，删除掉不可能会用到的。在我买了iPad Pro之后，我甚至不得不把这部5S的iCloud同步给关掉，避免iPad上的一大堆东西一块同步过来。虽然iPhone 5S的镜头只有800万像素，但我还挺喜欢拿它摄影——于是一大堆图片的调整工具和又无可避免地要占用空间。这也就是标题中「偏执」的来源：如何在向存储空间妥协的情况下保证自己仍然能做自己想做的事？大部分人的选择可能是时不时「忍痛割爱」一下，而我的选择是：寻找更高效的替代。</p><h1 id="能用浏览器就不用应用"><a href="#能用浏览器就不用应用" class="headerlink" title="能用浏览器就不用应用"></a>能用浏览器就不用应用</h1><p>无论怎么看，各类应用都是存储空间的大头，因此清理空间也得从它们中下手。一个最简单的方法就是——使用(往往体验稍差的)在线版。假如这些在线版能够满足我的需求，只需将它们添加到主屏幕，就可以用来代替原来的应用了。</p><h2 id="Todoist的在线版"><a href="#Todoist的在线版" class="headerlink" title="Todoist的在线版"></a>Todoist的在线版</h2><p>可能很多人不知道，Todoist是有<a href="https://todoist.com/app?lang=zh_CN" target="_blank" rel="noopener">在线版</a>的，而且功能还挺强大。<br><img src="/2017/12/31/apps/%E5%A6%82%E4%BD%95%E6%9E%81%E5%81%8F%E6%89%A7%E5%9C%B0%E4%BD%BF%E7%94%A816G%E7%9A%84iPhone%205S/15147210856534.jpg" alt="Todoist的在线版"><br>这个在线版支持添加任务，并且也有智能语法。此外，这个页面甚至可以离线运行一段时间(只要脚本的缓存没有被清除)。至于添加任务这件事情，我选择用Drafts加上Workflow来完成。将该页面添加至主屏幕后，图标甚至看起来和原来的应用一模一样；加之Todoist的在线版不像其它应用的在线版会限制很多功能，其综合体验完全不输应用版。<br><strong>节省：65MB</strong></p><h2 id="淘宝和亚马逊"><a href="#淘宝和亚马逊" class="headerlink" title="淘宝和亚马逊"></a>淘宝和亚马逊</h2><p>这两者都有网页版，并且都能正常地搜索、收藏、购买商品。淘宝的客户端臃肿不堪，而亚马逊的客户端显示方式如同是内嵌了网页制作出来的。相较之下，使用它们的网页版似乎是个不错的选择。<br><strong>节省：195MB + 90MB = 285MB</strong></p><h1 id="一些-基本上-可行的替代品"><a href="#一些-基本上-可行的替代品" class="headerlink" title="一些(基本上)可行的替代品"></a>一些(基本上)可行的替代品</h1><h2 id="Workflow解决了多少问题"><a href="#Workflow解决了多少问题" class="headerlink" title="Workflow解决了多少问题"></a>Workflow解决了多少问题</h2><ul><li>代替AnyFont。参考 <a href="https://sspai.com/post/36457" target="_blank" rel="noopener">Workflow：Google Fonts 字体下载 &amp; iOS 字体安装和使用</a> 一文。通过文中提供的<em>Install Font</em>这个Workflow，可以便捷地为设备安装字体。<br><strong>节省：(可以忽略不计的)6MB</strong></li><li>代替空气质量应用。参考我以前写的 <a href="http://northwind.bitcron.com/post/2017/03/07/shi-yongworkflow-cha-xun-kong-qi-zhi-liang" target="_blank" rel="noopener">使用Workflow查询空气质量</a> 一文。我后来有发文章补充说这个Workflow可以用Get Dictionary Value这个动作来优化，可惜那篇补充的文章在博客迁移的时候不知怎么没了。<br>简单来说，这个Workflow的原理就是用Get Contents of URL动作向 <a href="envicloud.cn">envicloud.cn</a> 提供的api发起请求，然后略微处理一下返回的数据并显示。由于这个Workflow包含个人私钥，这里就不放出了。不过在写出这个Workflow之后，我就把查询空气质量的软件给卸了。<br><strong>节省：85MB</strong></li></ul><h2 id="QQ→Tim"><a href="#QQ→Tim" class="headerlink" title="QQ→Tim"></a>QQ→Tim</h2><p>Tim是腾讯今年发布的一款应用，其沿用了QQ的账号系统，但是整合了各种办公和协作的功能，同时去除了QQ的一些花里胡哨的东西，自然体积也更小。因此我也把我的QQ给换成了Tim。这个替代品在大部分时候都能实现QQ的功能，但在红包和空间等部分功能上不够完善(不过这些功能我也并不经常使用)。<br><strong>节省：165MB - 100MB = 65MB</strong></p><h2 id="SnapSeed→Darkroom"><a href="#SnapSeed→Darkroom" class="headerlink" title="SnapSeed→Darkroom"></a>SnapSeed→Darkroom</h2><p><img src="/2017/12/31/apps/%E5%A6%82%E4%BD%95%E6%9E%81%E5%81%8F%E6%89%A7%E5%9C%B0%E4%BD%BF%E7%94%A816G%E7%9A%84iPhone%205S/15147269357147.jpg" alt="几张用我的5S拍摄并用Darkroom调整过的照片"></p><p>在我的相册占用空间不断增大的过程中，我也不得不向存储空间作出让步。将我一直使用的Snapseed替换成了Darkroom。功能上，Darkroom同样能调整图片的对比度、饱和度等属性，还拥有独特的「Color Tool」，可以单独调整某一种颜色的色相、饱和度和亮度。<br>相较Snapseed，Darkroom功能较少——较为常用的例如局部调整、修复等工具都不具备。不过正是如此，把Snapseed换掉之后，我开始更加注重拍摄时的原始构图，而不是在乱拍一通之后慢慢用工具去作大量的修整——这才应该是摄影的真谛。无论如何，Darkroom所具备的这些功能都是最重要的基础功能，而相较它仅10.8MB的空间占用，从「功能对比存储空间」这一点来说，简直是性价比爆棚。</p><p><strong>节省：135MB - 10MB = 125MB</strong></p><h2 id="Pocket→Fiery-Feeds"><a href="#Pocket→Fiery-Feeds" class="headerlink" title="Pocket→Fiery Feeds"></a>Pocket→Fiery Feeds</h2><p>Pocket是今年「404」的部分应用之一。撇开这件事情不谈，它本身的阅读体验并没有出色到让我感到难以割舍，因此用RSS阅读器来阅读Pocket里的文章这件事情就显得理所当然。支持这功能的RSS阅读器有很多，我早些时候用的是Reeder。后来发现了Fiery Feeds这款功能强大且具有完整键盘快捷键支持的应用，于是便转为用它来阅读Pocket中的文章。至于添加这件事情，由于没了本地的Pocket应用，我就用Workflow来完成。Workflow内置的「添加到Pocket」动作是用Pocket提供的接口实现的，因此无需本地安装有应用即可使用。同时，Fiery Feeds高度的自定义功能也让阅读的体验有所优化。<br><strong>节省：75MB - 15MB =60MB</strong></p><h1 id="求助于别的设备"><a href="#求助于别的设备" class="headerlink" title="求助于别的设备"></a>求助于别的设备</h1><p>除了考虑如何减少设备本地的空间占用，将一部分设备上的数据转移到其它设备也是一个方法。对我来说，除了各类云盘，我的数据主要转移到两个位置：</p><ul><li>SanDisk iXpandDrive。这类使用Lightening接口的U盘不同于用OTG方式连接到安卓设备上的U盘，在对应的iOS设备上必须安装有对应厂商的应用，才能在应用中读取U盘中的数据。纵使如此，能够用这样的方式快速在手机和电脑之间无视网络状况地传输文件也已经相当方便了。闪迪的应用提供了接入U盘后自动备份相册新照片的功能，定期使用SanDisk的iXpandDrive备份相册，我就可以适度再多删除一些本地的照片。</li><li>我的iPad Pro。这台iPad Pro是别人送我的，说起来讽刺——它是256GB版的，我因此无数次幻想要是能把它的存储空间分一点到我的手机上该有多好。不过这种幻想倒也并非一点也不现实，把一部分照片保存在iPad上然后删除手机上的版本就是一种解决方案。此外，有了iPad之后，原先手机上的Pythonista等各种占用大量空间的应用也可以搬个家了(值得一提的是我当时花了不少精力来转移文件，而就在前不久Pythonista在更新中支持了iCloud同步)。<br><strong>节省：(至少)475MB</strong></li></ul><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>上面的数据算下来，我一共省下了1.1GB多的空间——这些空间大部分最后都变成了照片、音乐，以及我根本看不到具体数量的系统缓存。在我的相册仍处在不断增长的情况下，我用一台16G的iPhone 5S成功地又苟活了一年。虽然说起来是「向存储空间妥协」了，但我其实并没有因此而损失很多我手机具有的功能，而照样该干什么干什么；删掉的东西越来越多的同时，也就意味着留下的东西越来越精简和重要。<br>另外有件值得一提的事情是：本文很大一部分都是在我的iPhone 5S上写的。事实上，我自己的博客也是完全用这台iPhone 5S搭建的，由此大约可以看出这台老旧的设备仍具有不少的潜力。<br>而就我的2017而言，这台5S还很好地证明了一件事：空间总是会有的，哪怕你不愿意多删东西。</p><hr><p>本文参与<a href="https://sspai.com/page/2017" target="_blank" rel="noopener">「少数派2017年度征文」活动</a>。<br>题图中的部分素材来源于<a href="https://www.freepik.com/free-vector/computer-icons-collection_1014278.htm" target="_blank" rel="noopener">Freepik</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> π </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从使用逻辑谈谈我的笔记应用</title>
      <link href="/2017/10/30/apps/%E4%BB%8E%E4%BD%BF%E7%94%A8%E9%80%BB%E8%BE%91%E8%B0%88%E8%B0%88%E6%88%91%E7%9A%84%E7%AC%94%E8%AE%B0%E5%BA%94%E7%94%A8/"/>
      <url>/2017/10/30/apps/%E4%BB%8E%E4%BD%BF%E7%94%A8%E9%80%BB%E8%BE%91%E8%B0%88%E8%B0%88%E6%88%91%E7%9A%84%E7%AC%94%E8%AE%B0%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>我一直很在意软件的使用逻辑，即对于任何使用中的软件都要考虑清楚“我用它来干什么”。如果两款软件的功能是一样的，我绝不会让它们在我的手机里长期共存(16G时代养成的习惯了)。研究使用逻辑是一个很有趣的习惯，它有时候可以让你发掘出一些意想不到的用法。在此我想聊聊我手机里的四款笔记应用之间的不同使用逻辑。</p><h2 id="Drafts"><a href="#Drafts" class="headerlink" title="Drafts"></a>Drafts</h2><p>Drafts是我最早入手的笔记类应用，我一直非常喜欢它启动即新建文档的便捷和强大的文字处理能力。从使用逻辑上来说，我用Drafts完成日常的一些随手记录和信息的临时存放，将其作为文字的入口和中转站。</p><p><img src="/2017/10/30/apps/%E4%BB%8E%E4%BD%BF%E7%94%A8%E9%80%BB%E8%BE%91%E8%B0%88%E8%B0%88%E6%88%91%E7%9A%84%E7%AC%94%E8%AE%B0%E5%BA%94%E7%94%A8/15101244486928-7804480.jpg" alt></p><p>我的Drafts主要起到两个作用：第一，临时记录一些日常想法和信息。通过预设好的脚本，我可以一键将内容发送至印象笔记，2Do或是其它地方。第二，凌乱信息的收集和整理。例如看书时想做书摘，我的方案是用OCR软件扫描后分享到Drafts，选择Append到当前书摘的draft，最后整理好一起发送至印象笔记。<br>美中不足的是，Drafts无法直接插入图片，需要使用Workflow辅助。 当然，对于不把它作为主力文字处理工具的用户来说，这是个无关紧要的小问题。<br>你可以在App Store<a href="https://itunes.apple.com/cn/app/drafts-quick-capture/id905337691?mt=8&amp;uo=4&amp;at=1000lHwn" target="_blank" rel="noopener">下载Drafts</a>，目前售价18元。</p><h2 id="Bear"><a href="#Bear" class="headerlink" title="Bear"></a>Bear</h2><p>在我用过的所有笔记应用中，Bear可以说是颜值最高的。此外，支持Markdown语法也是我选择它的一大重要原因。我使用Bear来写笔记和文章，所有长文我基本上都用它来完成。<br>Bear的一大亮点是其无限层级的标签系统，这是印象笔记的2个层级远不能及的。这种标签的模式既可以单纯地当作文件夹来使用，也可以对内容进行交叉管理，是一种相对合理得多的模式。<br>此外，Bear现在可以将网页抓取为Markdown格式的文本，这个功能相比印象笔记时常连网页的悬浮按钮都抓进笔记的表现相当出彩(不过Bear在我的使用逻辑里并不作为收集工具使用，所以我选择用Workflow加上Drafts来完成这件事)。<br>你可以在App Store免费<a href="https://itunes.apple.com/cn/app/bear-%E5%8D%8E%E4%B8%BD%E4%B9%A6%E5%86%99%E7%AC%94%E8%AE%B0%E5%92%8C%E6%96%87%E7%AB%A0/id1016366447?mt=8&amp;uo=4&amp;at=1000lHwn" target="_blank" rel="noopener">下载Bear</a>。当前内购订阅为10元/月或103元/年，包含iCloud同步和数款主题。</p><h2 id="印象笔记"><a href="#印象笔记" class="headerlink" title="印象笔记"></a>印象笔记</h2><p>尽管印象笔记可谓是臃肿不堪，且不支持Markdown语法(而且富文本编辑器体验极差)，但不可否认它确实是笔记应用中极具竞争力的一家。时至今日，我早就放弃了拿印象笔记作笔记或者写东西的想法，它在我的使用逻辑中是一个收集的工具，也即很多人所谓的“第二大脑”。无法否认，印象笔记在同类应用中支持的分享服务接口最多，而这一特性是这类应用的核心所在。我使用印象笔记来存放Drafts整理好的信息或是剪藏有用的网页。相比Drafts存放短期信息和临时笔记、Bear专门存放重要的笔记，印象笔记对我来说更像一个大仓库，可以存放任何并不那么重要但是也许会有用处的内容。<br> 你可以在App Store免费<a href="https://itunes.apple.com/cn/app/%E5%8D%B0%E8%B1%A1%E7%AC%94%E8%AE%B0/id281796108?mt=8&amp;uo=4&amp;at=1000lHwn" target="_blank" rel="noopener">下载印象笔记</a>。</p><h2 id="MWeb"><a href="#MWeb" class="headerlink" title="MWeb"></a>MWeb</h2><p><img src="/2017/10/30/apps/%E4%BB%8E%E4%BD%BF%E7%94%A8%E9%80%BB%E8%BE%91%E8%B0%88%E8%B0%88%E6%88%91%E7%9A%84%E7%AC%94%E8%AE%B0%E5%BA%94%E7%94%A8/15101244237173.jpg" alt></p><p>MWeb的博文管理功能在一众编辑器中最为出色。它支持多种一键发布服务，例如Wordpress，Medium，Tumblr等。自从上次在少数派看到一篇文章后我便将个人博客迁移到了Bitcron，而Bitcron支持Dropbox同步内容。因此我可以使用MWeb的Dropbox同步功能来很方便地完成博文的发布和管理工作，甚至可以用其修改网站的CSS文件和页面代码。<br>MWeb的另一大亮点是对图床上传的良好支持。曾经有人告诉我MWeb功能不如Editorial，因为无论是图床功能还是一键发布这些东西都可以用脚本完成。但我认为Editorial有一件事情是不如MWeb的：利用Python脚本一键上传这个行为由于不是编辑器自己集成的，功能必然受到限制，因此没法既便捷地发布带外链的文章，又同时在本地保存带有原图片的文件(严格来说是引用编辑器内图片地址的.md文件)。从这个角度来看，MWeb可以直接发布链接替换的Markdown格式文章，同时保持原文不变，是很合理的设计。</p><p>MWeb当然也存在缺点，作为个人开发者作品，难免有些大大小小的Bug。例如编辑器有时不自动随光标下拉，iCloud同步速度明显慢于同类软件等。当然，这也并不影响它在我的笔记应用中所起到的作用。<br>你可以在App Store<a href="https://itunes.apple.com/cn/app/mweb-%E5%BC%BA%E5%A4%A7%E7%9A%84-markdown-%E7%BC%96%E8%BE%91%E5%92%8C%E5%8F%91%E5%B8%83%E8%BD%AF%E4%BB%B6/id1183407767?mt=8&amp;uo=4&amp;at=1000lHwn" target="_blank" rel="noopener">免费下载MWeb</a>。当前内购售价60元，包含发布到Wordpress等功能。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>犯罪执照与杀死胖子</title>
      <link href="/2017/10/21/ideas/%E7%8A%AF%E7%BD%AA%E6%89%A7%E7%85%A7%E4%B8%8E%E6%9D%80%E6%AD%BB%E8%83%96%E5%AD%90/"/>
      <url>/2017/10/21/ideas/%E7%8A%AF%E7%BD%AA%E6%89%A7%E7%85%A7%E4%B8%8E%E6%9D%80%E6%AD%BB%E8%83%96%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<h1 id><a href="#" class="headerlink" title=" "></a> </h1><p>前两天补了哥谭第四季的第一集<em>Pax Pénguina</em>。这一集本身没有太多可说的，作为新一季的第一集更多的起到了引入作用，并没有给人带来太多惊喜。不过企鹅发“犯罪执照”的行为倒是有些引发思考：Licenced Crime究竟是不是道义上能被接受的？</p><p>要考虑这个问题的答案，不妨先来看一些类似的东西。这个情景有些类似电车问题。假定你在铁轨边散步，突然发现有<strong>五个人</strong>被绑在铁轨上，更糟的是还有一辆电车正沿着轨道驶来，而司机似乎没有注意到这五个人。幸运的是，你可以通过你身边的一个扳手把电车引到一条岔道上来救这五个人。然而很不幸，那条岔道上也绑着<strong>一个人</strong>。你会拉下扳手吗？</p><p>这个简单的问题考验的是我们的道德直觉。假如你是一位功利主义者，你或许会觉得死一个人比死五个人更合适，可那一个人本来不必死——假使你不拉下那个扳手的话。同样，企鹅人的犯罪执照确实降低了犯罪率，可是那些合法犯罪的受害者就会同意这一点带来的好处吗？换而言之，牺牲少数人的幸福来换取多数人的幸福，究竟是否能为人接受？从哥谭的前几季来看，戈登是不会接受的。企鹅形容戈登的处事准则是“古板的正义感(<em>Antiquated Righteousness</em>)”。像企鹅这样的功利主义者显然认为戈登的行事准则是愚蠢的。</p><p>是这样吗？对于戈登和企鹅行事准则的争论其实很类似电车问题，而这一问题还存在许多变种。胖子问题就是一个著名的变种：假定这次仍然有五个倒霉的人被绑在铁轨上，而你正在横跨这条铁轨的一座天桥上。唯一阻止驶来的电车撞死这五个人的方法就是把天桥上的一个胖子推下去并让他被撞上，他的体重足以停下电车。你会杀死胖子吗？当你拉下扳手时，你并非亲手杀死了那个人；而当你把胖子推下天桥时，你却是亲手杀死了他。这个问题当然不是歧视胖子，有必要的话我们同样可以虚构一个背着超重背包的人，可关键在于你在那个人(或胖子)的死亡中扮演的角色。从结果来看，这两个情景都是以一人的性命换取五人的性命，可是不同过程似乎会影响人的判断。</p><p>这些都是戴维·埃德蒙兹在《你会杀死那个胖子吗？》中所提到的。埃德蒙兹在结尾处说，他并不会选择杀死那个胖子。我不想就这一问题作出表态，因为它牵涉到的问题实在是太多了。答案究竟是什么？其实这个问题根本没有答案。</p><p>回到犯罪执照，它究竟是不是道义上可以被接受的？这就要看你是那五个人之一还是胖子了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>苹果提供的究竟是不是我们想要的？</title>
      <link href="/2017/09/30/ideas/%E8%8B%B9%E6%9E%9C%E6%8F%90%E4%BE%9B%E7%9A%84%E7%A9%B6%E7%AB%9F%E6%98%AF%E4%B8%8D%E6%98%AF%E6%88%91%E4%BB%AC%E6%83%B3%E8%A6%81%E7%9A%84%EF%BC%9F/"/>
      <url>/2017/09/30/ideas/%E8%8B%B9%E6%9E%9C%E6%8F%90%E4%BE%9B%E7%9A%84%E7%A9%B6%E7%AB%9F%E6%98%AF%E4%B8%8D%E6%98%AF%E6%88%91%E4%BB%AC%E6%83%B3%E8%A6%81%E7%9A%84%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<p><img src="/2017/09/30/ideas/%E8%8B%B9%E6%9E%9C%E6%8F%90%E4%BE%9B%E7%9A%84%E7%A9%B6%E7%AB%9F%E6%98%AF%E4%B8%8D%E6%98%AF%E6%88%91%E4%BB%AC%E6%83%B3%E8%A6%81%E7%9A%84%EF%BC%9F/IMG_6708.JPG" alt><br>显然不完全是。</p><p>我私以为，一个完美的产品应该是能够满足使用者在任何合理的使用情况下的需求的。从这个角度而言，iOS 11不是完美的一个产品。</p><p><a href="http://sspai.com" target="_blank" rel="noopener">少数派</a>在9月26日的Power+会员通讯中谈了iOS 11的蓝牙与WiFi在苹果的无线布局中的意义。iOS 11的控制中心里的蓝牙与WiFi开关在非飞行模式下并不能关闭蓝牙与WiFi，而是以断开设备当前所有的连接来代替。这可能是一个有点奇怪的设计，但它背后的含义是——<strong>苹果不希望你总是去关掉无线连接。</strong></p><p>再仔细想想此中逻辑，这个设计让人觉得有些反感。<strong>并不是所有人都是同时拥有苹果全家桶的，而且并不是所有人都日常处于一个WiFi全覆盖的区域。</strong>就我个人而言，学校里平时是没有WiFi大面积覆盖的，我在学校里唯一能接触到的WiFi是我在教室的电脑上用无线网卡的SoftAP模式开的热点，速度还奇慢。在这样的前提下，我会偶尔打开WiFi用，但我会希望我能够在有必要的时候用一种简单的方式把它关掉。</p><p>这也就回到我开头的问题：为什么苹果不能加一个可以允许用户修改的选项？从技术角度来说这完全没有问题，只是苹果不愿意罢了。也许苹果还有进一步的布局，但从我的角度而言——我更希望产品的设计能给用户合理的选择空间。我最初换到iPhone是不得已，但是后来被App Store优秀的生态环境吸引了。但假如有一天，iOS的「强制性」系统级设定已经达到了让一些用户无法忍受的程度，必然会有人转投其它阵营。商业化的产品处理手段固然带来利益，但同样会影响用户体验；长期的这种状态必然不会被用户所容忍。苹果当下提供的方案确实符合苹果本身和部分用户的理由，但苹果也许该为另一部分用户三思。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用Workflow实现简单的抓图功能</title>
      <link href="/2017/05/04/apps/%E4%BD%BF%E7%94%A8Workflow%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E6%8A%93%E5%9B%BE%E5%8A%9F%E8%83%BD/"/>
      <url>/2017/05/04/apps/%E4%BD%BF%E7%94%A8Workflow%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E6%8A%93%E5%9B%BE%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<blockquote><p>最初实现这一功能仅仅是因为Telegram某个群里有人在要能抓图的Workflow。</p></blockquote><p>由于之前没见到过这种Workflow，我就自己动手写了一个，在这个过程中也有了一些新的认识。<br><img src="/2017/05/04/apps/%E4%BD%BF%E7%94%A8Workflow%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E6%8A%93%E5%9B%BE%E5%8A%9F%E8%83%BD/IMG_4786.PNG" alt><br>执行原理很简单，通过Get Contents of Web Page动作抓取网页内容，返回格式为富文本，再使用Convert Image动作筛选出图片，输出一个由图片组成的列表，用Choose from List来选取，然后保存。<br>在一开始构思的时候，我以为Choose from List可能会输出文字列表，这会很大程度上降低这个Workflow的使用体验。但最终Workflow的表现令人满意：在输入为图片构成的列表时，Choose from List动作自动改为了图片选框。<br><img src="/2017/05/04/apps/%E4%BD%BF%E7%94%A8Workflow%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E6%8A%93%E5%9B%BE%E5%8A%9F%E8%83%BD/IMG_4790.PNG" alt="图片选框和文字选框的区别"><br>由此也可以想到，Workflow的每一个动作实际上是有着多种预设功能的，能够根据输入来调整。<br><a href="https://workflow.is/workflows/cc8fdec0ab664f3c9b31244c74ce1f27" target="_blank" rel="noopener">点击安装<em>WebPic</em></a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Workflow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用Drafts快速调用Workflow</title>
      <link href="/2017/04/30/apps/%E7%94%A8Drafts%E5%BF%AB%E9%80%9F%E8%B0%83%E7%94%A8Workflow/"/>
      <url>/2017/04/30/apps/%E7%94%A8Drafts%E5%BF%AB%E9%80%9F%E8%B0%83%E7%94%A8Workflow/</url>
      
        <content type="html"><![CDATA[<p>一开始有这个需求是在安排复习计划时感到每次打开2Do添加任务时，点来点去特别麻烦，因此想通过Drafts的快速输入来代替手动点击添加任务。由于Drafts的JavaScript语法我不是很熟悉，就随手做了一个Workflow，通过Drafts调用来增强2Do的添加(我不喜欢在Workflow里面输入，那个输入框让人很不舒服)。后来我发现用Drafts启动Workflow比原来打开Workflow去找一条特定的wf然后运行要快得多，因此就有了用Drafts调用Workflow的想法。<br>这个想法建立于一个基础之上：Workflow在1.71的版本以后可以在一个Workflow中引用另一个Workflow，这样每个Workflow都可以做成模块的形式，像Python中调用函数那样来使用。这样只需要写一个总的Workflow来识别Drafts传过来的命令，然后启动对应的Workflow就好了。<br><strong>更正</strong>：v1.71只是支持了直接调用Wf，1.71以前的版本可以用urlschemes进行调用的。感谢@mr<em>dot指正。<br>对于Drafts的Action的设置很简单，只需要把当前Drafts的主体传送给Workflow就行；Workflow需要设置为Action Extension，只接收Text。这样一来整个流程就完成了我的需求。<br>不过Workflow的命名一般不会很简短，但对于我这个流程所追求的效率，输入那么长的名字显然不合理。所以在这个Wf中，我增加了一个Dictionary，Key为应该输入的指令，Value存放对应Workflow的名字。运行后将<strong>输入的命令与存放的命令集比对</strong>，如果找到符合的，就运行该指令对应的Workflow，使用者就只要按需求自定义好命令集，就可以使用。<br>目前我只做了<strong>快速添加2Do</strong>这一个Wf作为子命令。<br>命令格式为：<br>td<br>可选参数：<br>-tit </em>标题<em><br>-tag </em>标签(多个使用半角逗号隔开)<em><br>-list </em>添加的列表<em><br>使用者也可以自行添加参数。另外这个动作也支持直接被Drafts调用，如果传入的内容不包含_td</em>命令，就会逐行添加任务。我之所以没有把逐行添加直接写到指令里是因为那样写起来太麻烦了，有兴趣的人可以自己改写我的Workflow。<br><img src="/2017/04/30/apps/%E7%94%A8Drafts%E5%BF%AB%E9%80%9F%E8%B0%83%E7%94%A8Workflow/IMG_4653.GIF" alt="使用效果"></p><p><a href="https://drafts4-actions.agiletortoise.com/a/2BQ" target="_blank" rel="noopener">点击安装Drafts Action</a><br><a href="https://workflow.is/workflows/184172692f174ec8917ae331e6d9d8f7" target="_blank" rel="noopener">点击安装<em>Command</em> Workflow</a><br><a href="https://workflow.is/workflows/24810fb1e76b419cbc3e63940daefa30" target="_blank" rel="noopener">点击安装<em>2Do</em> Workflow</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Drafts </tag>
            
            <tag> Workflow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电车学随想</title>
      <link href="/2017/02/17/culture/%E7%94%B5%E8%BD%A6%E5%AD%A6%E9%9A%8F%E6%83%B3/"/>
      <url>/2017/02/17/culture/%E7%94%B5%E8%BD%A6%E5%AD%A6%E9%9A%8F%E6%83%B3/</url>
      
        <content type="html"><![CDATA[<p><img src="/2017/02/17/culture/%E7%94%B5%E8%BD%A6%E5%AD%A6%E9%9A%8F%E6%83%B3/UNADJUSTEDNONRAW_thumb_39c.jpg" alt>重读《你会杀死那个胖子吗？》，越发感受到电车问题的深刻含义。作为一个接触电车学仅几个月的人，我不认为我的观点能超越诸如菲利帕·福特这样的多年研究者，因此我不想提出很鲜明的观点；但我也不打算机械地在此复述一大堆电车情境。本文仅仅是我个人在阅读过程中的几个相互之间未必连续的想法，记录下来以供以后参考。</p><h1 id="电车学的现实意义"><a href="#电车学的现实意义" class="headerlink" title="电车学的现实意义"></a>电车学的现实意义</h1><p>如果把电车学看成是哲学家毫无现实意义的思考，那就大错特错了。《杀死胖子》的第一章就讲述了一个关于在德军的V-2导弹下选择拯救谁的故事，而这是二战中发生在英国的真实故事；美国扔在日本的两颗原子弹也是电车情境中轨道扳手的真实再现。电车学实际上是在为各种有可能威胁个体生命的情形作出具有代表性的考虑，而这些情形在每时每刻都在发生。同样地，电车学也在维护司法正义这一过程中有所体现。</p><h1 id="变化的道德标准"><a href="#变化的道德标准" class="headerlink" title="变化的道德标准"></a>变化的道德标准</h1><p>电车学的一个研究目的就是为了寻找一个道德标准，但是很快就有人意识到道德标准这一因素是受到生理限制的。这可能听起来有点荒谬，但实验的确发现不同状态下的人对于电车问题的回答有着不小的区别，换而言之道德不只是镌刻在思想上的痕迹。如果道德标准在变化，那么又怎么提出一套统一的标准来考量我们的行为？这就像在盐粒与沙堆上建起的城堡。这样的道德标准极有可能是不存在的，我们能做的应该是在一个较稳定的状态下提出合理的解释。</p><h1 id="双重结果原则与功利主义"><a href="#双重结果原则与功利主义" class="headerlink" title="双重结果原则与功利主义"></a>双重结果原则与功利主义</h1><p>DDE(Doctrine of double effect，或「双重结果原则」)，可以解释一部分情况下人们的直觉反应。DDE由四种情境共同组成：</p><ul><li>人们觉得这一行为与其造成的伤害互相独立，而行为本身没有错；</li><li>不论从手段还是从目的而言，当事人都想做好事而不想造成伤害，尽管他能够预见到伤害；</li><li>不造成伤害就不可能做好事；</li><li>造成的伤害同想做的好事相比并不十分严重。<br>这难免令人想到一个问题，DDE是某种形式的功利主义吗？两者都为了一个「二大于一」的结果而生，虽然DDE相对纯粹的功利主义有更多限制，但是它们的本质是类似的：为达成某种行为的过程作辩解。我觉得DDE是包含在功利主义中的，功利主义并不在意行为是故意的还是预见的，而DDE要求行为不能是故意的，仅此而已。</li></ul><h1 id="做一个感性的功利主义者"><a href="#做一个感性的功利主义者" class="headerlink" title="做一个感性的功利主义者"></a>做一个感性的功利主义者</h1><p>我想把书中的两个例子放在一起。如果现在有一个情景，我们为了救下五个人而必须杀死一个人，大部分人都会拒绝这么做。但倘若我们现在为了救下整个人类文明而必须杀死一个人，又会有同样多的人赞成这么做。五个人与整个文明之间有什么不同？我认为对比这两者的关键在于，一个人与五个人的区别是否等价于一个人与整个文明的区别？<br>出于理性的功利主义会说，这之间是没有区别的。五大于一，七十亿也大于一，功利主义只需要那个大于号，但是这个大于号有时候会造成问题。假想有一位法官要作出判决，他是应该偏袒一个无辜的人，还是应该为了五个人而陷害这个人？如果他选择为了他心目中具有更高价值的事物去陷害这个人，那显然达成了功利主义的价值最大化，但陷害这个人是在挑战司法体系的公正，而由此也许会造成社会的不稳定——理性的功利主义遇到了二律背反。 问题在于功利主义是一种为了结果正义而放弃程序正义的思想。有时候被放下的程序正义恰好会干扰结果的正义性，这样的功利主义是错误的。更何况功利主义的意义是为了给我们的道德找到一个标准，而我们的生活是经历时间的过程性经历，用功利主义这一结果指向性的观点来一言蔽之未免有些武断。<br>多数人是没有功利主义本能的，但这也并不意味着功利主义完全就是错误的。追求更多数人的幸福这件事本身并没有错，但我们不能滥用功利主义来进行辩护。追求结果正义的同时，我们更应该注重程序正义，以感性的态度对待功利主义。</p><p>在所有这些(混乱的)想法的最后，我想回答一下那个最初的电车问题：<br>我不会杀死胖子。</p><hr><p>【文化】是我最近新增的一个栏目，主要发布书评、影评等内容。别误会，我不是什么很文艺的人。<br>你可以访问<a href="https://northwind.bitcron.com/category/文化" target="_blank" rel="noopener">https://northwind.bitcron.com/category/文化</a>来阅读这个栏目。(不过离这里的东西多到足够读还早着呢)</p>]]></content>
      
      
      
        <tags>
            
            <tag> 阅读 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
